
010_Dac_Hal_Vld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012c0  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001490  08001490  00002490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014c0  080014c0  00003010  2**0
                  CONTENTS
  4 .ARM          00000000  080014c0  080014c0  00003010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014c0  080014c0  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014c0  080014c0  000024c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014c4  080014c4  000024c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080014c8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000010  080014d8  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  080014d8  00003044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a81  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001157  00000000  00000000  00006aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  00007c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000035a  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f353  00000000  00000000  0000841a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005699  00000000  00000000  0001776d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005caa7  00000000  00000000  0001ce06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000798ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010d4  00000000  00000000  000798f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0007a9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001478 	.word	0x08001478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08001478 	.word	0x08001478

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f97d 	bl	8000512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f826 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f000 f898 	bl	8000350 <MX_GPIO_Init>
  MX_DAC_Init();
 8000220:	f000 f862 	bl	80002e8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000224:	2100      	movs	r1, #0
 8000226:	480e      	ldr	r0, [pc, #56]	@ (8000260 <main+0x50>)
 8000228:	f000 faf5 	bl	8000816 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  do{
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,i);
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <main+0x54>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2200      	movs	r2, #0
 8000232:	2100      	movs	r1, #0
 8000234:	480a      	ldr	r0, [pc, #40]	@ (8000260 <main+0x50>)
 8000236:	f000 fb44 	bl	80008c2 <HAL_DAC_SetValue>
		  HAL_Delay(1);
 800023a:	2001      	movs	r0, #1
 800023c:	f000 f9c2 	bl	80005c4 <HAL_Delay>
		  i++;
 8000240:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <main+0x54>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	3301      	adds	r3, #1
 8000246:	4a07      	ldr	r2, [pc, #28]	@ (8000264 <main+0x54>)
 8000248:	6013      	str	r3, [r2, #0]

	  }
	  while(i < 4096);
 800024a:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <main+0x54>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000252:	dbeb      	blt.n	800022c <main+0x1c>
	  i = 3000;
 8000254:	4b03      	ldr	r3, [pc, #12]	@ (8000264 <main+0x54>)
 8000256:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800025a:	601a      	str	r2, [r3, #0]
  while (1)
 800025c:	e7e6      	b.n	800022c <main+0x1c>
 800025e:	bf00      	nop
 8000260:	2000002c 	.word	0x2000002c
 8000264:	20000000 	.word	0x20000000

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	@ 0x40
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	@ 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 f8d2 	bl	8001420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	2301      	movs	r3, #1
 8000290:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	2310      	movs	r3, #16
 8000294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800029a:	2300      	movs	r3, #0
 800029c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800029e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fd0f 	bl	8000ccc <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002b4:	f000 f862 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2302      	movs	r3, #2
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 ff7d 	bl	80011d0 <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002dc:	f000 f84e 	bl	800037c <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3740      	adds	r7, #64	@ 0x40
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002ee:	463b      	mov	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80002f6:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <MX_DAC_Init+0x60>)
 80002f8:	4a14      	ldr	r2, [pc, #80]	@ (800034c <MX_DAC_Init+0x64>)
 80002fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80002fc:	4812      	ldr	r0, [pc, #72]	@ (8000348 <MX_DAC_Init+0x60>)
 80002fe:	f000 fa68 	bl	80007d2 <HAL_DAC_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000308:	f000 f838 	bl	800037c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	4619      	mov	r1, r3
 800031a:	480b      	ldr	r0, [pc, #44]	@ (8000348 <MX_DAC_Init+0x60>)
 800031c:	f000 fafa 	bl	8000914 <HAL_DAC_ConfigChannel>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000326:	f000 f829 	bl	800037c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800032a:	463b      	mov	r3, r7
 800032c:	2210      	movs	r2, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4805      	ldr	r0, [pc, #20]	@ (8000348 <MX_DAC_Init+0x60>)
 8000332:	f000 faef 	bl	8000914 <HAL_DAC_ConfigChannel>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800033c:	f000 f81e 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	2000002c 	.word	0x2000002c
 800034c:	40007400 	.word	0x40007400

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <MX_GPIO_Init+0x28>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a07      	ldr	r2, [pc, #28]	@ (8000378 <MX_GPIO_Init+0x28>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b05      	ldr	r3, [pc, #20]	@ (8000378 <MX_GPIO_Init+0x28>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <Error_Handler+0x8>

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038e:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <HAL_MspInit+0x5c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a14      	ldr	r2, [pc, #80]	@ (80003e4 <HAL_MspInit+0x5c>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <HAL_MspInit+0x5c>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <HAL_MspInit+0x5c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <HAL_MspInit+0x5c>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <HAL_MspInit+0x5c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003be:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <HAL_MspInit+0x60>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	4a04      	ldr	r2, [pc, #16]	@ (80003e8 <HAL_MspInit+0x60>)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010000 	.word	0x40010000

080003ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <HAL_DAC_MspInit+0x6c>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d121      	bne.n	8000450 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800040c:	4b13      	ldr	r3, [pc, #76]	@ (800045c <HAL_DAC_MspInit+0x70>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	4a12      	ldr	r2, [pc, #72]	@ (800045c <HAL_DAC_MspInit+0x70>)
 8000412:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000416:	61d3      	str	r3, [r2, #28]
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <HAL_DAC_MspInit+0x70>)
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b0d      	ldr	r3, [pc, #52]	@ (800045c <HAL_DAC_MspInit+0x70>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a0c      	ldr	r2, [pc, #48]	@ (800045c <HAL_DAC_MspInit+0x70>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <HAL_DAC_MspInit+0x70>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800043c:	2330      	movs	r3, #48	@ 0x30
 800043e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000440:	2303      	movs	r3, #3
 8000442:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <HAL_DAC_MspInit+0x74>)
 800044c:	f000 faba 	bl	80009c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40007400 	.word	0x40007400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <NMI_Handler+0x4>

0800046c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <MemManage_Handler+0x4>

0800047c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <UsageFault_Handler+0x4>

0800048c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b4:	f000 f86a 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}

080004bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c8:	f7ff fff8 	bl	80004bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004cc:	480b      	ldr	r0, [pc, #44]	@ (80004fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004ce:	490c      	ldr	r1, [pc, #48]	@ (8000500 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000504 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a09      	ldr	r2, [pc, #36]	@ (8000508 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004e4:	4c09      	ldr	r4, [pc, #36]	@ (800050c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004f2:	f000 ff9d 	bl	8001430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff fe8b 	bl	8000210 <main>
  bx lr
 80004fa:	4770      	bx	lr
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000504:	080014c8 	.word	0x080014c8
  ldr r2, =_sbss
 8000508:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800050c:	20000044 	.word	0x20000044

08000510 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_IRQHandler>

08000512 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000516:	2003      	movs	r0, #3
 8000518:	f000 f928 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051c:	200f      	movs	r0, #15
 800051e:	f000 f805 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000522:	f7ff ff31 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000526:	2300      	movs	r3, #0
}
 8000528:	4618      	mov	r0, r3
 800052a:	bd80      	pop	{r7, pc}

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f935 	bl	80007ba <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f90b 	bl	8000782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	@ (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000004 	.word	0x20000004
 8000584:	2000000c 	.word	0x2000000c
 8000588:	20000008 	.word	0x20000008

0800058c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_IncTick+0x1c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <HAL_IncTick+0x20>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a03      	ldr	r2, [pc, #12]	@ (80005ac <HAL_IncTick+0x20>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	2000000c 	.word	0x2000000c
 80005ac:	20000040 	.word	0x20000040

080005b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b02      	ldr	r3, [pc, #8]	@ (80005c0 <HAL_GetTick+0x10>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	20000040 	.word	0x20000040

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff fff0 	bl	80005b0 <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d005      	beq.n	80005ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <HAL_Delay+0x44>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ea:	bf00      	nop
 80005ec:	f7ff ffe0 	bl	80005b0 <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8f7      	bhi.n	80005ec <HAL_Delay+0x28>
  {
  }
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000000c 	.word	0x2000000c

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	@ (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	@ (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	@ 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	@ 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	@ (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f7ff ff90 	bl	8000670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff49 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff5e 	bl	8000654 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff90 	bl	80006c4 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5f 	bl	8000670 <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffb0 	bl	8000728 <SysTick_Config>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e014      	b.n	800080e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d105      	bne.n	80007fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff fdf9 	bl	80003ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2202      	movs	r2, #2
 80007fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2201      	movs	r2, #1
 800080a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e046      	b.n	80008b8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d101      	bne.n	8000836 <HAL_DAC_Start+0x20>
 8000832:	2302      	movs	r3, #2
 8000834:	e040      	b.n	80008b8 <HAL_DAC_Start+0xa2>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2201      	movs	r2, #1
 800083a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2202      	movs	r2, #2
 8000840:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6819      	ldr	r1, [r3, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	2201      	movs	r2, #1
 8000850:	409a      	lsls	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	430a      	orrs	r2, r1
 8000858:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10f      	bne.n	8000880 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800086a:	2b3c      	cmp	r3, #60	@ 0x3c
 800086c:	d11d      	bne.n	80008aa <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f042 0201 	orr.w	r2, r2, #1
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	e014      	b.n	80008aa <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f003 0310 	and.w	r3, r3, #16
 8000890:	213c      	movs	r1, #60	@ 0x3c
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	429a      	cmp	r2, r3
 8000898:	d107      	bne.n	80008aa <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f042 0202 	orr.w	r2, r2, #2
 80008a8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b087      	sub	sp, #28
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e015      	b.n	800090a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d105      	bne.n	80008f6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4413      	add	r3, r2
 80008f0:	3308      	adds	r3, #8
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e004      	b.n	8000900 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	3314      	adds	r3, #20
 80008fe:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	461a      	mov	r2, r3
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	371c      	adds	r7, #28
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	@ 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <HAL_DAC_ConfigChannel+0x1c>
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	e042      	b.n	80009ba <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	795b      	ldrb	r3, [r3, #5]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d101      	bne.n	8000940 <HAL_DAC_ConfigChannel+0x2c>
 800093c:	2302      	movs	r3, #2
 800093e:	e03c      	b.n	80009ba <HAL_DAC_ConfigChannel+0xa6>
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2201      	movs	r2, #1
 8000944:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2202      	movs	r2, #2
 800094a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8000962:	43db      	mvns	r3, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4013      	ands	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4313      	orrs	r3, r2
 8000974:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f003 0310 	and.w	r3, r3, #16
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4313      	orrs	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6819      	ldr	r1, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	22c0      	movs	r2, #192	@ 0xc0
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	400a      	ands	r2, r1
 80009aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2201      	movs	r2, #1
 80009b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2200      	movs	r2, #0
 80009b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80009b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	@ 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b08b      	sub	sp, #44	@ 0x2c
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d6:	e169      	b.n	8000cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d8:	2201      	movs	r2, #1
 80009da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	4013      	ands	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	f040 8158 	bne.w	8000ca6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4a9a      	ldr	r2, [pc, #616]	@ (8000c64 <HAL_GPIO_Init+0x2a0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d05e      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a00:	4a98      	ldr	r2, [pc, #608]	@ (8000c64 <HAL_GPIO_Init+0x2a0>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d875      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a06:	4a98      	ldr	r2, [pc, #608]	@ (8000c68 <HAL_GPIO_Init+0x2a4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d058      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a0c:	4a96      	ldr	r2, [pc, #600]	@ (8000c68 <HAL_GPIO_Init+0x2a4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d86f      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a12:	4a96      	ldr	r2, [pc, #600]	@ (8000c6c <HAL_GPIO_Init+0x2a8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d052      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a18:	4a94      	ldr	r2, [pc, #592]	@ (8000c6c <HAL_GPIO_Init+0x2a8>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d869      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a1e:	4a94      	ldr	r2, [pc, #592]	@ (8000c70 <HAL_GPIO_Init+0x2ac>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d04c      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a24:	4a92      	ldr	r2, [pc, #584]	@ (8000c70 <HAL_GPIO_Init+0x2ac>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d863      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a2a:	4a92      	ldr	r2, [pc, #584]	@ (8000c74 <HAL_GPIO_Init+0x2b0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d046      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a30:	4a90      	ldr	r2, [pc, #576]	@ (8000c74 <HAL_GPIO_Init+0x2b0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d85d      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d82a      	bhi.n	8000a90 <HAL_GPIO_Init+0xcc>
 8000a3a:	2b12      	cmp	r3, #18
 8000a3c:	d859      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a44 <HAL_GPIO_Init+0x80>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000abf 	.word	0x08000abf
 8000a48:	08000a99 	.word	0x08000a99
 8000a4c:	08000aab 	.word	0x08000aab
 8000a50:	08000aed 	.word	0x08000aed
 8000a54:	08000af3 	.word	0x08000af3
 8000a58:	08000af3 	.word	0x08000af3
 8000a5c:	08000af3 	.word	0x08000af3
 8000a60:	08000af3 	.word	0x08000af3
 8000a64:	08000af3 	.word	0x08000af3
 8000a68:	08000af3 	.word	0x08000af3
 8000a6c:	08000af3 	.word	0x08000af3
 8000a70:	08000af3 	.word	0x08000af3
 8000a74:	08000af3 	.word	0x08000af3
 8000a78:	08000af3 	.word	0x08000af3
 8000a7c:	08000af3 	.word	0x08000af3
 8000a80:	08000af3 	.word	0x08000af3
 8000a84:	08000af3 	.word	0x08000af3
 8000a88:	08000aa1 	.word	0x08000aa1
 8000a8c:	08000ab5 	.word	0x08000ab5
 8000a90:	4a79      	ldr	r2, [pc, #484]	@ (8000c78 <HAL_GPIO_Init+0x2b4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d013      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a96:	e02c      	b.n	8000af2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	623b      	str	r3, [r7, #32]
          break;
 8000a9e:	e029      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	623b      	str	r3, [r7, #32]
          break;
 8000aa8:	e024      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	3308      	adds	r3, #8
 8000ab0:	623b      	str	r3, [r7, #32]
          break;
 8000ab2:	e01f      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	330c      	adds	r3, #12
 8000aba:	623b      	str	r3, [r7, #32]
          break;
 8000abc:	e01a      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d102      	bne.n	8000acc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	623b      	str	r3, [r7, #32]
          break;
 8000aca:	e013      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d105      	bne.n	8000ae0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	611a      	str	r2, [r3, #16]
          break;
 8000ade:	e009      	b.n	8000af4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	615a      	str	r2, [r3, #20]
          break;
 8000aea:	e003      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          break;
 8000af2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	2bff      	cmp	r3, #255	@ 0xff
 8000af8:	d801      	bhi.n	8000afe <HAL_GPIO_Init+0x13a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	e001      	b.n	8000b02 <HAL_GPIO_Init+0x13e>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3304      	adds	r3, #4
 8000b02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	2bff      	cmp	r3, #255	@ 0xff
 8000b08:	d802      	bhi.n	8000b10 <HAL_GPIO_Init+0x14c>
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x152>
 8000b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b12:	3b08      	subs	r3, #8
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	401a      	ands	r2, r3
 8000b28:	6a39      	ldr	r1, [r7, #32]
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	431a      	orrs	r2, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b44:	4b4d      	ldr	r3, [pc, #308]	@ (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a4c      	ldr	r2, [pc, #304]	@ (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b4a      	ldr	r3, [pc, #296]	@ (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b5c:	4a48      	ldr	r2, [pc, #288]	@ (8000c80 <HAL_GPIO_Init+0x2bc>)
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a40      	ldr	r2, [pc, #256]	@ (8000c84 <HAL_GPIO_Init+0x2c0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d013      	beq.n	8000bb0 <HAL_GPIO_Init+0x1ec>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c88 <HAL_GPIO_Init+0x2c4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d00d      	beq.n	8000bac <HAL_GPIO_Init+0x1e8>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3e      	ldr	r2, [pc, #248]	@ (8000c8c <HAL_GPIO_Init+0x2c8>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d007      	beq.n	8000ba8 <HAL_GPIO_Init+0x1e4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d101      	bne.n	8000ba4 <HAL_GPIO_Init+0x1e0>
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e006      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e004      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000ba8:	2302      	movs	r3, #2
 8000baa:	e002      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bb4:	f002 0203 	and.w	r2, r2, #3
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	4093      	lsls	r3, r2
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bc2:	492f      	ldr	r1, [pc, #188]	@ (8000c80 <HAL_GPIO_Init+0x2bc>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	3302      	adds	r3, #2
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	492c      	ldr	r1, [pc, #176]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bea:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4928      	ldr	r1, [pc, #160]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c04:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	4922      	ldr	r1, [pc, #136]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60cb      	str	r3, [r1, #12]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c12:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	491e      	ldr	r1, [pc, #120]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4918      	ldr	r1, [pc, #96]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4914      	ldr	r1, [pc, #80]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d021      	beq.n	8000c98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	490e      	ldr	r1, [pc, #56]	@ (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	600b      	str	r3, [r1, #0]
 8000c60:	e021      	b.n	8000ca6 <HAL_GPIO_Init+0x2e2>
 8000c62:	bf00      	nop
 8000c64:	10320000 	.word	0x10320000
 8000c68:	10310000 	.word	0x10310000
 8000c6c:	10220000 	.word	0x10220000
 8000c70:	10210000 	.word	0x10210000
 8000c74:	10120000 	.word	0x10120000
 8000c78:	10110000 	.word	0x10110000
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40011400 	.word	0x40011400
 8000c94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c98:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4909      	ldr	r1, [pc, #36]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	3301      	adds	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f47f ae8e 	bne.w	80009d8 <HAL_GPIO_Init+0x14>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	372c      	adds	r7, #44	@ 0x2c
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e272      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 8087 	beq.w	8000dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cec:	4b92      	ldr	r3, [pc, #584]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d00c      	beq.n	8000d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf8:	4b8f      	ldr	r3, [pc, #572]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d112      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
 8000d04:	4b8c      	ldr	r3, [pc, #560]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d10:	d10b      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d12:	4b89      	ldr	r3, [pc, #548]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d06c      	beq.n	8000df8 <HAL_RCC_OscConfig+0x12c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d168      	bne.n	8000df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e24c      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d32:	d106      	bne.n	8000d42 <HAL_RCC_OscConfig+0x76>
 8000d34:	4b80      	ldr	r3, [pc, #512]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a7f      	ldr	r2, [pc, #508]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e02e      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x98>
 8000d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a7a      	ldr	r2, [pc, #488]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b78      	ldr	r3, [pc, #480]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a77      	ldr	r2, [pc, #476]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e01d      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d6c:	d10c      	bne.n	8000d88 <HAL_RCC_OscConfig+0xbc>
 8000d6e:	4b72      	ldr	r3, [pc, #456]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a71      	ldr	r2, [pc, #452]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e00b      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d88:	4b6b      	ldr	r3, [pc, #428]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b68      	ldr	r3, [pc, #416]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a67      	ldr	r2, [pc, #412]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d013      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fc02 	bl	80005b0 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db0:	f7ff fbfe 	bl	80005b0 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b64      	cmp	r3, #100	@ 0x64
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e200      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f0      	beq.n	8000db0 <HAL_RCC_OscConfig+0xe4>
 8000dce:	e014      	b.n	8000dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fbee 	bl	80005b0 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fbea 	bl	80005b0 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	@ 0x64
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e1ec      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	4b53      	ldr	r3, [pc, #332]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f0      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x10c>
 8000df6:	e000      	b.n	8000dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d063      	beq.n	8000ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e06:	4b4c      	ldr	r3, [pc, #304]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00b      	beq.n	8000e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e12:	4b49      	ldr	r3, [pc, #292]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d11c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x18c>
 8000e1e:	4b46      	ldr	r3, [pc, #280]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d116      	bne.n	8000e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	4b43      	ldr	r3, [pc, #268]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_RCC_OscConfig+0x176>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d001      	beq.n	8000e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e1c0      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e42:	4b3d      	ldr	r3, [pc, #244]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4939      	ldr	r1, [pc, #228]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e56:	e03a      	b.n	8000ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d020      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e60:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e66:	f7ff fba3 	bl	80005b0 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fb9f 	bl	80005b0 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e1a1      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4927      	ldr	r1, [pc, #156]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
 8000ea0:	e015      	b.n	8000ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea2:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fb82 	bl	80005b0 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fb7e 	bl	80005b0 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e180      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f0      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d03a      	beq.n	8000f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d019      	beq.n	8000f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <HAL_RCC_OscConfig+0x274>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fb62 	bl	80005b0 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fb5e 	bl	80005b0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e160      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f02:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 fa68 	bl	80013e4 <RCC_Delay>
 8000f14:	e01c      	b.n	8000f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_RCC_OscConfig+0x274>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fb48 	bl	80005b0 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f22:	e00f      	b.n	8000f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f24:	f7ff fb44 	bl	80005b0 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d908      	bls.n	8000f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e146      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	42420000 	.word	0x42420000
 8000f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f44:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e9      	bne.n	8000f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80a6 	beq.w	80010aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f62:	4b8b      	ldr	r3, [pc, #556]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10d      	bne.n	8000f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b88      	ldr	r3, [pc, #544]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a87      	ldr	r2, [pc, #540]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b85      	ldr	r3, [pc, #532]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f86:	2301      	movs	r3, #1
 8000f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8a:	4b82      	ldr	r3, [pc, #520]	@ (8001194 <HAL_RCC_OscConfig+0x4c8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d118      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f96:	4b7f      	ldr	r3, [pc, #508]	@ (8001194 <HAL_RCC_OscConfig+0x4c8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8001194 <HAL_RCC_OscConfig+0x4c8>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fb05 	bl	80005b0 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000faa:	f7ff fb01 	bl	80005b0 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b64      	cmp	r3, #100	@ 0x64
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e103      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	4b75      	ldr	r3, [pc, #468]	@ (8001194 <HAL_RCC_OscConfig+0x4c8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d106      	bne.n	8000fde <HAL_RCC_OscConfig+0x312>
 8000fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4a6e      	ldr	r2, [pc, #440]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6213      	str	r3, [r2, #32]
 8000fdc:	e02d      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x334>
 8000fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a69      	ldr	r2, [pc, #420]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f023 0301 	bic.w	r3, r3, #1
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	4b67      	ldr	r3, [pc, #412]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a66      	ldr	r2, [pc, #408]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	6213      	str	r3, [r2, #32]
 8000ffe:	e01c      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d10c      	bne.n	8001022 <HAL_RCC_OscConfig+0x356>
 8001008:	4b61      	ldr	r3, [pc, #388]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a60      	ldr	r2, [pc, #384]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	4b5e      	ldr	r3, [pc, #376]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a5d      	ldr	r2, [pc, #372]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	e00b      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8001022:	4b5b      	ldr	r3, [pc, #364]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a5a      	ldr	r2, [pc, #360]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b58      	ldr	r3, [pc, #352]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a57      	ldr	r2, [pc, #348]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d015      	beq.n	800106e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fab5 	bl	80005b0 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001048:	e00a      	b.n	8001060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fab1 	bl	80005b0 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001058:	4293      	cmp	r3, r2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e0b1      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	4b4b      	ldr	r3, [pc, #300]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0ee      	beq.n	800104a <HAL_RCC_OscConfig+0x37e>
 800106c:	e014      	b.n	8001098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fa9f 	bl	80005b0 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fa9b 	bl	80005b0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e09b      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108c:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ee      	bne.n	8001076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d105      	bne.n	80010aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800109e:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8087 	beq.w	80011c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b4:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d061      	beq.n	8001184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d146      	bne.n	8001156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <HAL_RCC_OscConfig+0x4cc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fa6f 	bl	80005b0 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff fa6b 	bl	80005b0 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e06d      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f0      	bne.n	80010d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fc:	d108      	bne.n	8001110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001102:	f023 020f 	bic.w	r2, r3, #15
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4921      	ldr	r1, [pc, #132]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	4313      	orrs	r3, r2
 800110e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a19      	ldr	r1, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001120:	430b      	orrs	r3, r1
 8001122:	491b      	ldr	r1, [pc, #108]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_RCC_OscConfig+0x4cc>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fa3f 	bl	80005b0 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff fa3b 	bl	80005b0 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e03d      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x46a>
 8001154:	e035      	b.n	80011c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <HAL_RCC_OscConfig+0x4cc>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fa28 	bl	80005b0 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff fa24 	bl	80005b0 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e026      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x498>
 8001182:	e01e      	b.n	80011c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d107      	bne.n	800119c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e019      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
 8001190:	40021000 	.word	0x40021000
 8001194:	40007000 	.word	0x40007000
 8001198:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_RCC_OscConfig+0x500>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0a0      	b.n	8001326 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a4b      	ldr	r2, [pc, #300]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 8001202:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001206:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001214:	4b46      	ldr	r3, [pc, #280]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a45      	ldr	r2, [pc, #276]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 800121a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800121e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001220:	4b43      	ldr	r3, [pc, #268]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4940      	ldr	r1, [pc, #256]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d040      	beq.n	80012c0 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4b3a      	ldr	r3, [pc, #232]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d115      	bne.n	800127e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e067      	b.n	8001326 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125e:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d109      	bne.n	800127e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e05b      	b.n	8001326 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126e:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e053      	b.n	8001326 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127e:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f023 0203 	bic.w	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4929      	ldr	r1, [pc, #164]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001290:	f7ff f98e 	bl	80005b0 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	e00a      	b.n	80012ae <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001298:	f7ff f98a 	bl	80005b0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e03b      	b.n	8001326 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ae:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 020c 	and.w	r2, r3, #12
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	429a      	cmp	r2, r3
 80012be:	d1eb      	bne.n	8001298 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	4915      	ldr	r1, [pc, #84]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	490d      	ldr	r1, [pc, #52]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012fe:	f000 f81f 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 8001302:	4602      	mov	r2, r0
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <HAL_RCC_ClockConfig+0x160>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	4909      	ldr	r1, [pc, #36]	@ (8001334 <HAL_RCC_ClockConfig+0x164>)
 8001310:	5ccb      	ldrb	r3, [r1, r3]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_RCC_ClockConfig+0x168>)
 8001318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <HAL_RCC_ClockConfig+0x16c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f904 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	08001490 	.word	0x08001490
 8001338:	20000004 	.word	0x20000004
 800133c:	20000008 	.word	0x20000008

08001340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x90>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b04      	cmp	r3, #4
 8001368:	d002      	beq.n	8001370 <HAL_RCC_GetSysClockFreq+0x30>
 800136a:	2b08      	cmp	r3, #8
 800136c:	d003      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0x36>
 800136e:	e026      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001372:	613b      	str	r3, [r7, #16]
      break;
 8001374:	e026      	b.n	80013c4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	0c9b      	lsrs	r3, r3, #18
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00f      	beq.n	80013ae <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x90>)
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a0d      	ldr	r2, [pc, #52]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x94>)
 80013a0:	fb03 f202 	mul.w	r2, r3, r2
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e004      	b.n	80013b8 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
      break;
 80013bc:	e002      	b.n	80013c4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x94>)
 80013c0:	613b      	str	r3, [r7, #16]
      break;
 80013c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013c4:	693b      	ldr	r3, [r7, #16]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	007a1200 	.word	0x007a1200
 80013d8:	080014a0 	.word	0x080014a0
 80013dc:	080014b0 	.word	0x080014b0
 80013e0:	003d0900 	.word	0x003d0900

080013e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <RCC_Delay+0x34>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <RCC_Delay+0x38>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	0a5b      	lsrs	r3, r3, #9
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001400:	bf00      	nop
  }
  while (Delay --);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1e5a      	subs	r2, r3, #1
 8001406:	60fa      	str	r2, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f9      	bne.n	8001400 <RCC_Delay+0x1c>
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000004 	.word	0x20000004
 800141c:	10624dd3 	.word	0x10624dd3

08001420 <memset>:
 8001420:	4603      	mov	r3, r0
 8001422:	4402      	add	r2, r0
 8001424:	4293      	cmp	r3, r2
 8001426:	d100      	bne.n	800142a <memset+0xa>
 8001428:	4770      	bx	lr
 800142a:	f803 1b01 	strb.w	r1, [r3], #1
 800142e:	e7f9      	b.n	8001424 <memset+0x4>

08001430 <__libc_init_array>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	2600      	movs	r6, #0
 8001434:	4d0c      	ldr	r5, [pc, #48]	@ (8001468 <__libc_init_array+0x38>)
 8001436:	4c0d      	ldr	r4, [pc, #52]	@ (800146c <__libc_init_array+0x3c>)
 8001438:	1b64      	subs	r4, r4, r5
 800143a:	10a4      	asrs	r4, r4, #2
 800143c:	42a6      	cmp	r6, r4
 800143e:	d109      	bne.n	8001454 <__libc_init_array+0x24>
 8001440:	f000 f81a 	bl	8001478 <_init>
 8001444:	2600      	movs	r6, #0
 8001446:	4d0a      	ldr	r5, [pc, #40]	@ (8001470 <__libc_init_array+0x40>)
 8001448:	4c0a      	ldr	r4, [pc, #40]	@ (8001474 <__libc_init_array+0x44>)
 800144a:	1b64      	subs	r4, r4, r5
 800144c:	10a4      	asrs	r4, r4, #2
 800144e:	42a6      	cmp	r6, r4
 8001450:	d105      	bne.n	800145e <__libc_init_array+0x2e>
 8001452:	bd70      	pop	{r4, r5, r6, pc}
 8001454:	f855 3b04 	ldr.w	r3, [r5], #4
 8001458:	4798      	blx	r3
 800145a:	3601      	adds	r6, #1
 800145c:	e7ee      	b.n	800143c <__libc_init_array+0xc>
 800145e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001462:	4798      	blx	r3
 8001464:	3601      	adds	r6, #1
 8001466:	e7f2      	b.n	800144e <__libc_init_array+0x1e>
 8001468:	080014c0 	.word	0x080014c0
 800146c:	080014c0 	.word	0x080014c0
 8001470:	080014c0 	.word	0x080014c0
 8001474:	080014c4 	.word	0x080014c4

08001478 <_init>:
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	bf00      	nop
 800147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147e:	bc08      	pop	{r3}
 8001480:	469e      	mov	lr, r3
 8001482:	4770      	bx	lr

08001484 <_fini>:
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001486:	bf00      	nop
 8001488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148a:	bc08      	pop	{r3}
 800148c:	469e      	mov	lr, r3
 800148e:	4770      	bx	lr
