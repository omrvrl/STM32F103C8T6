
032_Pwm_Servo_Adc_Hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002738  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002844  08002844  00003844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002884  08002884  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002884  08002884  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002884  08002884  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002888  08002888  00003888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800288c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002898  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002898  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a72  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a4  00000000  00000000  0000caa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0000e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080b  00000000  00000000  0000edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001704a  00000000  00000000  0000f5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b588  00000000  00000000  00026615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008913a  00000000  00000000  00031b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bacd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002afc  00000000  00000000  000bad1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000bd818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800282c 	.word	0x0800282c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800282c 	.word	0x0800282c

0800014c <Read_Adc>:
/*
 * @brief read adc value from P0 channel 1
 * @param none
 * @retval none
 */
void Read_Adc(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000150:	480a      	ldr	r0, [pc, #40]	@ (800017c <Read_Adc+0x30>)
 8000152:	f000 fbcf 	bl	80008f4 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK){
 8000156:	490a      	ldr	r1, [pc, #40]	@ (8000180 <Read_Adc+0x34>)
 8000158:	4808      	ldr	r0, [pc, #32]	@ (800017c <Read_Adc+0x30>)
 800015a:	f000 fca5 	bl	8000aa8 <HAL_ADC_PollForConversion>
 800015e:	4603      	mov	r3, r0
 8000160:	2b00      	cmp	r3, #0
 8000162:	d106      	bne.n	8000172 <Read_Adc+0x26>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000164:	4805      	ldr	r0, [pc, #20]	@ (800017c <Read_Adc+0x30>)
 8000166:	f000 fda5 	bl	8000cb4 <HAL_ADC_GetValue>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	4b05      	ldr	r3, [pc, #20]	@ (8000184 <Read_Adc+0x38>)
 8000170:	801a      	strh	r2, [r3, #0]
	}

	HAL_ADC_Stop(&hadc1);
 8000172:	4802      	ldr	r0, [pc, #8]	@ (800017c <Read_Adc+0x30>)
 8000174:	f000 fc6c 	bl	8000a50 <HAL_ADC_Stop>
}
 8000178:	bf00      	nop
 800017a:	bd80      	pop	{r7, pc}
 800017c:	20000028 	.word	0x20000028
 8000180:	000186a0 	.word	0x000186a0
 8000184:	200000a0 	.word	0x200000a0

08000188 <map>:
 * @brief map funct. to scale adc value for pwm generator
 * @param In: Adc value given, In_min: adc min value, In_max: adc max value, out_min: pwm min value, out_max: pwm max value
 * @retval pulse: pwm value corrasponding to adc value In
 */

uint32_t map(int In, int In_min ,int In_max, int Out_min, int Out_max){
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	60f8      	str	r0, [r7, #12]
 8000190:	60b9      	str	r1, [r7, #8]
 8000192:	607a      	str	r2, [r7, #4]
 8000194:	603b      	str	r3, [r7, #0]
	return ((In-In_min) * (Out_max- Out_min) / (In_max - In_min) + Out_min);
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	68bb      	ldr	r3, [r7, #8]
 800019a:	1ad3      	subs	r3, r2, r3
 800019c:	69b9      	ldr	r1, [r7, #24]
 800019e:	683a      	ldr	r2, [r7, #0]
 80001a0:	1a8a      	subs	r2, r1, r2
 80001a2:	fb03 f202 	mul.w	r2, r3, r2
 80001a6:	6879      	ldr	r1, [r7, #4]
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	1acb      	subs	r3, r1, r3
 80001ac:	fb92 f2f3 	sdiv	r2, r2, r3
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	4413      	add	r3, r2
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3714      	adds	r7, #20
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
	...

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c6:	f000 fa5b 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ca:	f000 f82b 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ce:	f000 f919 	bl	8000404 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d2:	f000 f87f 	bl	80002d4 <MX_ADC1_Init>
  MX_TIM4_Init();
 80001d6:	f000 f8bb 	bl	8000350 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, pulse);
 80001da:	4b0f      	ldr	r3, [pc, #60]	@ (8000218 <main+0x58>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	480e      	ldr	r0, [pc, #56]	@ (800021c <main+0x5c>)
 80001e2:	f001 ff27 	bl	8002034 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_Adc();
 80001e6:	f7ff ffb1 	bl	800014c <Read_Adc>

	  pulse = map(adc_value, 0, 4095, 500, 2500);
 80001ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000220 <main+0x60>)
 80001ec:	881b      	ldrh	r3, [r3, #0]
 80001ee:	4618      	mov	r0, r3
 80001f0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80001fa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80001fe:	2100      	movs	r1, #0
 8000200:	f7ff ffc2 	bl	8000188 <map>
 8000204:	4603      	mov	r3, r0
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <main+0x58>)
 8000208:	6013      	str	r3, [r2, #0]

	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pulse);
 800020a:	4b04      	ldr	r3, [pc, #16]	@ (800021c <main+0x5c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a02      	ldr	r2, [pc, #8]	@ (8000218 <main+0x58>)
 8000210:	6812      	ldr	r2, [r2, #0]
 8000212:	635a      	str	r2, [r3, #52]	@ 0x34
	  Read_Adc();
 8000214:	bf00      	nop
 8000216:	e7e6      	b.n	80001e6 <main+0x26>
 8000218:	200000a4 	.word	0x200000a4
 800021c:	20000058 	.word	0x20000058
 8000220:	200000a0 	.word	0x200000a0

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b094      	sub	sp, #80	@ 0x50
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 face 	bl	80027d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000254:	2302      	movs	r3, #2
 8000256:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025c:	2310      	movs	r3, #16
 800025e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000260:	2302      	movs	r3, #2
 8000262:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000264:	2300      	movs	r3, #0
 8000266:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000268:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 800026c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f926 	bl	80014c4 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800027e:	f000 f8e3 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000292:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fb92 	bl	80019c8 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002aa:	f000 f8cd 	bl	8000448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ae:	2302      	movs	r3, #2
 80002b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80002b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fcfe 	bl	8001cbc <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002c6:	f000 f8bf 	bl	8000448 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3750      	adds	r7, #80	@ 0x50
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002e4:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <MX_ADC1_Init+0x74>)
 80002e6:	4a19      	ldr	r2, [pc, #100]	@ (800034c <MX_ADC1_Init+0x78>)
 80002e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ea:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <MX_ADC1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <MX_ADC1_Init+0x74>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f6:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <MX_ADC1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002fc:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <MX_ADC1_Init+0x74>)
 80002fe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000302:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000304:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <MX_ADC1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800030a:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <MX_ADC1_Init+0x74>)
 800030c:	2201      	movs	r2, #1
 800030e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <MX_ADC1_Init+0x74>)
 8000312:	f000 fa17 	bl	8000744 <HAL_ADC_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800031c:	f000 f894 	bl	8000448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000320:	2309      	movs	r3, #9
 8000322:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000324:	2301      	movs	r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000328:	2306      	movs	r3, #6
 800032a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4619      	mov	r1, r3
 8000330:	4805      	ldr	r0, [pc, #20]	@ (8000348 <MX_ADC1_Init+0x74>)
 8000332:	f000 fccb 	bl	8000ccc <HAL_ADC_ConfigChannel>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800033c:	f000 f884 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000028 	.word	0x20000028
 800034c:	40012400 	.word	0x40012400

08000350 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08a      	sub	sp, #40	@ 0x28
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000356:	f107 0320 	add.w	r3, r7, #32
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000372:	4b22      	ldr	r3, [pc, #136]	@ (80003fc <MX_TIM4_Init+0xac>)
 8000374:	4a22      	ldr	r2, [pc, #136]	@ (8000400 <MX_TIM4_Init+0xb0>)
 8000376:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8000378:	4b20      	ldr	r3, [pc, #128]	@ (80003fc <MX_TIM4_Init+0xac>)
 800037a:	222f      	movs	r2, #47	@ 0x2f
 800037c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037e:	4b1f      	ldr	r3, [pc, #124]	@ (80003fc <MX_TIM4_Init+0xac>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000384:	4b1d      	ldr	r3, [pc, #116]	@ (80003fc <MX_TIM4_Init+0xac>)
 8000386:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800038a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <MX_TIM4_Init+0xac>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000392:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <MX_TIM4_Init+0xac>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000398:	4818      	ldr	r0, [pc, #96]	@ (80003fc <MX_TIM4_Init+0xac>)
 800039a:	f001 fdfb 	bl	8001f94 <HAL_TIM_PWM_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80003a4:	f000 f850 	bl	8000448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a8:	2300      	movs	r3, #0
 80003aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80003b0:	f107 0320 	add.w	r3, r7, #32
 80003b4:	4619      	mov	r1, r3
 80003b6:	4811      	ldr	r0, [pc, #68]	@ (80003fc <MX_TIM4_Init+0xac>)
 80003b8:	f002 f9ae 	bl	8002718 <HAL_TIMEx_MasterConfigSynchronization>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80003c2:	f000 f841 	bl	8000448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c6:	2360      	movs	r3, #96	@ 0x60
 80003c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	4619      	mov	r1, r3
 80003dc:	4807      	ldr	r0, [pc, #28]	@ (80003fc <MX_TIM4_Init+0xac>)
 80003de:	f001 fecb 	bl	8002178 <HAL_TIM_PWM_ConfigChannel>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80003e8:	f000 f82e 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80003ec:	4803      	ldr	r0, [pc, #12]	@ (80003fc <MX_TIM4_Init+0xac>)
 80003ee:	f000 f8bd 	bl	800056c <HAL_TIM_MspPostInit>

}
 80003f2:	bf00      	nop
 80003f4:	3728      	adds	r7, #40	@ 0x28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000058 	.word	0x20000058
 8000400:	40000800 	.word	0x40000800

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_GPIO_Init+0x40>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a0d      	ldr	r2, [pc, #52]	@ (8000444 <MX_GPIO_Init+0x40>)
 8000410:	f043 0308 	orr.w	r3, r3, #8
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <MX_GPIO_Init+0x40>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0308 	and.w	r3, r3, #8
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <MX_GPIO_Init+0x40>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a07      	ldr	r2, [pc, #28]	@ (8000444 <MX_GPIO_Init+0x40>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <MX_GPIO_Init+0x40>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0304 	and.w	r3, r3, #4
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <Error_Handler+0x8>

08000454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045a:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a14      	ldr	r2, [pc, #80]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <HAL_MspInit+0x60>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	@ (80004b4 <HAL_MspInit+0x60>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <HAL_ADC_MspInit+0x6c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d121      	bne.n	800051c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004d8:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <HAL_ADC_MspInit+0x70>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a12      	ldr	r2, [pc, #72]	@ (8000528 <HAL_ADC_MspInit+0x70>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b10      	ldr	r3, [pc, #64]	@ (8000528 <HAL_ADC_MspInit+0x70>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <HAL_ADC_MspInit+0x70>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000528 <HAL_ADC_MspInit+0x70>)
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000528 <HAL_ADC_MspInit+0x70>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0308 	and.w	r3, r3, #8
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000508:	2302      	movs	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050c:	2303      	movs	r3, #3
 800050e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <HAL_ADC_MspInit+0x74>)
 8000518:	f000 fe50 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40012400 	.word	0x40012400
 8000528:	40021000 	.word	0x40021000
 800052c:	40010c00 	.word	0x40010c00

08000530 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a09      	ldr	r2, [pc, #36]	@ (8000564 <HAL_TIM_PWM_MspInit+0x34>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d10b      	bne.n	800055a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <HAL_TIM_PWM_MspInit+0x38>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <HAL_TIM_PWM_MspInit+0x38>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_TIM_PWM_MspInit+0x38>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40000800 	.word	0x40000800
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a0f      	ldr	r2, [pc, #60]	@ (80005c4 <HAL_TIM_MspPostInit+0x58>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d117      	bne.n	80005bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <HAL_TIM_MspPostInit+0x5c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <HAL_TIM_MspPostInit+0x5c>)
 8000592:	f043 0308 	orr.w	r3, r3, #8
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <HAL_TIM_MspPostInit+0x5c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0308 	and.w	r3, r3, #8
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005a4:	2340      	movs	r3, #64	@ 0x40
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <HAL_TIM_MspPostInit+0x60>)
 80005b8:	f000 fe00 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40000800 	.word	0x40000800
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <NMI_Handler+0x4>

080005d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <HardFault_Handler+0x4>

080005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <MemManage_Handler+0x4>

080005e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <BusFault_Handler+0x4>

080005f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <UsageFault_Handler+0x4>

080005f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000620:	f000 f874 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000634:	f7ff fff8 	bl	8000628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480b      	ldr	r0, [pc, #44]	@ (8000668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800063a:	490c      	ldr	r1, [pc, #48]	@ (800066c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800063c:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a09      	ldr	r2, [pc, #36]	@ (8000674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000650:	4c09      	ldr	r4, [pc, #36]	@ (8000678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f002 f8c1 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fdad 	bl	80001c0 <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000670:	0800288c 	.word	0x0800288c
  ldr r2, =_sbss
 8000674:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000678:	200000ac 	.word	0x200000ac

0800067c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_2_IRQHandler>
	...

08000680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <HAL_Init+0x28>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <HAL_Init+0x28>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 fd5f 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f808 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f7ff feda 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_InitTick+0x54>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_InitTick+0x58>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd69 	bl	80011a2 <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d80a      	bhi.n	80006f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	f000 fd3f 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4a06      	ldr	r2, [pc, #24]	@ (8000708 <HAL_InitTick+0x5c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000008 	.word	0x20000008
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <HAL_IncTick+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b05      	ldr	r3, [pc, #20]	@ (800072c <HAL_IncTick+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a03      	ldr	r2, [pc, #12]	@ (800072c <HAL_IncTick+0x20>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000008 	.word	0x20000008
 800072c:	200000a8 	.word	0x200000a8

08000730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b02      	ldr	r3, [pc, #8]	@ (8000740 <HAL_GetTick+0x10>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	200000a8 	.word	0x200000a8

08000744 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e0be      	b.n	80008e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000770:	2b00      	cmp	r3, #0
 8000772:	d109      	bne.n	8000788 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fe98 	bl	80004b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 fbf1 	bl	8000f70 <ADC_ConversionStop_Disable>
 800078e:	4603      	mov	r3, r0
 8000790:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	2b00      	cmp	r3, #0
 800079c:	f040 8099 	bne.w	80008d2 <HAL_ADC_Init+0x18e>
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f040 8095 	bne.w	80008d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80007b0:	f023 0302 	bic.w	r3, r3, #2
 80007b4:	f043 0202 	orr.w	r2, r3, #2
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7b1b      	ldrb	r3, [r3, #12]
 80007ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007dc:	d003      	beq.n	80007e6 <HAL_ADC_Init+0xa2>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d102      	bne.n	80007ec <HAL_ADC_Init+0xa8>
 80007e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ea:	e000      	b.n	80007ee <HAL_ADC_Init+0xaa>
 80007ec:	2300      	movs	r3, #0
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7d1b      	ldrb	r3, [r3, #20]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d119      	bne.n	8000830 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7b1b      	ldrb	r3, [r3, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d109      	bne.n	8000818 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	3b01      	subs	r3, #1
 800080a:	035a      	lsls	r2, r3, #13
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	4313      	orrs	r3, r2
 8000810:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	e00b      	b.n	8000830 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800081c:	f043 0220 	orr.w	r2, r3, #32
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000828:	f043 0201 	orr.w	r2, r3, #1
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	430a      	orrs	r2, r1
 8000842:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <HAL_ADC_Init+0x1a8>)
 800084c:	4013      	ands	r3, r2
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	68b9      	ldr	r1, [r7, #8]
 8000854:	430b      	orrs	r3, r1
 8000856:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000860:	d003      	beq.n	800086a <HAL_ADC_Init+0x126>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d104      	bne.n	8000874 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	3b01      	subs	r3, #1
 8000870:	051b      	lsls	r3, r3, #20
 8000872:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	430a      	orrs	r2, r1
 8000886:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <HAL_ADC_Init+0x1ac>)
 8000890:	4013      	ands	r3, r2
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	429a      	cmp	r2, r3
 8000896:	d10b      	bne.n	80008b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008a2:	f023 0303 	bic.w	r3, r3, #3
 80008a6:	f043 0201 	orr.w	r2, r3, #1
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008ae:	e018      	b.n	80008e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008b4:	f023 0312 	bic.w	r3, r3, #18
 80008b8:	f043 0210 	orr.w	r2, r3, #16
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c4:	f043 0201 	orr.w	r2, r3, #1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d0:	e007      	b.n	80008e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d6:	f043 0210 	orr.w	r2, r3, #16
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	ffe1f7fd 	.word	0xffe1f7fd
 80008f0:	ff1f0efe 	.word	0xff1f0efe

080008f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000906:	2b01      	cmp	r3, #1
 8000908:	d101      	bne.n	800090e <HAL_ADC_Start+0x1a>
 800090a:	2302      	movs	r3, #2
 800090c:	e098      	b.n	8000a40 <HAL_ADC_Start+0x14c>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 fad0 	bl	8000ebc <ADC_Enable>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f040 8087 	bne.w	8000a36 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800092c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000930:	f023 0301 	bic.w	r3, r3, #1
 8000934:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a41      	ldr	r2, [pc, #260]	@ (8000a48 <HAL_ADC_Start+0x154>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d105      	bne.n	8000952 <HAL_ADC_Start+0x5e>
 8000946:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <HAL_ADC_Start+0x158>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d115      	bne.n	800097e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000956:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000968:	2b00      	cmp	r3, #0
 800096a:	d026      	beq.n	80009ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000970:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000974:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800097c:	e01d      	b.n	80009ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000982:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a4c <HAL_ADC_Start+0x158>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d004      	beq.n	800099e <HAL_ADC_Start+0xaa>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a2b      	ldr	r2, [pc, #172]	@ (8000a48 <HAL_ADC_Start+0x154>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d10d      	bne.n	80009ba <HAL_ADC_Start+0xc6>
 800099e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <HAL_ADC_Start+0x158>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d007      	beq.n	80009ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ca:	f023 0206 	bic.w	r2, r3, #6
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009d2:	e002      	b.n	80009da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f06f 0202 	mvn.w	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80009f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80009fa:	d113      	bne.n	8000a24 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a00:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <HAL_ADC_Start+0x154>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d105      	bne.n	8000a12 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_ADC_Start+0x158>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d108      	bne.n	8000a24 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	e00c      	b.n	8000a3e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	e003      	b.n	8000a3e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40012800 	.word	0x40012800
 8000a4c:	40012400 	.word	0x40012400

08000a50 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d101      	bne.n	8000a6a <HAL_ADC_Stop+0x1a>
 8000a66:	2302      	movs	r3, #2
 8000a68:	e01a      	b.n	8000aa0 <HAL_ADC_Stop+0x50>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 fa7c 	bl	8000f70 <ADC_ConversionStop_Disable>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d109      	bne.n	8000a96 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	f043 0201 	orr.w	r2, r3, #1
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000abe:	f7ff fe37 	bl	8000730 <HAL_GetTick>
 8000ac2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00b      	beq.n	8000aea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad6:	f043 0220 	orr.w	r2, r3, #32
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e0d3      	b.n	8000c92 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d131      	bne.n	8000b5c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d12a      	bne.n	8000b5c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b06:	e021      	b.n	8000b4c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0e:	d01d      	beq.n	8000b4c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <HAL_ADC_PollForConversion+0x7e>
 8000b16:	f7ff fe0b 	bl	8000730 <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d212      	bcs.n	8000b4c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10b      	bne.n	8000b4c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b38:	f043 0204 	orr.w	r2, r3, #4
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e0a2      	b.n	8000c92 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0d6      	beq.n	8000b08 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b5a:	e070      	b.n	8000c3e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8000c9c <HAL_ADC_PollForConversion+0x1f4>)
 8000b5e:	681c      	ldr	r4, [r3, #0]
 8000b60:	2002      	movs	r0, #2
 8000b62:	f001 f961 	bl	8001e28 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b66:	4603      	mov	r3, r0
 8000b68:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6919      	ldr	r1, [r3, #16]
 8000b72:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca0 <HAL_ADC_PollForConversion+0x1f8>)
 8000b74:	400b      	ands	r3, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d118      	bne.n	8000bac <HAL_ADC_PollForConversion+0x104>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68d9      	ldr	r1, [r3, #12]
 8000b80:	4b48      	ldr	r3, [pc, #288]	@ (8000ca4 <HAL_ADC_PollForConversion+0x1fc>)
 8000b82:	400b      	ands	r3, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d111      	bne.n	8000bac <HAL_ADC_PollForConversion+0x104>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6919      	ldr	r1, [r3, #16]
 8000b8e:	4b46      	ldr	r3, [pc, #280]	@ (8000ca8 <HAL_ADC_PollForConversion+0x200>)
 8000b90:	400b      	ands	r3, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d108      	bne.n	8000ba8 <HAL_ADC_PollForConversion+0x100>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68d9      	ldr	r1, [r3, #12]
 8000b9c:	4b43      	ldr	r3, [pc, #268]	@ (8000cac <HAL_ADC_PollForConversion+0x204>)
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <HAL_ADC_PollForConversion+0x100>
 8000ba4:	2314      	movs	r3, #20
 8000ba6:	e020      	b.n	8000bea <HAL_ADC_PollForConversion+0x142>
 8000ba8:	2329      	movs	r3, #41	@ 0x29
 8000baa:	e01e      	b.n	8000bea <HAL_ADC_PollForConversion+0x142>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6919      	ldr	r1, [r3, #16]
 8000bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca8 <HAL_ADC_PollForConversion+0x200>)
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d106      	bne.n	8000bc8 <HAL_ADC_PollForConversion+0x120>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68d9      	ldr	r1, [r3, #12]
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <HAL_ADC_PollForConversion+0x204>)
 8000bc2:	400b      	ands	r3, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00d      	beq.n	8000be4 <HAL_ADC_PollForConversion+0x13c>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6919      	ldr	r1, [r3, #16]
 8000bce:	4b38      	ldr	r3, [pc, #224]	@ (8000cb0 <HAL_ADC_PollForConversion+0x208>)
 8000bd0:	400b      	ands	r3, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d108      	bne.n	8000be8 <HAL_ADC_PollForConversion+0x140>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68d9      	ldr	r1, [r3, #12]
 8000bdc:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <HAL_ADC_PollForConversion+0x208>)
 8000bde:	400b      	ands	r3, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <HAL_ADC_PollForConversion+0x140>
 8000be4:	2354      	movs	r3, #84	@ 0x54
 8000be6:	e000      	b.n	8000bea <HAL_ADC_PollForConversion+0x142>
 8000be8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bf0:	e021      	b.n	8000c36 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d01a      	beq.n	8000c30 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d007      	beq.n	8000c10 <HAL_ADC_PollForConversion+0x168>
 8000c00:	f7ff fd96 	bl	8000730 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d20f      	bcs.n	8000c30 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d90b      	bls.n	8000c30 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1c:	f043 0204 	orr.w	r2, r3, #4
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e030      	b.n	8000c92 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d8d9      	bhi.n	8000bf2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f06f 0212 	mvn.w	r2, #18
 8000c46:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c5e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c62:	d115      	bne.n	8000c90 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d111      	bne.n	8000c90 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d105      	bne.n	8000c90 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c88:	f043 0201 	orr.w	r2, r3, #1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	24924924 	.word	0x24924924
 8000ca4:	00924924 	.word	0x00924924
 8000ca8:	12492492 	.word	0x12492492
 8000cac:	00492492 	.word	0x00492492
 8000cb0:	00249249 	.word	0x00249249

08000cb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d101      	bne.n	8000cec <HAL_ADC_ConfigChannel+0x20>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e0dc      	b.n	8000ea6 <HAL_ADC_ConfigChannel+0x1da>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b06      	cmp	r3, #6
 8000cfa:	d81c      	bhi.n	8000d36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3b05      	subs	r3, #5
 8000d0e:	221f      	movs	r2, #31
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	4019      	ands	r1, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	3b05      	subs	r3, #5
 8000d28:	fa00 f203 	lsl.w	r2, r0, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d34:	e03c      	b.n	8000db0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b0c      	cmp	r3, #12
 8000d3c:	d81c      	bhi.n	8000d78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3b23      	subs	r3, #35	@ 0x23
 8000d50:	221f      	movs	r2, #31
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4019      	ands	r1, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	3b23      	subs	r3, #35	@ 0x23
 8000d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d76:	e01b      	b.n	8000db0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	3b41      	subs	r3, #65	@ 0x41
 8000d8a:	221f      	movs	r2, #31
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4019      	ands	r1, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	3b41      	subs	r3, #65	@ 0x41
 8000da4:	fa00 f203 	lsl.w	r2, r0, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b09      	cmp	r3, #9
 8000db6:	d91c      	bls.n	8000df2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	68d9      	ldr	r1, [r3, #12]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	3b1e      	subs	r3, #30
 8000dca:	2207      	movs	r2, #7
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	4019      	ands	r1, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	6898      	ldr	r0, [r3, #8]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	3b1e      	subs	r3, #30
 8000de4:	fa00 f203 	lsl.w	r2, r0, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	e019      	b.n	8000e26 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6919      	ldr	r1, [r3, #16]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	2207      	movs	r2, #7
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4019      	ands	r1, r3
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	6898      	ldr	r0, [r3, #8]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b10      	cmp	r3, #16
 8000e2c:	d003      	beq.n	8000e36 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e32:	2b11      	cmp	r3, #17
 8000e34:	d132      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d125      	bne.n	8000e8c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d126      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000e5c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b10      	cmp	r3, #16
 8000e64:	d11a      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a13      	ldr	r2, [pc, #76]	@ (8000eb8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	0c9a      	lsrs	r2, r3, #18
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e7c:	e002      	b.n	8000e84 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f9      	bne.n	8000e7e <HAL_ADC_ConfigChannel+0x1b2>
 8000e8a:	e007      	b.n	8000e9c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e90:	f043 0220 	orr.w	r2, r3, #32
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40012400 	.word	0x40012400
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	431bde83 	.word	0x431bde83

08000ebc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d040      	beq.n	8000f5c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f042 0201 	orr.w	r2, r2, #1
 8000ee8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <ADC_Enable+0xac>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1f      	ldr	r2, [pc, #124]	@ (8000f6c <ADC_Enable+0xb0>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	0c9b      	lsrs	r3, r3, #18
 8000ef6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ef8:	e002      	b.n	8000f00 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f9      	bne.n	8000efa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f06:	f7ff fc13 	bl	8000730 <HAL_GetTick>
 8000f0a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f0c:	e01f      	b.n	8000f4e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f0e:	f7ff fc0f 	bl	8000730 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d918      	bls.n	8000f4e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d011      	beq.n	8000f4e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2e:	f043 0210 	orr.w	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3a:	f043 0201 	orr.w	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e007      	b.n	8000f5e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d1d8      	bne.n	8000f0e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	431bde83 	.word	0x431bde83

08000f70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d12e      	bne.n	8000fe8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f9a:	f7ff fbc9 	bl	8000730 <HAL_GetTick>
 8000f9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fa0:	e01b      	b.n	8000fda <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fa2:	f7ff fbc5 	bl	8000730 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d914      	bls.n	8000fda <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d10d      	bne.n	8000fda <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc2:	f043 0210 	orr.w	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e007      	b.n	8000fea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d0dc      	beq.n	8000fa2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	@ (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	@ (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	@ 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff49 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff5e 	bl	800103c <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffb0 	bl	8001110 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b08b      	sub	sp, #44	@ 0x2c
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	e169      	b.n	80014a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d0:	2201      	movs	r2, #1
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8158 	bne.w	800149e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4a9a      	ldr	r2, [pc, #616]	@ (800145c <HAL_GPIO_Init+0x2a0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d05e      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 80011f8:	4a98      	ldr	r2, [pc, #608]	@ (800145c <HAL_GPIO_Init+0x2a0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d875      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 80011fe:	4a98      	ldr	r2, [pc, #608]	@ (8001460 <HAL_GPIO_Init+0x2a4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d058      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001204:	4a96      	ldr	r2, [pc, #600]	@ (8001460 <HAL_GPIO_Init+0x2a4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d86f      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 800120a:	4a96      	ldr	r2, [pc, #600]	@ (8001464 <HAL_GPIO_Init+0x2a8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d052      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001210:	4a94      	ldr	r2, [pc, #592]	@ (8001464 <HAL_GPIO_Init+0x2a8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d869      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001216:	4a94      	ldr	r2, [pc, #592]	@ (8001468 <HAL_GPIO_Init+0x2ac>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d04c      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 800121c:	4a92      	ldr	r2, [pc, #584]	@ (8001468 <HAL_GPIO_Init+0x2ac>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d863      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001222:	4a92      	ldr	r2, [pc, #584]	@ (800146c <HAL_GPIO_Init+0x2b0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d046      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001228:	4a90      	ldr	r2, [pc, #576]	@ (800146c <HAL_GPIO_Init+0x2b0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d85d      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 800122e:	2b12      	cmp	r3, #18
 8001230:	d82a      	bhi.n	8001288 <HAL_GPIO_Init+0xcc>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d859      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001236:	a201      	add	r2, pc, #4	@ (adr r2, 800123c <HAL_GPIO_Init+0x80>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	080012b7 	.word	0x080012b7
 8001240:	08001291 	.word	0x08001291
 8001244:	080012a3 	.word	0x080012a3
 8001248:	080012e5 	.word	0x080012e5
 800124c:	080012eb 	.word	0x080012eb
 8001250:	080012eb 	.word	0x080012eb
 8001254:	080012eb 	.word	0x080012eb
 8001258:	080012eb 	.word	0x080012eb
 800125c:	080012eb 	.word	0x080012eb
 8001260:	080012eb 	.word	0x080012eb
 8001264:	080012eb 	.word	0x080012eb
 8001268:	080012eb 	.word	0x080012eb
 800126c:	080012eb 	.word	0x080012eb
 8001270:	080012eb 	.word	0x080012eb
 8001274:	080012eb 	.word	0x080012eb
 8001278:	080012eb 	.word	0x080012eb
 800127c:	080012eb 	.word	0x080012eb
 8001280:	08001299 	.word	0x08001299
 8001284:	080012ad 	.word	0x080012ad
 8001288:	4a79      	ldr	r2, [pc, #484]	@ (8001470 <HAL_GPIO_Init+0x2b4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800128e:	e02c      	b.n	80012ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e029      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	3304      	adds	r3, #4
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e024      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	3308      	adds	r3, #8
 80012a8:	623b      	str	r3, [r7, #32]
          break;
 80012aa:	e01f      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	330c      	adds	r3, #12
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	e01a      	b.n	80012ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012be:	2304      	movs	r3, #4
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e013      	b.n	80012ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	611a      	str	r2, [r3, #16]
          break;
 80012d6:	e009      	b.n	80012ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d8:	2308      	movs	r3, #8
 80012da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	615a      	str	r2, [r3, #20]
          break;
 80012e2:	e003      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
          break;
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x130>
          break;
 80012ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2bff      	cmp	r3, #255	@ 0xff
 80012f0:	d801      	bhi.n	80012f6 <HAL_GPIO_Init+0x13a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	e001      	b.n	80012fa <HAL_GPIO_Init+0x13e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3304      	adds	r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2bff      	cmp	r3, #255	@ 0xff
 8001300:	d802      	bhi.n	8001308 <HAL_GPIO_Init+0x14c>
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x152>
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	3b08      	subs	r3, #8
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	210f      	movs	r1, #15
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	401a      	ands	r2, r3
 8001320:	6a39      	ldr	r1, [r7, #32]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80b1 	beq.w	800149e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800133c:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <HAL_GPIO_Init+0x2b8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a4c      	ldr	r2, [pc, #304]	@ (8001474 <HAL_GPIO_Init+0x2b8>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b4a      	ldr	r3, [pc, #296]	@ (8001474 <HAL_GPIO_Init+0x2b8>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001354:	4a48      	ldr	r2, [pc, #288]	@ (8001478 <HAL_GPIO_Init+0x2bc>)
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001360:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a40      	ldr	r2, [pc, #256]	@ (800147c <HAL_GPIO_Init+0x2c0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d013      	beq.n	80013a8 <HAL_GPIO_Init+0x1ec>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a3f      	ldr	r2, [pc, #252]	@ (8001480 <HAL_GPIO_Init+0x2c4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d00d      	beq.n	80013a4 <HAL_GPIO_Init+0x1e8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a3e      	ldr	r2, [pc, #248]	@ (8001484 <HAL_GPIO_Init+0x2c8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d007      	beq.n	80013a0 <HAL_GPIO_Init+0x1e4>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a3d      	ldr	r2, [pc, #244]	@ (8001488 <HAL_GPIO_Init+0x2cc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <HAL_GPIO_Init+0x1e0>
 8001398:	2303      	movs	r3, #3
 800139a:	e006      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 800139c:	2304      	movs	r3, #4
 800139e:	e004      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a8:	2300      	movs	r3, #0
 80013aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ac:	f002 0203 	and.w	r2, r2, #3
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	4093      	lsls	r3, r2
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ba:	492f      	ldr	r1, [pc, #188]	@ (8001478 <HAL_GPIO_Init+0x2bc>)
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d4:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	492c      	ldr	r1, [pc, #176]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e2:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4928      	ldr	r1, [pc, #160]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013fc:	4b23      	ldr	r3, [pc, #140]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	4922      	ldr	r1, [pc, #136]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	491e      	ldr	r1, [pc, #120]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4918      	ldr	r1, [pc, #96]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	4914      	ldr	r1, [pc, #80]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 800143c:	4013      	ands	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d021      	beq.n	8001490 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	490e      	ldr	r1, [pc, #56]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e021      	b.n	800149e <HAL_GPIO_Init+0x2e2>
 800145a:	bf00      	nop
 800145c:	10320000 	.word	0x10320000
 8001460:	10310000 	.word	0x10310000
 8001464:	10220000 	.word	0x10220000
 8001468:	10210000 	.word	0x10210000
 800146c:	10120000 	.word	0x10120000
 8001470:	10110000 	.word	0x10110000
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	40010800 	.word	0x40010800
 8001480:	40010c00 	.word	0x40010c00
 8001484:	40011000 	.word	0x40011000
 8001488:	40011400 	.word	0x40011400
 800148c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	43db      	mvns	r3, r3
 8001498:	4909      	ldr	r1, [pc, #36]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 800149a:	4013      	ands	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	3301      	adds	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	fa22 f303 	lsr.w	r3, r2, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f47f ae8e 	bne.w	80011d0 <HAL_GPIO_Init+0x14>
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	372c      	adds	r7, #44	@ 0x2c
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e272      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8087 	beq.w	80015f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e4:	4b92      	ldr	r3, [pc, #584]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d00c      	beq.n	800150a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d112      	bne.n	8001522 <HAL_RCC_OscConfig+0x5e>
 80014fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001508:	d10b      	bne.n	8001522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150a:	4b89      	ldr	r3, [pc, #548]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d06c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x12c>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d168      	bne.n	80015f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e24c      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x76>
 800152c:	4b80      	ldr	r3, [pc, #512]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a7f      	ldr	r2, [pc, #508]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e02e      	b.n	8001598 <HAL_RCC_OscConfig+0xd4>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x98>
 8001542:	4b7b      	ldr	r3, [pc, #492]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a7a      	ldr	r2, [pc, #488]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a77      	ldr	r2, [pc, #476]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001554:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e01d      	b.n	8001598 <HAL_RCC_OscConfig+0xd4>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0xbc>
 8001566:	4b72      	ldr	r3, [pc, #456]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a71      	ldr	r2, [pc, #452]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b6f      	ldr	r3, [pc, #444]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6e      	ldr	r2, [pc, #440]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e00b      	b.n	8001598 <HAL_RCC_OscConfig+0xd4>
 8001580:	4b6b      	ldr	r3, [pc, #428]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a6a      	ldr	r2, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a67      	ldr	r2, [pc, #412]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d013      	beq.n	80015c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff f8c6 	bl	8000730 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff f8c2 	bl	8000730 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	@ 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e200      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe4>
 80015c6:	e014      	b.n	80015f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff f8b2 	bl	8000730 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff f8ae 	bl	8000730 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	@ 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1ec      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e2:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x10c>
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d063      	beq.n	80016c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800160a:	4b49      	ldr	r3, [pc, #292]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b08      	cmp	r3, #8
 8001614:	d11c      	bne.n	8001650 <HAL_RCC_OscConfig+0x18c>
 8001616:	4b46      	ldr	r3, [pc, #280]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d116      	bne.n	8001650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001622:	4b43      	ldr	r3, [pc, #268]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x176>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e1c0      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163a:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4939      	ldr	r1, [pc, #228]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	e03a      	b.n	80016c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d020      	beq.n	800169a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001658:	4b36      	ldr	r3, [pc, #216]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff f867 	bl	8000730 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001666:	f7ff f863 	bl	8000730 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e1a1      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001684:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4927      	ldr	r1, [pc, #156]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
 8001698:	e015      	b.n	80016c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169a:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff f846 	bl	8000730 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff f842 	bl	8000730 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e180      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03a      	beq.n	8001748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016da:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <HAL_RCC_OscConfig+0x274>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f826 	bl	8000730 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff f822 	bl	8000730 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e160      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f000 faba 	bl	8001c80 <RCC_Delay>
 800170c:	e01c      	b.n	8001748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_RCC_OscConfig+0x274>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff f80c 	bl	8000730 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171a:	e00f      	b.n	800173c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff f808 	bl	8000730 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d908      	bls.n	800173c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e146      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	42420000 	.word	0x42420000
 8001738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173c:	4b92      	ldr	r3, [pc, #584]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e9      	bne.n	800171c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80a6 	beq.w	80018a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175a:	4b8b      	ldr	r3, [pc, #556]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b88      	ldr	r3, [pc, #544]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a87      	ldr	r2, [pc, #540]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b85      	ldr	r3, [pc, #532]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177e:	2301      	movs	r3, #1
 8001780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b82      	ldr	r3, [pc, #520]	@ (800198c <HAL_RCC_OscConfig+0x4c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d118      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178e:	4b7f      	ldr	r3, [pc, #508]	@ (800198c <HAL_RCC_OscConfig+0x4c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a7e      	ldr	r2, [pc, #504]	@ (800198c <HAL_RCC_OscConfig+0x4c8>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179a:	f7fe ffc9 	bl	8000730 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a2:	f7fe ffc5 	bl	8000730 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	@ 0x64
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e103      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	4b75      	ldr	r3, [pc, #468]	@ (800198c <HAL_RCC_OscConfig+0x4c8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x312>
 80017c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	e02d      	b.n	8001832 <HAL_RCC_OscConfig+0x36e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x334>
 80017de:	4b6a      	ldr	r3, [pc, #424]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4a69      	ldr	r2, [pc, #420]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6213      	str	r3, [r2, #32]
 80017ea:	4b67      	ldr	r3, [pc, #412]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a66      	ldr	r2, [pc, #408]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	f023 0304 	bic.w	r3, r3, #4
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	e01c      	b.n	8001832 <HAL_RCC_OscConfig+0x36e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d10c      	bne.n	800181a <HAL_RCC_OscConfig+0x356>
 8001800:	4b61      	ldr	r3, [pc, #388]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a60      	ldr	r2, [pc, #384]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6213      	str	r3, [r2, #32]
 800180c:	4b5e      	ldr	r3, [pc, #376]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a5d      	ldr	r2, [pc, #372]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	e00b      	b.n	8001832 <HAL_RCC_OscConfig+0x36e>
 800181a:	4b5b      	ldr	r3, [pc, #364]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4a5a      	ldr	r2, [pc, #360]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	4b58      	ldr	r3, [pc, #352]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a57      	ldr	r2, [pc, #348]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d015      	beq.n	8001866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7fe ff79 	bl	8000730 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7fe ff75 	bl	8000730 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0b1      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	4b4b      	ldr	r3, [pc, #300]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ee      	beq.n	8001842 <HAL_RCC_OscConfig+0x37e>
 8001864:	e014      	b.n	8001890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7fe ff63 	bl	8000730 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7fe ff5f 	bl	8000730 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e09b      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	4b40      	ldr	r3, [pc, #256]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d105      	bne.n	80018a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001896:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a3b      	ldr	r2, [pc, #236]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8087 	beq.w	80019ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ac:	4b36      	ldr	r3, [pc, #216]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d061      	beq.n	800197c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d146      	bne.n	800194e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c0:	4b33      	ldr	r3, [pc, #204]	@ (8001990 <HAL_RCC_OscConfig+0x4cc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7fe ff33 	bl	8000730 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7fe ff2f 	bl	8000730 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e06d      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f4:	d108      	bne.n	8001908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	4921      	ldr	r1, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a19      	ldr	r1, [r3, #32]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	430b      	orrs	r3, r1
 800191a:	491b      	ldr	r1, [pc, #108]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7fe ff03 	bl	8000730 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7fe feff 	bl	8000730 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e03d      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x46a>
 800194c:	e035      	b.n	80019ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <HAL_RCC_OscConfig+0x4cc>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7fe feec 	bl	8000730 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7fe fee8 	bl	8000730 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e026      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x498>
 800197a:	e01e      	b.n	80019ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e019      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_RCC_OscConfig+0x500>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0d0      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b67      	ldr	r3, [pc, #412]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	4965      	ldr	r1, [pc, #404]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b63      	ldr	r3, [pc, #396]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b8      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	4b59      	ldr	r3, [pc, #356]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a58      	ldr	r2, [pc, #352]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a3c:	4b53      	ldr	r3, [pc, #332]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a52      	ldr	r2, [pc, #328]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b50      	ldr	r3, [pc, #320]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	494d      	ldr	r1, [pc, #308]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d040      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b47      	ldr	r3, [pc, #284]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b41      	ldr	r3, [pc, #260]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e073      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b3d      	ldr	r3, [pc, #244]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e06b      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b39      	ldr	r3, [pc, #228]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4936      	ldr	r1, [pc, #216]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe fe3a 	bl	8000730 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7fe fe36 	bl	8000730 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e053      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b27      	ldr	r3, [pc, #156]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d210      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 0207 	bic.w	r2, r3, #7
 8001afe:	4922      	ldr	r1, [pc, #136]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e032      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4916      	ldr	r1, [pc, #88]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490e      	ldr	r1, [pc, #56]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b56:	f000 f821 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490a      	ldr	r1, [pc, #40]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <HAL_RCC_ClockConfig+0x1cc>)
 8001b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_RCC_ClockConfig+0x1d0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fd98 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08002844 	.word	0x08002844
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d002      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x30>
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x36>
 8001bca:	e027      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bce:	613b      	str	r3, [r7, #16]
      break;
 8001bd0:	e027      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0c9b      	lsrs	r3, r3, #18
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d010      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	0c5b      	lsrs	r3, r3, #17
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	4a11      	ldr	r2, [pc, #68]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e004      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	613b      	str	r3, [r7, #16]
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1e:	613b      	str	r3, [r7, #16]
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	693b      	ldr	r3, [r7, #16]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	007a1200 	.word	0x007a1200
 8001c38:	0800285c 	.word	0x0800285c
 8001c3c:	0800286c 	.word	0x0800286c
 8001c40:	003d0900 	.word	0x003d0900

08001c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b02      	ldr	r3, [pc, #8]	@ (8001c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000000 	.word	0x20000000

08001c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c5c:	f7ff fff2 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0adb      	lsrs	r3, r3, #11
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4903      	ldr	r1, [pc, #12]	@ (8001c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08002854 	.word	0x08002854

08001c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <RCC_Delay+0x34>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <RCC_Delay+0x38>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a5b      	lsrs	r3, r3, #9
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c9c:	bf00      	nop
  }
  while (Delay --);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	60fa      	str	r2, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f9      	bne.n	8001c9c <RCC_Delay+0x1c>
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d07d      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b49      	ldr	r3, [pc, #292]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d118      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d10:	4b43      	ldr	r3, [pc, #268]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a42      	ldr	r2, [pc, #264]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1c:	f7fe fd08 	bl	8000730 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	e008      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d24:	f7fe fd04 	bl	8000730 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	@ 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e06d      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d42:	4b36      	ldr	r3, [pc, #216]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02e      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d027      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d60:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d70:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d76:	4a29      	ldr	r2, [pc, #164]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d014      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7fe fcd3 	bl	8000730 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe fccf 	bl	8000730 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e036      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ee      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4917      	ldr	r1, [pc, #92]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a13      	ldr	r2, [pc, #76]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	490b      	ldr	r1, [pc, #44]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4904      	ldr	r1, [pc, #16]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
 8001e24:	42420440 	.word	0x42420440

08001e28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	f200 808a 	bhi.w	8001f66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d045      	beq.n	8001ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d075      	beq.n	8001f4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e5e:	e082      	b.n	8001f66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001e60:	4b46      	ldr	r3, [pc, #280]	@ (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e66:	4b45      	ldr	r3, [pc, #276]	@ (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d07b      	beq.n	8001f6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0c9b      	lsrs	r3, r3, #18
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4a41      	ldr	r2, [pc, #260]	@ (8001f80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d015      	beq.n	8001eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	0c5b      	lsrs	r3, r3, #17
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	4a3b      	ldr	r2, [pc, #236]	@ (8001f84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ea4:	4a38      	ldr	r2, [pc, #224]	@ (8001f88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	e004      	b.n	8001ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4a34      	ldr	r2, [pc, #208]	@ (8001f8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	61bb      	str	r3, [r7, #24]
      break;
 8001ed2:	e04a      	b.n	8001f6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8001f90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
      break;
 8001ee2:	e042      	b.n	8001f6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	e01f      	b.n	8001f48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f12:	d109      	bne.n	8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001f20:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	e00f      	b.n	8001f48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f32:	d11c      	bne.n	8001f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d016      	beq.n	8001f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001f40:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001f44:	61bb      	str	r3, [r7, #24]
      break;
 8001f46:	e012      	b.n	8001f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001f48:	e011      	b.n	8001f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f4a:	f7ff fe85 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0b9b      	lsrs	r3, r3, #14
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	61bb      	str	r3, [r7, #24]
      break;
 8001f64:	e004      	b.n	8001f70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f66:	bf00      	nop
 8001f68:	e002      	b.n	8001f70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e000      	b.n	8001f70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f6e:	bf00      	nop
    }
  }
  return (frequency);
 8001f70:	69bb      	ldr	r3, [r7, #24]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08002870 	.word	0x08002870
 8001f84:	08002880 	.word	0x08002880
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900
 8001f90:	aaaaaaab 	.word	0xaaaaaaab

08001f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e041      	b.n	800202a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fab8 	bl	8000530 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f000 f992 	bl	80022fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_TIM_PWM_Start+0x24>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e022      	b.n	800209e <HAL_TIM_PWM_Start+0x6a>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d109      	bne.n	8002072 <HAL_TIM_PWM_Start+0x3e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	e015      	b.n	800209e <HAL_TIM_PWM_Start+0x6a>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b08      	cmp	r3, #8
 8002076:	d109      	bne.n	800208c <HAL_TIM_PWM_Start+0x58>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e008      	b.n	800209e <HAL_TIM_PWM_Start+0x6a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e05e      	b.n	8002164 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_PWM_Start+0x82>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020b4:	e013      	b.n	80020de <HAL_TIM_PWM_Start+0xaa>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PWM_Start+0x92>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020c4:	e00b      	b.n	80020de <HAL_TIM_PWM_Start+0xaa>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start+0xa2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d4:	e003      	b.n	80020de <HAL_TIM_PWM_Start+0xaa>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 faf2 	bl	80026d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	@ (800216c <HAL_TIM_PWM_Start+0x138>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d107      	bne.n	8002106 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002104:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a18      	ldr	r2, [pc, #96]	@ (800216c <HAL_TIM_PWM_Start+0x138>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00e      	beq.n	800212e <HAL_TIM_PWM_Start+0xfa>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002118:	d009      	beq.n	800212e <HAL_TIM_PWM_Start+0xfa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <HAL_TIM_PWM_Start+0x13c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d004      	beq.n	800212e <HAL_TIM_PWM_Start+0xfa>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <HAL_TIM_PWM_Start+0x140>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d111      	bne.n	8002152 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b06      	cmp	r3, #6
 800213e:	d010      	beq.n	8002162 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002150:	e007      	b.n	8002162 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40000400 	.word	0x40000400
 8002174:	40000800 	.word	0x40000800

08002178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002192:	2302      	movs	r3, #2
 8002194:	e0ae      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	f200 809f 	bhi.w	80022e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021a6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	080021e1 	.word	0x080021e1
 80021b0:	080022e5 	.word	0x080022e5
 80021b4:	080022e5 	.word	0x080022e5
 80021b8:	080022e5 	.word	0x080022e5
 80021bc:	08002221 	.word	0x08002221
 80021c0:	080022e5 	.word	0x080022e5
 80021c4:	080022e5 	.word	0x080022e5
 80021c8:	080022e5 	.word	0x080022e5
 80021cc:	08002263 	.word	0x08002263
 80021d0:	080022e5 	.word	0x080022e5
 80021d4:	080022e5 	.word	0x080022e5
 80021d8:	080022e5 	.word	0x080022e5
 80021dc:	080022a3 	.word	0x080022a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f8ea 	bl	80023c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0208 	orr.w	r2, r2, #8
 80021fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6999      	ldr	r1, [r3, #24]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	619a      	str	r2, [r3, #24]
      break;
 800221e:	e064      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f930 	bl	800248c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800223a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800224a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6999      	ldr	r1, [r3, #24]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	021a      	lsls	r2, r3, #8
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	619a      	str	r2, [r3, #24]
      break;
 8002260:	e043      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f979 	bl	8002560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0208 	orr.w	r2, r2, #8
 800227c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0204 	bic.w	r2, r2, #4
 800228c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69d9      	ldr	r1, [r3, #28]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	61da      	str	r2, [r3, #28]
      break;
 80022a0:	e023      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f9c3 	bl	8002634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69d9      	ldr	r1, [r3, #28]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	021a      	lsls	r2, r3, #8
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	61da      	str	r2, [r3, #28]
      break;
 80022e2:	e002      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	75fb      	strb	r3, [r7, #23]
      break;
 80022e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a29      	ldr	r2, [pc, #164]	@ (80023b4 <TIM_Base_SetConfig+0xb8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00b      	beq.n	800232c <TIM_Base_SetConfig+0x30>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231a:	d007      	beq.n	800232c <TIM_Base_SetConfig+0x30>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a26      	ldr	r2, [pc, #152]	@ (80023b8 <TIM_Base_SetConfig+0xbc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_Base_SetConfig+0x30>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a25      	ldr	r2, [pc, #148]	@ (80023bc <TIM_Base_SetConfig+0xc0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <TIM_Base_SetConfig+0xb8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00b      	beq.n	800235e <TIM_Base_SetConfig+0x62>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0x62>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a19      	ldr	r2, [pc, #100]	@ (80023b8 <TIM_Base_SetConfig+0xbc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0x62>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a18      	ldr	r2, [pc, #96]	@ (80023bc <TIM_Base_SetConfig+0xc0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d108      	bne.n	8002370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a07      	ldr	r2, [pc, #28]	@ (80023b4 <TIM_Base_SetConfig+0xb8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800

080023c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f023 0201 	bic.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f023 0302 	bic.w	r3, r3, #2
 8002408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a1c      	ldr	r2, [pc, #112]	@ (8002488 <TIM_OC1_SetConfig+0xc8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d10c      	bne.n	8002436 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0308 	bic.w	r3, r3, #8
 8002422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a13      	ldr	r2, [pc, #76]	@ (8002488 <TIM_OC1_SetConfig+0xc8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d111      	bne.n	8002462 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800244c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	621a      	str	r2, [r3, #32]
}
 800247c:	bf00      	nop
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40012c00 	.word	0x40012c00

0800248c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f023 0210 	bic.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f023 0320 	bic.w	r3, r3, #32
 80024d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a1d      	ldr	r2, [pc, #116]	@ (800255c <TIM_OC2_SetConfig+0xd0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d10d      	bne.n	8002508 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a14      	ldr	r2, [pc, #80]	@ (800255c <TIM_OC2_SetConfig+0xd0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d113      	bne.n	8002538 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800251e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	621a      	str	r2, [r3, #32]
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	40012c00 	.word	0x40012c00

08002560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002630 <TIM_OC3_SetConfig+0xd0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10d      	bne.n	80025da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a14      	ldr	r2, [pc, #80]	@ (8002630 <TIM_OC3_SetConfig+0xd0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d113      	bne.n	800260a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40012c00 	.word	0x40012c00

08002634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800266a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800267e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	031b      	lsls	r3, r3, #12
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a0f      	ldr	r2, [pc, #60]	@ (80026cc <TIM_OC4_SetConfig+0x98>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d109      	bne.n	80026a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800269a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	019b      	lsls	r3, r3, #6
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	621a      	str	r2, [r3, #32]
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	40012c00 	.word	0x40012c00

080026d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2201      	movs	r2, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	431a      	orrs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	621a      	str	r2, [r3, #32]
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800272c:	2302      	movs	r3, #2
 800272e:	e046      	b.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a16      	ldr	r2, [pc, #88]	@ (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277c:	d009      	beq.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a10      	ldr	r2, [pc, #64]	@ (80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10c      	bne.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800

080027d4 <memset>:
 80027d4:	4603      	mov	r3, r0
 80027d6:	4402      	add	r2, r0
 80027d8:	4293      	cmp	r3, r2
 80027da:	d100      	bne.n	80027de <memset+0xa>
 80027dc:	4770      	bx	lr
 80027de:	f803 1b01 	strb.w	r1, [r3], #1
 80027e2:	e7f9      	b.n	80027d8 <memset+0x4>

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	2600      	movs	r6, #0
 80027e8:	4d0c      	ldr	r5, [pc, #48]	@ (800281c <__libc_init_array+0x38>)
 80027ea:	4c0d      	ldr	r4, [pc, #52]	@ (8002820 <__libc_init_array+0x3c>)
 80027ec:	1b64      	subs	r4, r4, r5
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	42a6      	cmp	r6, r4
 80027f2:	d109      	bne.n	8002808 <__libc_init_array+0x24>
 80027f4:	f000 f81a 	bl	800282c <_init>
 80027f8:	2600      	movs	r6, #0
 80027fa:	4d0a      	ldr	r5, [pc, #40]	@ (8002824 <__libc_init_array+0x40>)
 80027fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002828 <__libc_init_array+0x44>)
 80027fe:	1b64      	subs	r4, r4, r5
 8002800:	10a4      	asrs	r4, r4, #2
 8002802:	42a6      	cmp	r6, r4
 8002804:	d105      	bne.n	8002812 <__libc_init_array+0x2e>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	f855 3b04 	ldr.w	r3, [r5], #4
 800280c:	4798      	blx	r3
 800280e:	3601      	adds	r6, #1
 8002810:	e7ee      	b.n	80027f0 <__libc_init_array+0xc>
 8002812:	f855 3b04 	ldr.w	r3, [r5], #4
 8002816:	4798      	blx	r3
 8002818:	3601      	adds	r6, #1
 800281a:	e7f2      	b.n	8002802 <__libc_init_array+0x1e>
 800281c:	08002884 	.word	0x08002884
 8002820:	08002884 	.word	0x08002884
 8002824:	08002884 	.word	0x08002884
 8002828:	08002888 	.word	0x08002888

0800282c <_init>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr

08002838 <_fini>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr
