
027_Pwm_Register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006d0  080006d0  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006d0  080006d0  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  080006d0  080006d0  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d0  080006d0  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d0  080006d0  000016d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006d4  080006d4  000016d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080006d8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080006e4  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080006e4  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ab1  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008ff  00000000  00000000  00003ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f0  00000000  00000000  000043e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000213  00000000  00000000  000046d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015593  00000000  00000000  000048eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000327e  00000000  00000000  00019e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b4df  00000000  00000000  0001d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000985db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009c0  00000000  00000000  00098664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00099024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080006b8 	.word	0x080006b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080006b8 	.word	0x080006b8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f952 	bl	80003f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f85e 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f894 	bl	8000284 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  TIM_Config();
 800015c:	f000 f804 	bl	8000168 <TIM_Config>
  MX_GPIO_Init();
 8000160:	f000 f890 	bl	8000284 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000164:	bf00      	nop
 8000166:	e7fd      	b.n	8000164 <main+0x18>

08000168 <TIM_Config>:
 * @brief timer config,
 * @retval None
 * @param None
 */

void TIM_Config(void){
 8000168:	b480      	push	{r7}
 800016a:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= 1 <<2 ;            // TIM4 Enable
 800016c:	4b27      	ldr	r3, [pc, #156]	@ (800020c <TIM_Config+0xa4>)
 800016e:	69db      	ldr	r3, [r3, #28]
 8000170:	4a26      	ldr	r2, [pc, #152]	@ (800020c <TIM_Config+0xa4>)
 8000172:	f043 0304 	orr.w	r3, r3, #4
 8000176:	61d3      	str	r3, [r2, #28]

	TIM4->CR1 &= ~(0 << 4); 			// counter: upcount
 8000178:	4b25      	ldr	r3, [pc, #148]	@ (8000210 <TIM_Config+0xa8>)
 800017a:	4a25      	ldr	r2, [pc, #148]	@ (8000210 <TIM_Config+0xa8>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(0x060);				// edge-alligned mode
 8000180:	4b23      	ldr	r3, [pc, #140]	@ (8000210 <TIM_Config+0xa8>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a22      	ldr	r2, [pc, #136]	@ (8000210 <TIM_Config+0xa8>)
 8000186:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800018a:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(0x0300);				// clock division x1
 800018c:	4b20      	ldr	r3, [pc, #128]	@ (8000210 <TIM_Config+0xa8>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1f      	ldr	r2, [pc, #124]	@ (8000210 <TIM_Config+0xa8>)
 8000192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000196:	6013      	str	r3, [r2, #0]

	TIM4->EGR |= (1 << 1);				// Reinitialize counter
 8000198:	4b1d      	ldr	r3, [pc, #116]	@ (8000210 <TIM_Config+0xa8>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a1c      	ldr	r2, [pc, #112]	@ (8000210 <TIM_Config+0xa8>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	TIM4->SMCR &= ~(0x07);        		// DİSABLE SLAVE MODE
 80001a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000210 <TIM_Config+0xa8>)
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	4a19      	ldr	r2, [pc, #100]	@ (8000210 <TIM_Config+0xa8>)
 80001aa:	f023 0307 	bic.w	r3, r3, #7
 80001ae:	6093      	str	r3, [r2, #8]
//	TIM4->PSC = 15999;                  // PRESCALER tick_ck =  apb1_CK / PSC +1
//	TIM4->ARR = 4000;					// auto-reload value: count up to 4000
	TIM4->CR1 |= (1<<0);                // COUNTER Enable
 80001b0:	4b17      	ldr	r3, [pc, #92]	@ (8000210 <TIM_Config+0xa8>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a16      	ldr	r2, [pc, #88]	@ (8000210 <TIM_Config+0xa8>)
 80001b6:	f043 0301 	orr.w	r3, r3, #1
 80001ba:	6013      	str	r3, [r2, #0]
/**	TIM4->CCMR1 &= 0 << 0 | 0 << 1;     // COMPARE 1 CONFİGURED AS OUTPUT
 * 	IM4->CCMR1 |= 1 << 5 | 1 << 6;      // COMPARE 1 MODE PWM
 *  TIM4->CCMR1 &= 0 << 8 | 0 << 9;     // COMPARE 2 CONFİGUREC AS OUTPUT
 *	TIM4->CCMR1 |= 6 << 12;             // COMPARE 2 MODE PWM
 */
	TIM4->CCMR1 |= 0 << 0 | 6 << 4 | 0 << 8 | 6 << 12;     // CH 1 & 2 CONFİGURATİON: OUTPUT AND PWN MODE 1
 80001bc:	4b14      	ldr	r3, [pc, #80]	@ (8000210 <TIM_Config+0xa8>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a13      	ldr	r2, [pc, #76]	@ (8000210 <TIM_Config+0xa8>)
 80001c2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80001c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80001ca:	6193      	str	r3, [r2, #24]

	TIM4->CCER |= 1 << 0 | 1 << 4;      // CH 1 & 2 ENABLE
 80001cc:	4b10      	ldr	r3, [pc, #64]	@ (8000210 <TIM_Config+0xa8>)
 80001ce:	6a1b      	ldr	r3, [r3, #32]
 80001d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000210 <TIM_Config+0xa8>)
 80001d2:	f043 0311 	orr.w	r3, r3, #17
 80001d6:	6213      	str	r3, [r2, #32]


	TIM4->PSC = 6399;
 80001d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <TIM_Config+0xa8>)
 80001da:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80001de:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 9999;
 80001e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000210 <TIM_Config+0xa8>)
 80001e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80001e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR1 = 2499;				// ! PWM PULSE DEĞERİ YANİ AMPLİTUDE DEĞERİ
 80001e8:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <TIM_Config+0xa8>)
 80001ea:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80001ee:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = 7099;
 80001f0:	4b07      	ldr	r3, [pc, #28]	@ (8000210 <TIM_Config+0xa8>)
 80001f2:	f641 32bb 	movw	r2, #7099	@ 0x1bbb
 80001f6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CR1 |= 1 << 0;			// timer 4 enable
 80001f8:	4b05      	ldr	r3, [pc, #20]	@ (8000210 <TIM_Config+0xa8>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a04      	ldr	r2, [pc, #16]	@ (8000210 <TIM_Config+0xa8>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]


}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021000 	.word	0x40021000
 8000210:	40000800 	.word	0x40000800

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	RCC->CR |= 0x03;                                     // hsi and hsiready on
 8000218:	4b19      	ldr	r3, [pc, #100]	@ (8000280 <SystemClock_Config+0x6c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a18      	ldr	r2, [pc, #96]	@ (8000280 <SystemClock_Config+0x6c>)
 800021e:	f043 0303 	orr.w	r3, r3, #3
 8000222:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<1)));                         //wait hsi ready
 8000224:	bf00      	nop
 8000226:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <SystemClock_Config+0x6c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f003 0302 	and.w	r3, r3, #2
 800022e:	2b00      	cmp	r3, #0
 8000230:	d0f9      	beq.n	8000226 <SystemClock_Config+0x12>
	RCC->CR |= (1 << 19);								 // CSS ON
 8000232:	4b13      	ldr	r3, [pc, #76]	@ (8000280 <SystemClock_Config+0x6c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <SystemClock_Config+0x6c>)
 8000238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800023c:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~(1 << 16);                             // HSI SOURCE HSI
 800023e:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <SystemClock_Config+0x6c>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	4a0f      	ldr	r2, [pc, #60]	@ (8000280 <SystemClock_Config+0x6c>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000248:	6053      	str	r3, [r2, #4]
	RCC->CFGR = 0x0140000;								// pll x7
 800024a:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <SystemClock_Config+0x6c>)
 800024c:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8000250:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (1<<1);								//PLL AS SYSTEM CLOCK
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <SystemClock_Config+0x6c>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <SystemClock_Config+0x6c>)
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (1 << 14);                             // ADC PRESCALER /4
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <SystemClock_Config+0x6c>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a07      	ldr	r2, [pc, #28]	@ (8000280 <SystemClock_Config+0x6c>)
 8000264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000268:	6053      	str	r3, [r2, #4]
	RCC->CIR  &= ~(0x0840000);								//flag reset(css and hsi)
 800026a:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <SystemClock_Config+0x6c>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	4a04      	ldr	r2, [pc, #16]	@ (8000280 <SystemClock_Config+0x6c>)
 8000270:	f423 0304 	bic.w	r3, r3, #8650752	@ 0x840000
 8000274:	6093      	str	r3, [r2, #8]
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
	RCC->APB2ENR |= 1 << 3 ;          					// GPIOB ENABLE
 8000288:	4b13      	ldr	r3, [pc, #76]	@ (80002d8 <MX_GPIO_Init+0x54>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a12      	ldr	r2, [pc, #72]	@ (80002d8 <MX_GPIO_Init+0x54>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6193      	str	r3, [r2, #24]

	GPIOB->CRL |= 1 << 24 | 1 << 25 | 1 << 27;			//GPIOB PORT 6 CONFİG: AF - 50 MHz
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_GPIO_Init+0x58>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a10      	ldr	r2, [pc, #64]	@ (80002dc <MX_GPIO_Init+0x58>)
 800029a:	f043 6330 	orr.w	r3, r3, #184549376	@ 0xb000000
 800029e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(1 << 26);
 80002a0:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_GPIO_Init+0x58>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <MX_GPIO_Init+0x58>)
 80002a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0xB0000000;			  				// GPIOB PORT 7 MODE SELECTION: AF - 50 MHz
 80002ac:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <MX_GPIO_Init+0x58>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0a      	ldr	r2, [pc, #40]	@ (80002dc <MX_GPIO_Init+0x58>)
 80002b2:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(1 << 30);
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <MX_GPIO_Init+0x58>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a07      	ldr	r2, [pc, #28]	@ (80002dc <MX_GPIO_Init+0x58>)
 80002be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80002c2:	6013      	str	r3, [r2, #0]
	AFIO->MAPR &= 0 << 12 ;           					// AF mode selection: TIM2 (PB6 PB7 PB8 PB9)
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <MX_GPIO_Init+0x5c>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <MX_GPIO_Init+0x5c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010c00 	.word	0x40010c00
 80002e0:	40010000 	.word	0x40010000

080002e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ea:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <HAL_MspInit+0x5c>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	4a14      	ldr	r2, [pc, #80]	@ (8000340 <HAL_MspInit+0x5c>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6193      	str	r3, [r2, #24]
 80002f6:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
 8000300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000302:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <HAL_MspInit+0x5c>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	4a0e      	ldr	r2, [pc, #56]	@ (8000340 <HAL_MspInit+0x5c>)
 8000308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800030c:	61d3      	str	r3, [r2, #28]
 800030e:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <HAL_MspInit+0x60>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	4a04      	ldr	r2, [pc, #16]	@ (8000344 <HAL_MspInit+0x60>)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	40021000 	.word	0x40021000
 8000344:	40010000 	.word	0x40010000

08000348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <NMI_Handler+0x4>

08000350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000354:	bf00      	nop
 8000356:	e7fd      	b.n	8000354 <HardFault_Handler+0x4>

08000358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <MemManage_Handler+0x4>

08000360 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <BusFault_Handler+0x4>

08000368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <UsageFault_Handler+0x4>

08000370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000398:	f000 f874 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003ac:	f7ff fff8 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003b2:	490c      	ldr	r1, [pc, #48]	@ (80003e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003b4:	4a0c      	ldr	r2, [pc, #48]	@ (80003e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a09      	ldr	r2, [pc, #36]	@ (80003ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003c8:	4c09      	ldr	r4, [pc, #36]	@ (80003f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d6:	f000 f94b 	bl	8000670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff feb7 	bl	800014c <main>
  bx lr
 80003de:	4770      	bx	lr
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003e8:	080006d8 	.word	0x080006d8
  ldr r2, =_sbss
 80003ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003f0:	2000002c 	.word	0x2000002c

080003f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC1_2_IRQHandler>
	...

080003f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003fc:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <HAL_Init+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a07      	ldr	r2, [pc, #28]	@ (8000420 <HAL_Init+0x28>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000408:	2003      	movs	r0, #3
 800040a:	f000 f8fd 	bl	8000608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800040e:	200f      	movs	r0, #15
 8000410:	f000 f808 	bl	8000424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000414:	f7ff ff66 	bl	80002e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40022000 	.word	0x40022000

08000424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800042c:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <HAL_InitTick+0x54>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <HAL_InitTick+0x58>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4619      	mov	r1, r3
 8000436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800043a:	fbb3 f3f1 	udiv	r3, r3, r1
 800043e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000442:	4618      	mov	r0, r3
 8000444:	f000 f907 	bl	8000656 <HAL_SYSTICK_Config>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800044e:	2301      	movs	r3, #1
 8000450:	e00e      	b.n	8000470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b0f      	cmp	r3, #15
 8000456:	d80a      	bhi.n	800046e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000458:	2200      	movs	r2, #0
 800045a:	6879      	ldr	r1, [r7, #4]
 800045c:	f04f 30ff 	mov.w	r0, #4294967295
 8000460:	f000 f8dd 	bl	800061e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000464:	4a06      	ldr	r2, [pc, #24]	@ (8000480 <HAL_InitTick+0x5c>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800046a:	2300      	movs	r3, #0
 800046c:	e000      	b.n	8000470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000000 	.word	0x20000000
 800047c:	20000008 	.word	0x20000008
 8000480:	20000004 	.word	0x20000004

08000484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <HAL_IncTick+0x1c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <HAL_IncTick+0x20>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4413      	add	r3, r2
 8000494:	4a03      	ldr	r2, [pc, #12]	@ (80004a4 <HAL_IncTick+0x20>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	20000008 	.word	0x20000008
 80004a4:	20000028 	.word	0x20000028

080004a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f003 0307 	and.w	r3, r3, #7
 80004b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <__NVIC_SetPriorityGrouping+0x44>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004c4:	4013      	ands	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80004d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004da:	4a04      	ldr	r2, [pc, #16]	@ (80004ec <__NVIC_SetPriorityGrouping+0x44>)
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	60d3      	str	r3, [r2, #12]
}
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004f4:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <__NVIC_GetPriorityGrouping+0x18>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	0a1b      	lsrs	r3, r3, #8
 80004fa:	f003 0307 	and.w	r3, r3, #7
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051c:	2b00      	cmp	r3, #0
 800051e:	db0a      	blt.n	8000536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	b2da      	uxtb	r2, r3
 8000524:	490c      	ldr	r1, [pc, #48]	@ (8000558 <__NVIC_SetPriority+0x4c>)
 8000526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052a:	0112      	lsls	r2, r2, #4
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	440b      	add	r3, r1
 8000530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000534:	e00a      	b.n	800054c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4908      	ldr	r1, [pc, #32]	@ (800055c <__NVIC_SetPriority+0x50>)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f003 030f 	and.w	r3, r3, #15
 8000542:	3b04      	subs	r3, #4
 8000544:	0112      	lsls	r2, r2, #4
 8000546:	b2d2      	uxtb	r2, r2
 8000548:	440b      	add	r3, r1
 800054a:	761a      	strb	r2, [r3, #24]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000e100 	.word	0xe000e100
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000560:	b480      	push	{r7}
 8000562:	b089      	sub	sp, #36	@ 0x24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	f1c3 0307 	rsb	r3, r3, #7
 800057a:	2b04      	cmp	r3, #4
 800057c:	bf28      	it	cs
 800057e:	2304      	movcs	r3, #4
 8000580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3304      	adds	r3, #4
 8000586:	2b06      	cmp	r3, #6
 8000588:	d902      	bls.n	8000590 <NVIC_EncodePriority+0x30>
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	3b03      	subs	r3, #3
 800058e:	e000      	b.n	8000592 <NVIC_EncodePriority+0x32>
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	f04f 32ff 	mov.w	r2, #4294967295
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	43da      	mvns	r2, r3
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	401a      	ands	r2, r3
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	43d9      	mvns	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b8:	4313      	orrs	r3, r2
         );
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3724      	adds	r7, #36	@ 0x24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005d4:	d301      	bcc.n	80005da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005d6:	2301      	movs	r3, #1
 80005d8:	e00f      	b.n	80005fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005da:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <SysTick_Config+0x40>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3b01      	subs	r3, #1
 80005e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005e2:	210f      	movs	r1, #15
 80005e4:	f04f 30ff 	mov.w	r0, #4294967295
 80005e8:	f7ff ff90 	bl	800050c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <SysTick_Config+0x40>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <SysTick_Config+0x40>)
 80005f4:	2207      	movs	r2, #7
 80005f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	e000e010 	.word	0xe000e010

08000608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff49 	bl	80004a8 <__NVIC_SetPriorityGrouping>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af00      	add	r7, sp, #0
 8000624:	4603      	mov	r3, r0
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
 800062a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000630:	f7ff ff5e 	bl	80004f0 <__NVIC_GetPriorityGrouping>
 8000634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	68b9      	ldr	r1, [r7, #8]
 800063a:	6978      	ldr	r0, [r7, #20]
 800063c:	f7ff ff90 	bl	8000560 <NVIC_EncodePriority>
 8000640:	4602      	mov	r2, r0
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff5f 	bl	800050c <__NVIC_SetPriority>
}
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffb0 	bl	80005c4 <SysTick_Config>
 8000664:	4603      	mov	r3, r0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <__libc_init_array>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	2600      	movs	r6, #0
 8000674:	4d0c      	ldr	r5, [pc, #48]	@ (80006a8 <__libc_init_array+0x38>)
 8000676:	4c0d      	ldr	r4, [pc, #52]	@ (80006ac <__libc_init_array+0x3c>)
 8000678:	1b64      	subs	r4, r4, r5
 800067a:	10a4      	asrs	r4, r4, #2
 800067c:	42a6      	cmp	r6, r4
 800067e:	d109      	bne.n	8000694 <__libc_init_array+0x24>
 8000680:	f000 f81a 	bl	80006b8 <_init>
 8000684:	2600      	movs	r6, #0
 8000686:	4d0a      	ldr	r5, [pc, #40]	@ (80006b0 <__libc_init_array+0x40>)
 8000688:	4c0a      	ldr	r4, [pc, #40]	@ (80006b4 <__libc_init_array+0x44>)
 800068a:	1b64      	subs	r4, r4, r5
 800068c:	10a4      	asrs	r4, r4, #2
 800068e:	42a6      	cmp	r6, r4
 8000690:	d105      	bne.n	800069e <__libc_init_array+0x2e>
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f855 3b04 	ldr.w	r3, [r5], #4
 8000698:	4798      	blx	r3
 800069a:	3601      	adds	r6, #1
 800069c:	e7ee      	b.n	800067c <__libc_init_array+0xc>
 800069e:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a2:	4798      	blx	r3
 80006a4:	3601      	adds	r6, #1
 80006a6:	e7f2      	b.n	800068e <__libc_init_array+0x1e>
 80006a8:	080006d0 	.word	0x080006d0
 80006ac:	080006d0 	.word	0x080006d0
 80006b0:	080006d0 	.word	0x080006d0
 80006b4:	080006d4 	.word	0x080006d4

080006b8 <_init>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	bf00      	nop
 80006bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006be:	bc08      	pop	{r3}
 80006c0:	469e      	mov	lr, r3
 80006c2:	4770      	bx	lr

080006c4 <_fini>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr
