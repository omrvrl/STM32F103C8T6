
031_Pwm_Servo_Adc_Hal_Vld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a5c  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c2c  08002c2c  00003c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c64  08002c64  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c64  08002c64  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c64  08002c64  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c64  08002c64  00003c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c68  08002c68  00003c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c6c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08002c78  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002c78  000040f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009490  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c01  00000000  00000000  0000d4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0000f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087c  00000000  00000000  0000fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107d9  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c553  00000000  00000000  00020c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000681fe  00000000  00000000  0002d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009536e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d44  00000000  00000000  000953b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000980f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002c14 	.word	0x08002c14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002c14 	.word	0x08002c14

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fae8 	bl	80007ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f869 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f000 f971 	bl	8000504 <MX_GPIO_Init>
  MX_DMA_Init();
 8000222:	f000 f951 	bl	80004c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000226:	f000 f8b7 	bl	8000398 <MX_ADC1_Init>
  MX_TIM4_Init();
 800022a:	f000 f8f3 	bl	8000414 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800022e:	2100      	movs	r1, #0
 8000230:	480e      	ldr	r0, [pc, #56]	@ (800026c <main+0x5c>)
 8000232:	f002 f859 	bl	80022e8 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Read_Adc();
 8000236:	f000 f83d 	bl	80002b4 <Read_Adc>

	  pulse = map(adc_value,0,4095,500,2500);
 800023a:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <main+0x60>)
 800023c:	881b      	ldrh	r3, [r3, #0]
 800023e:	4618      	mov	r0, r3
 8000240:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800024a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800024e:	2100      	movs	r1, #0
 8000250:	f000 f812 	bl	8000278 <map>
 8000254:	4603      	mov	r3, r0
 8000256:	461a      	mov	r2, r3
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <main+0x64>)
 800025a:	601a      	str	r2, [r3, #0]

	 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pulse);
 800025c:	4b03      	ldr	r3, [pc, #12]	@ (800026c <main+0x5c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a04      	ldr	r2, [pc, #16]	@ (8000274 <main+0x64>)
 8000262:	6812      	ldr	r2, [r2, #0]
 8000264:	635a      	str	r2, [r3, #52]	@ 0x34
	  Read_Adc();
 8000266:	bf00      	nop
 8000268:	e7e5      	b.n	8000236 <main+0x26>
 800026a:	bf00      	nop
 800026c:	2000009c 	.word	0x2000009c
 8000270:	200000e8 	.word	0x200000e8
 8000274:	200000e4 	.word	0x200000e4

08000278 <map>:
 * @brief map func. to convert adc value input for pwm generator
 * @param A: for adc_value input, B: min_adc, C: max_adc, D: min_pwm_out, E: max_pwm_out
 * @retval pulse pwm value
 */

uint16_t map(int A, int B, int C, int D, int E){
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
 8000284:	603b      	str	r3, [r7, #0]
	return (A-B) * (E-D) / (B-C) + D;
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	69b9      	ldr	r1, [r7, #24]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	1a8a      	subs	r2, r1, r2
 8000292:	fb03 f202 	mul.w	r2, r3, r2
 8000296:	68b9      	ldr	r1, [r7, #8]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	1acb      	subs	r3, r1, r3
 800029c:	fb92 f3f3 	sdiv	r3, r2, r3
 80002a0:	b29a      	uxth	r2, r3
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	4413      	add	r3, r2
 80002a8:	b29b      	uxth	r3, r3
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <Read_Adc>:
/*@brief Adc value reading func.
 * @param None
 * @retval None
 *
 */
void Read_Adc(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 80002b8:	480a      	ldr	r0, [pc, #40]	@ (80002e4 <Read_Adc+0x30>)
 80002ba:	f000 fbc7 	bl	8000a4c <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1,100000) == HAL_OK){
 80002be:	490a      	ldr	r1, [pc, #40]	@ (80002e8 <Read_Adc+0x34>)
 80002c0:	4808      	ldr	r0, [pc, #32]	@ (80002e4 <Read_Adc+0x30>)
 80002c2:	f000 fc63 	bl	8000b8c <HAL_ADC_PollForConversion>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d106      	bne.n	80002da <Read_Adc+0x26>
		adc_value = HAL_ADC_GetValue(&hadc1);
 80002cc:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <Read_Adc+0x30>)
 80002ce:	f000 fd63 	bl	8000d98 <HAL_ADC_GetValue>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b05      	ldr	r3, [pc, #20]	@ (80002ec <Read_Adc+0x38>)
 80002d8:	801a      	strh	r2, [r3, #0]
	}

	HAL_ADC_Stop(&hadc1);
 80002da:	4802      	ldr	r0, [pc, #8]	@ (80002e4 <Read_Adc+0x30>)
 80002dc:	f000 fc2a 	bl	8000b34 <HAL_ADC_Stop>

}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000028 	.word	0x20000028
 80002e8:	000186a0 	.word	0x000186a0
 80002ec:	200000e8 	.word	0x200000e8

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b092      	sub	sp, #72	@ 0x48
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0320 	add.w	r3, r7, #32
 80002fa:	2228      	movs	r2, #40	@ 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fc5c 	bl	8002bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	463b      	mov	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031e:	2302      	movs	r3, #2
 8000320:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000326:	2310      	movs	r3, #16
 8000328:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032a:	2302      	movs	r3, #2
 800032c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800032e:	2300      	movs	r3, #0
 8000330:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000332:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000336:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	f107 0320 	add.w	r3, r7, #32
 800033c:	4618      	mov	r0, r3
 800033e:	f001 fabd 	bl	80018bc <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000348:	f000 f8fe 	bl	8000548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
 800034e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000350:	2302      	movs	r3, #2
 8000352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000360:	f107 030c 	add.w	r3, r7, #12
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fd2a 	bl	8001dc0 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000372:	f000 f8e9 	bl	8000548 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000376:	2302      	movs	r3, #2
 8000378:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	463b      	mov	r3, r7
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fe63 	bl	800204c <HAL_RCCEx_PeriphCLKConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800038c:	f000 f8dc 	bl	8000548 <Error_Handler>
  }
}
 8000390:	bf00      	nop
 8000392:	3748      	adds	r7, #72	@ 0x48
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <MX_ADC1_Init+0x74>)
 80003aa:	4a19      	ldr	r2, [pc, #100]	@ (8000410 <MX_ADC1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_ADC1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003b4:	4b15      	ldr	r3, [pc, #84]	@ (800040c <MX_ADC1_Init+0x74>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ba:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_ADC1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <MX_ADC1_Init+0x74>)
 80003c2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <MX_ADC1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_ADC1_Init+0x74>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d4:	480d      	ldr	r0, [pc, #52]	@ (800040c <MX_ADC1_Init+0x74>)
 80003d6:	f000 fa61 	bl	800089c <HAL_ADC_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003e0:	f000 f8b2 	bl	8000548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e8:	2301      	movs	r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	4805      	ldr	r0, [pc, #20]	@ (800040c <MX_ADC1_Init+0x74>)
 80003f6:	f000 fcdb 	bl	8000db0 <HAL_ADC_ConfigChannel>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000400:	f000 f8a2 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000404:	bf00      	nop
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000028 	.word	0x20000028
 8000410:	40012400 	.word	0x40012400

08000414 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	@ 0x28
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041a:	f107 0320 	add.w	r3, r7, #32
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000436:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <MX_TIM4_Init+0xac>)
 8000438:	4a22      	ldr	r2, [pc, #136]	@ (80004c4 <MX_TIM4_Init+0xb0>)
 800043a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 23;
 800043c:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <MX_TIM4_Init+0xac>)
 800043e:	2217      	movs	r2, #23
 8000440:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000442:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <MX_TIM4_Init+0xac>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000448:	4b1d      	ldr	r3, [pc, #116]	@ (80004c0 <MX_TIM4_Init+0xac>)
 800044a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800044e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <MX_TIM4_Init+0xac>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000456:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <MX_TIM4_Init+0xac>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800045c:	4818      	ldr	r0, [pc, #96]	@ (80004c0 <MX_TIM4_Init+0xac>)
 800045e:	f001 fef3 	bl	8002248 <HAL_TIM_PWM_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000468:	f000 f86e 	bl	8000548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000474:	f107 0320 	add.w	r3, r7, #32
 8000478:	4619      	mov	r1, r3
 800047a:	4811      	ldr	r0, [pc, #68]	@ (80004c0 <MX_TIM4_Init+0xac>)
 800047c:	f002 fb38 	bl	8002af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000486:	f000 f85f 	bl	8000548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048a:	2360      	movs	r3, #96	@ 0x60
 800048c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	4619      	mov	r1, r3
 80004a0:	4807      	ldr	r0, [pc, #28]	@ (80004c0 <MX_TIM4_Init+0xac>)
 80004a2:	f001 ffe3 	bl	800246c <HAL_TIM_PWM_ConfigChannel>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80004ac:	f000 f84c 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80004b0:	4803      	ldr	r0, [pc, #12]	@ (80004c0 <MX_TIM4_Init+0xac>)
 80004b2:	f000 f907 	bl	80006c4 <HAL_TIM_MspPostInit>

}
 80004b6:	bf00      	nop
 80004b8:	3728      	adds	r7, #40	@ 0x28
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000009c 	.word	0x2000009c
 80004c4:	40000800 	.word	0x40000800

080004c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_DMA_Init+0x38>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000500 <MX_DMA_Init+0x38>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_DMA_Init+0x38>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	200b      	movs	r0, #11
 80004ec:	f000 fecb 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004f0:	200b      	movs	r0, #11
 80004f2:	f000 fee4 	bl	80012be <HAL_NVIC_EnableIRQ>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <MX_GPIO_Init+0x40>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <MX_GPIO_Init+0x40>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <MX_GPIO_Init+0x40>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <MX_GPIO_Init+0x40>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <MX_GPIO_Init+0x40>)
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <MX_GPIO_Init+0x40>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0308 	and.w	r3, r3, #8
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <Error_Handler+0x8>

08000554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055a:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <HAL_MspInit+0x5c>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <HAL_MspInit+0x60>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	4a04      	ldr	r2, [pc, #16]	@ (80005b4 <HAL_MspInit+0x60>)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010000 	.word	0x40010000

080005b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a28      	ldr	r2, [pc, #160]	@ (8000674 <HAL_ADC_MspInit+0xbc>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d149      	bne.n	800066c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d8:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <HAL_ADC_MspInit+0xc0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a26      	ldr	r2, [pc, #152]	@ (8000678 <HAL_ADC_MspInit+0xc0>)
 80005de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <HAL_ADC_MspInit+0xc0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <HAL_ADC_MspInit+0xc0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <HAL_ADC_MspInit+0xc0>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <HAL_ADC_MspInit+0xc0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000608:	2301      	movs	r3, #1
 800060a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060c:	2303      	movs	r3, #3
 800060e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4819      	ldr	r0, [pc, #100]	@ (800067c <HAL_ADC_MspInit+0xc4>)
 8000618:	f000 ffcc 	bl	80015b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 800061e:	4a19      	ldr	r2, [pc, #100]	@ (8000684 <HAL_ADC_MspInit+0xcc>)
 8000620:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000628:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800062e:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 8000630:	2280      	movs	r2, #128	@ 0x80
 8000632:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 8000636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800063a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 800063e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000642:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000644:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 8000646:	2220      	movs	r2, #32
 8000648:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 8000652:	f000 fe4f 	bl	80012f4 <HAL_DMA_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800065c:	f7ff ff74 	bl	8000548 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 8000664:	621a      	str	r2, [r3, #32]
 8000666:	4a06      	ldr	r2, [pc, #24]	@ (8000680 <HAL_ADC_MspInit+0xc8>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40012400 	.word	0x40012400
 8000678:	40021000 	.word	0x40021000
 800067c:	40010800 	.word	0x40010800
 8000680:	20000058 	.word	0x20000058
 8000684:	40020008 	.word	0x40020008

08000688 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a09      	ldr	r2, [pc, #36]	@ (80006bc <HAL_TIM_PWM_MspInit+0x34>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d10b      	bne.n	80006b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40000800 	.word	0x40000800
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <HAL_TIM_MspPostInit+0x58>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d117      	bne.n	8000714 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <HAL_TIM_MspPostInit+0x5c>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <HAL_TIM_MspPostInit+0x5c>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <HAL_TIM_MspPostInit+0x5c>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006fc:	2340      	movs	r3, #64	@ 0x40
 80006fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <HAL_TIM_MspPostInit+0x60>)
 8000710:	f000 ff50 	bl	80015b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40000800 	.word	0x40000800
 8000720:	40021000 	.word	0x40021000
 8000724:	40010c00 	.word	0x40010c00

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <NMI_Handler+0x4>

08000730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <MemManage_Handler+0x4>

08000740 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <UsageFault_Handler+0x4>

08000750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f874 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000784:	4802      	ldr	r0, [pc, #8]	@ (8000790 <DMA1_Channel1_IRQHandler+0x10>)
 8000786:	f000 fe0f 	bl	80013a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000058 	.word	0x20000058

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff fff8 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a6:	490c      	ldr	r1, [pc, #48]	@ (80007d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a8:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007bc:	4c09      	ldr	r4, [pc, #36]	@ (80007e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f002 f9ff 	bl	8002bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fd1f 	bl	8000210 <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007dc:	08002c6c 	.word	0x08002c6c
  ldr r2, =_sbss
 80007e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e4:	200000f0 	.word	0x200000f0

080007e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_IRQHandler>

080007ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ee:	2003      	movs	r0, #3
 80007f0:	f000 fd3e 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f4:	200f      	movs	r0, #15
 80007f6:	f000 f805 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fa:	f7ff feab 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	bd80      	pop	{r7, pc}

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fd59 	bl	80012da <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 fd21 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	@ (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_IncTick+0x1c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <HAL_IncTick+0x20>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a03      	ldr	r2, [pc, #12]	@ (8000884 <HAL_IncTick+0x20>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000008 	.word	0x20000008
 8000884:	200000ec 	.word	0x200000ec

08000888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b02      	ldr	r3, [pc, #8]	@ (8000898 <HAL_GetTick+0x10>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	200000ec 	.word	0x200000ec

0800089c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008a4:	2300      	movs	r3, #0
 80008a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d101      	bne.n	80008be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e0be      	b.n	8000a3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d109      	bne.n	80008e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fe6c 	bl	80005b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 fbb7 	bl	8001054 <ADC_ConversionStop_Disable>
 80008e6:	4603      	mov	r3, r0
 80008e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f040 8099 	bne.w	8000a2a <HAL_ADC_Init+0x18e>
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f040 8095 	bne.w	8000a2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000904:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000908:	f023 0302 	bic.w	r3, r3, #2
 800090c:	f043 0202 	orr.w	r2, r3, #2
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800091c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	7b1b      	ldrb	r3, [r3, #12]
 8000922:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000924:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4313      	orrs	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000934:	d003      	beq.n	800093e <HAL_ADC_Init+0xa2>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d102      	bne.n	8000944 <HAL_ADC_Init+0xa8>
 800093e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000942:	e000      	b.n	8000946 <HAL_ADC_Init+0xaa>
 8000944:	2300      	movs	r3, #0
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7d1b      	ldrb	r3, [r3, #20]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d119      	bne.n	8000988 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7b1b      	ldrb	r3, [r3, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d109      	bne.n	8000970 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	3b01      	subs	r3, #1
 8000962:	035a      	lsls	r2, r3, #13
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	e00b      	b.n	8000988 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000974:	f043 0220 	orr.w	r2, r3, #32
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000980:	f043 0201 	orr.w	r2, r3, #1
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	430a      	orrs	r2, r1
 800099a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <HAL_ADC_Init+0x1a8>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009b8:	d003      	beq.n	80009c2 <HAL_ADC_Init+0x126>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d104      	bne.n	80009cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	051b      	lsls	r3, r3, #20
 80009ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	430a      	orrs	r2, r1
 80009de:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <HAL_ADC_Init+0x1ac>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d10b      	bne.n	8000a08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fa:	f023 0303 	bic.w	r3, r3, #3
 80009fe:	f043 0201 	orr.w	r2, r3, #1
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a06:	e018      	b.n	8000a3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a0c:	f023 0312 	bic.w	r3, r3, #18
 8000a10:	f043 0210 	orr.w	r2, r3, #16
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1c:	f043 0201 	orr.w	r2, r3, #1
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a28:	e007      	b.n	8000a3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a2e:	f043 0210 	orr.w	r2, r3, #16
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	ffe1f7fd 	.word	0xffe1f7fd
 8000a48:	ff1f0efe 	.word	0xff1f0efe

08000a4c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d101      	bne.n	8000a66 <HAL_ADC_Start+0x1a>
 8000a62:	2302      	movs	r3, #2
 8000a64:	e062      	b.n	8000b2c <HAL_ADC_Start+0xe0>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 fa96 	bl	8000fa0 <ADC_Enable>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d151      	bne.n	8000b22 <HAL_ADC_Start+0xd6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	629a      	str	r2, [r3, #40]	@ 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a96:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d007      	beq.n	8000abc <HAL_ADC_Start+0x70>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ab4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_ADC_Start+0x8a>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000acc:	f023 0206 	bic.w	r2, r3, #6
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ad4:	e002      	b.n	8000adc <HAL_ADC_Start+0x90>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f06f 0202 	mvn.w	r2, #2
 8000aec:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000af8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000afc:	d108      	bne.n	8000b10 <HAL_ADC_Start+0xc4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	e00c      	b.n	8000b2a <HAL_ADC_Start+0xde>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	e003      	b.n	8000b2a <HAL_ADC_Start+0xde>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <HAL_ADC_Stop+0x1a>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e01a      	b.n	8000b84 <HAL_ADC_Stop+0x50>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2201      	movs	r2, #1
 8000b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 fa7c 	bl	8001054 <ADC_ConversionStop_Disable>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d109      	bne.n	8000b7a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b6e:	f023 0301 	bic.w	r3, r3, #1
 8000b72:	f043 0201 	orr.w	r2, r3, #1
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ba2:	f7ff fe71 	bl	8000888 <HAL_GetTick>
 8000ba6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00b      	beq.n	8000bce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bba:	f043 0220 	orr.w	r2, r3, #32
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0d3      	b.n	8000d76 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d131      	bne.n	8000c40 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d12a      	bne.n	8000c40 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bea:	e021      	b.n	8000c30 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf2:	d01d      	beq.n	8000c30 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d007      	beq.n	8000c0a <HAL_ADC_PollForConversion+0x7e>
 8000bfa:	f7ff fe45 	bl	8000888 <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d212      	bcs.n	8000c30 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10b      	bne.n	8000c30 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1c:	f043 0204 	orr.w	r2, r3, #4
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e0a2      	b.n	8000d76 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0d6      	beq.n	8000bec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c3e:	e070      	b.n	8000d22 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c40:	4b4f      	ldr	r3, [pc, #316]	@ (8000d80 <HAL_ADC_PollForConversion+0x1f4>)
 8000c42:	681c      	ldr	r4, [r3, #0]
 8000c44:	2002      	movs	r0, #2
 8000c46:	f001 faa7 	bl	8002198 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6919      	ldr	r1, [r3, #16]
 8000c56:	4b4b      	ldr	r3, [pc, #300]	@ (8000d84 <HAL_ADC_PollForConversion+0x1f8>)
 8000c58:	400b      	ands	r3, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d118      	bne.n	8000c90 <HAL_ADC_PollForConversion+0x104>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68d9      	ldr	r1, [r3, #12]
 8000c64:	4b48      	ldr	r3, [pc, #288]	@ (8000d88 <HAL_ADC_PollForConversion+0x1fc>)
 8000c66:	400b      	ands	r3, r1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d111      	bne.n	8000c90 <HAL_ADC_PollForConversion+0x104>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6919      	ldr	r1, [r3, #16]
 8000c72:	4b46      	ldr	r3, [pc, #280]	@ (8000d8c <HAL_ADC_PollForConversion+0x200>)
 8000c74:	400b      	ands	r3, r1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d108      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x100>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68d9      	ldr	r1, [r3, #12]
 8000c80:	4b43      	ldr	r3, [pc, #268]	@ (8000d90 <HAL_ADC_PollForConversion+0x204>)
 8000c82:	400b      	ands	r3, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x100>
 8000c88:	2314      	movs	r3, #20
 8000c8a:	e020      	b.n	8000cce <HAL_ADC_PollForConversion+0x142>
 8000c8c:	2329      	movs	r3, #41	@ 0x29
 8000c8e:	e01e      	b.n	8000cce <HAL_ADC_PollForConversion+0x142>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6919      	ldr	r1, [r3, #16]
 8000c96:	4b3d      	ldr	r3, [pc, #244]	@ (8000d8c <HAL_ADC_PollForConversion+0x200>)
 8000c98:	400b      	ands	r3, r1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <HAL_ADC_PollForConversion+0x120>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68d9      	ldr	r1, [r3, #12]
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8000d90 <HAL_ADC_PollForConversion+0x204>)
 8000ca6:	400b      	ands	r3, r1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00d      	beq.n	8000cc8 <HAL_ADC_PollForConversion+0x13c>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6919      	ldr	r1, [r3, #16]
 8000cb2:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <HAL_ADC_PollForConversion+0x208>)
 8000cb4:	400b      	ands	r3, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d108      	bne.n	8000ccc <HAL_ADC_PollForConversion+0x140>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68d9      	ldr	r1, [r3, #12]
 8000cc0:	4b34      	ldr	r3, [pc, #208]	@ (8000d94 <HAL_ADC_PollForConversion+0x208>)
 8000cc2:	400b      	ands	r3, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <HAL_ADC_PollForConversion+0x140>
 8000cc8:	2354      	movs	r3, #84	@ 0x54
 8000cca:	e000      	b.n	8000cce <HAL_ADC_PollForConversion+0x142>
 8000ccc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cd4:	e021      	b.n	8000d1a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d01a      	beq.n	8000d14 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d007      	beq.n	8000cf4 <HAL_ADC_PollForConversion+0x168>
 8000ce4:	f7ff fdd0 	bl	8000888 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d20f      	bcs.n	8000d14 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d90b      	bls.n	8000d14 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d00:	f043 0204 	orr.w	r2, r3, #4
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e030      	b.n	8000d76 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3301      	adds	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d8d9      	bhi.n	8000cd6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f06f 0212 	mvn.w	r2, #18
 8000d2a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d42:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d46:	d115      	bne.n	8000d74 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d111      	bne.n	8000d74 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d6c:	f043 0201 	orr.w	r2, r3, #1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000000 	.word	0x20000000
 8000d84:	24924924 	.word	0x24924924
 8000d88:	00924924 	.word	0x00924924
 8000d8c:	12492492 	.word	0x12492492
 8000d90:	00492492 	.word	0x00492492
 8000d94:	00249249 	.word	0x00249249

08000d98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <HAL_ADC_ConfigChannel+0x20>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e0dc      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x1da>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d81c      	bhi.n	8000e1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	3b05      	subs	r3, #5
 8000df2:	221f      	movs	r2, #31
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4019      	ands	r1, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	3b05      	subs	r3, #5
 8000e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e18:	e03c      	b.n	8000e94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b0c      	cmp	r3, #12
 8000e20:	d81c      	bhi.n	8000e5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	3b23      	subs	r3, #35	@ 0x23
 8000e34:	221f      	movs	r2, #31
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4019      	ands	r1, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b23      	subs	r3, #35	@ 0x23
 8000e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e5a:	e01b      	b.n	8000e94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3b41      	subs	r3, #65	@ 0x41
 8000e6e:	221f      	movs	r2, #31
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4019      	ands	r1, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	3b41      	subs	r3, #65	@ 0x41
 8000e88:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b09      	cmp	r3, #9
 8000e9a:	d91c      	bls.n	8000ed6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68d9      	ldr	r1, [r3, #12]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	3b1e      	subs	r3, #30
 8000eae:	2207      	movs	r2, #7
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4019      	ands	r1, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	6898      	ldr	r0, [r3, #8]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3b1e      	subs	r3, #30
 8000ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	e019      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6919      	ldr	r1, [r3, #16]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4019      	ands	r1, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6898      	ldr	r0, [r3, #8]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	fa00 f203 	lsl.w	r2, r0, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b10      	cmp	r3, #16
 8000f10:	d003      	beq.n	8000f1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f16:	2b11      	cmp	r3, #17
 8000f18:	d132      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f94 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d125      	bne.n	8000f70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d126      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f40:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d11a      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a13      	ldr	r2, [pc, #76]	@ (8000f9c <HAL_ADC_ConfigChannel+0x1ec>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	0c9a      	lsrs	r2, r3, #18
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f9      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x1b2>
 8000f6e:	e007      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f74:	f043 0220 	orr.w	r2, r3, #32
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40012400 	.word	0x40012400
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	431bde83 	.word	0x431bde83

08000fa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d040      	beq.n	8001040 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0201 	orr.w	r2, r2, #1
 8000fcc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <ADC_Enable+0xac>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001050 <ADC_Enable+0xb0>)
 8000fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd8:	0c9b      	lsrs	r3, r3, #18
 8000fda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fdc:	e002      	b.n	8000fe4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f9      	bne.n	8000fde <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fea:	f7ff fc4d 	bl	8000888 <HAL_GetTick>
 8000fee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ff0:	e01f      	b.n	8001032 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ff2:	f7ff fc49 	bl	8000888 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d918      	bls.n	8001032 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d011      	beq.n	8001032 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001012:	f043 0210 	orr.w	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e007      	b.n	8001042 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b01      	cmp	r3, #1
 800103e:	d1d8      	bne.n	8000ff2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000
 8001050:	431bde83 	.word	0x431bde83

08001054 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b01      	cmp	r3, #1
 800106c:	d12e      	bne.n	80010cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800107e:	f7ff fc03 	bl	8000888 <HAL_GetTick>
 8001082:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001084:	e01b      	b.n	80010be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001086:	f7ff fbff 	bl	8000888 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d914      	bls.n	80010be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d10d      	bne.n	80010be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e007      	b.n	80010ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d0dc      	beq.n	8001086 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4906      	ldr	r1, [pc, #24]	@ (8001170 <__NVIC_EnableIRQ+0x34>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	@ 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff90 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff2d 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff42 	bl	8001120 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff90 	bl	80011c8 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5f 	bl	8001174 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff35 	bl	800113c <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e043      	b.n	8001392 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	4b22      	ldr	r3, [pc, #136]	@ (800139c <HAL_DMA_Init+0xa8>)
 8001312:	4413      	add	r3, r2
 8001314:	4a22      	ldr	r2, [pc, #136]	@ (80013a0 <HAL_DMA_Init+0xac>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	009a      	lsls	r2, r3, #2
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a1f      	ldr	r2, [pc, #124]	@ (80013a4 <HAL_DMA_Init+0xb0>)
 8001326:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2202      	movs	r2, #2
 800132c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800133e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001342:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800134c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	bffdfff8 	.word	0xbffdfff8
 80013a0:	cccccccd 	.word	0xcccccccd
 80013a4:	40020000 	.word	0x40020000

080013a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	2204      	movs	r2, #4
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d04f      	beq.n	8001470 <HAL_DMA_IRQHandler+0xc8>
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d04a      	beq.n	8001470 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0204 	bic.w	r2, r2, #4
 80013f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a66      	ldr	r2, [pc, #408]	@ (8001598 <HAL_DMA_IRQHandler+0x1f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d029      	beq.n	8001456 <HAL_DMA_IRQHandler+0xae>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a65      	ldr	r2, [pc, #404]	@ (800159c <HAL_DMA_IRQHandler+0x1f4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <HAL_DMA_IRQHandler+0xaa>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a63      	ldr	r2, [pc, #396]	@ (80015a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01a      	beq.n	800144c <HAL_DMA_IRQHandler+0xa4>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a62      	ldr	r2, [pc, #392]	@ (80015a4 <HAL_DMA_IRQHandler+0x1fc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d012      	beq.n	8001446 <HAL_DMA_IRQHandler+0x9e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a60      	ldr	r2, [pc, #384]	@ (80015a8 <HAL_DMA_IRQHandler+0x200>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00a      	beq.n	8001440 <HAL_DMA_IRQHandler+0x98>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5f      	ldr	r2, [pc, #380]	@ (80015ac <HAL_DMA_IRQHandler+0x204>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d102      	bne.n	800143a <HAL_DMA_IRQHandler+0x92>
 8001434:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001438:	e00e      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 800143a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800143e:	e00b      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 8001440:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001444:	e008      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 8001446:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800144a:	e005      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 800144c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001450:	e002      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 8001452:	2340      	movs	r3, #64	@ 0x40
 8001454:	e000      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 8001456:	2304      	movs	r3, #4
 8001458:	4a55      	ldr	r2, [pc, #340]	@ (80015b0 <HAL_DMA_IRQHandler+0x208>)
 800145a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8094 	beq.w	800158e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800146e:	e08e      	b.n	800158e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	2202      	movs	r2, #2
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d056      	beq.n	800152e <HAL_DMA_IRQHandler+0x186>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d051      	beq.n	800152e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0320 	and.w	r3, r3, #32
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10b      	bne.n	80014b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 020a 	bic.w	r2, r2, #10
 80014a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a38      	ldr	r2, [pc, #224]	@ (8001598 <HAL_DMA_IRQHandler+0x1f0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d029      	beq.n	800150e <HAL_DMA_IRQHandler+0x166>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a37      	ldr	r2, [pc, #220]	@ (800159c <HAL_DMA_IRQHandler+0x1f4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d022      	beq.n	800150a <HAL_DMA_IRQHandler+0x162>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a35      	ldr	r2, [pc, #212]	@ (80015a0 <HAL_DMA_IRQHandler+0x1f8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01a      	beq.n	8001504 <HAL_DMA_IRQHandler+0x15c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a34      	ldr	r2, [pc, #208]	@ (80015a4 <HAL_DMA_IRQHandler+0x1fc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d012      	beq.n	80014fe <HAL_DMA_IRQHandler+0x156>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a32      	ldr	r2, [pc, #200]	@ (80015a8 <HAL_DMA_IRQHandler+0x200>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00a      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x150>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a31      	ldr	r2, [pc, #196]	@ (80015ac <HAL_DMA_IRQHandler+0x204>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d102      	bne.n	80014f2 <HAL_DMA_IRQHandler+0x14a>
 80014ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80014f0:	e00e      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 80014f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014f6:	e00b      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 80014f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014fc:	e008      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 80014fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001502:	e005      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 8001504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001508:	e002      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 800150a:	2320      	movs	r3, #32
 800150c:	e000      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 800150e:	2302      	movs	r3, #2
 8001510:	4a27      	ldr	r2, [pc, #156]	@ (80015b0 <HAL_DMA_IRQHandler+0x208>)
 8001512:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d034      	beq.n	800158e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800152c:	e02f      	b.n	800158e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	2208      	movs	r2, #8
 8001534:	409a      	lsls	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d028      	beq.n	8001590 <HAL_DMA_IRQHandler+0x1e8>
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d023      	beq.n	8001590 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 020e 	bic.w	r2, r2, #14
 8001556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001560:	2101      	movs	r1, #1
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
    }
  }
  return;
 800158e:	bf00      	nop
 8001590:	bf00      	nop
}
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40020008 	.word	0x40020008
 800159c:	4002001c 	.word	0x4002001c
 80015a0:	40020030 	.word	0x40020030
 80015a4:	40020044 	.word	0x40020044
 80015a8:	40020058 	.word	0x40020058
 80015ac:	4002006c 	.word	0x4002006c
 80015b0:	40020000 	.word	0x40020000

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b08b      	sub	sp, #44	@ 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e169      	b.n	800189c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c8:	2201      	movs	r2, #1
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	f040 8158 	bne.w	8001896 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001854 <HAL_GPIO_Init+0x2a0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d05e      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 80015f0:	4a98      	ldr	r2, [pc, #608]	@ (8001854 <HAL_GPIO_Init+0x2a0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d875      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 80015f6:	4a98      	ldr	r2, [pc, #608]	@ (8001858 <HAL_GPIO_Init+0x2a4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d058      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 80015fc:	4a96      	ldr	r2, [pc, #600]	@ (8001858 <HAL_GPIO_Init+0x2a4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d86f      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 8001602:	4a96      	ldr	r2, [pc, #600]	@ (800185c <HAL_GPIO_Init+0x2a8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d052      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001608:	4a94      	ldr	r2, [pc, #592]	@ (800185c <HAL_GPIO_Init+0x2a8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d869      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800160e:	4a94      	ldr	r2, [pc, #592]	@ (8001860 <HAL_GPIO_Init+0x2ac>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d04c      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001614:	4a92      	ldr	r2, [pc, #584]	@ (8001860 <HAL_GPIO_Init+0x2ac>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d863      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800161a:	4a92      	ldr	r2, [pc, #584]	@ (8001864 <HAL_GPIO_Init+0x2b0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d046      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001620:	4a90      	ldr	r2, [pc, #576]	@ (8001864 <HAL_GPIO_Init+0x2b0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d85d      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 8001626:	2b12      	cmp	r3, #18
 8001628:	d82a      	bhi.n	8001680 <HAL_GPIO_Init+0xcc>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d859      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800162e:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <HAL_GPIO_Init+0x80>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	080016af 	.word	0x080016af
 8001638:	08001689 	.word	0x08001689
 800163c:	0800169b 	.word	0x0800169b
 8001640:	080016dd 	.word	0x080016dd
 8001644:	080016e3 	.word	0x080016e3
 8001648:	080016e3 	.word	0x080016e3
 800164c:	080016e3 	.word	0x080016e3
 8001650:	080016e3 	.word	0x080016e3
 8001654:	080016e3 	.word	0x080016e3
 8001658:	080016e3 	.word	0x080016e3
 800165c:	080016e3 	.word	0x080016e3
 8001660:	080016e3 	.word	0x080016e3
 8001664:	080016e3 	.word	0x080016e3
 8001668:	080016e3 	.word	0x080016e3
 800166c:	080016e3 	.word	0x080016e3
 8001670:	080016e3 	.word	0x080016e3
 8001674:	080016e3 	.word	0x080016e3
 8001678:	08001691 	.word	0x08001691
 800167c:	080016a5 	.word	0x080016a5
 8001680:	4a79      	ldr	r2, [pc, #484]	@ (8001868 <HAL_GPIO_Init+0x2b4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	623b      	str	r3, [r7, #32]
          break;
 800168e:	e029      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	3304      	adds	r3, #4
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e024      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	3308      	adds	r3, #8
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e01f      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	330c      	adds	r3, #12
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e01a      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b6:	2304      	movs	r3, #4
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e013      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	611a      	str	r2, [r3, #16]
          break;
 80016ce:	e009      	b.n	80016e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	615a      	str	r2, [r3, #20]
          break;
 80016da:	e003      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          break;
 80016e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2bff      	cmp	r3, #255	@ 0xff
 80016e8:	d801      	bhi.n	80016ee <HAL_GPIO_Init+0x13a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_Init+0x13e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2bff      	cmp	r3, #255	@ 0xff
 80016f8:	d802      	bhi.n	8001700 <HAL_GPIO_Init+0x14c>
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x152>
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	3b08      	subs	r3, #8
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	210f      	movs	r1, #15
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	431a      	orrs	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80b1 	beq.w	8001896 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001734:	4b4d      	ldr	r3, [pc, #308]	@ (800186c <HAL_GPIO_Init+0x2b8>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a4c      	ldr	r2, [pc, #304]	@ (800186c <HAL_GPIO_Init+0x2b8>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b4a      	ldr	r3, [pc, #296]	@ (800186c <HAL_GPIO_Init+0x2b8>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800174c:	4a48      	ldr	r2, [pc, #288]	@ (8001870 <HAL_GPIO_Init+0x2bc>)
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a40      	ldr	r2, [pc, #256]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d013      	beq.n	80017a0 <HAL_GPIO_Init+0x1ec>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3f      	ldr	r2, [pc, #252]	@ (8001878 <HAL_GPIO_Init+0x2c4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00d      	beq.n	800179c <HAL_GPIO_Init+0x1e8>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3e      	ldr	r2, [pc, #248]	@ (800187c <HAL_GPIO_Init+0x2c8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d007      	beq.n	8001798 <HAL_GPIO_Init+0x1e4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a3d      	ldr	r2, [pc, #244]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d101      	bne.n	8001794 <HAL_GPIO_Init+0x1e0>
 8001790:	2303      	movs	r3, #3
 8001792:	e006      	b.n	80017a2 <HAL_GPIO_Init+0x1ee>
 8001794:	2304      	movs	r3, #4
 8001796:	e004      	b.n	80017a2 <HAL_GPIO_Init+0x1ee>
 8001798:	2302      	movs	r3, #2
 800179a:	e002      	b.n	80017a2 <HAL_GPIO_Init+0x1ee>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_GPIO_Init+0x1ee>
 80017a0:	2300      	movs	r3, #0
 80017a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a4:	f002 0203 	and.w	r2, r2, #3
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	4093      	lsls	r3, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b2:	492f      	ldr	r1, [pc, #188]	@ (8001870 <HAL_GPIO_Init+0x2bc>)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	492c      	ldr	r1, [pc, #176]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017da:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4928      	ldr	r1, [pc, #160]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017f4:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	4922      	ldr	r1, [pc, #136]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001802:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	491e      	ldr	r1, [pc, #120]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 800180c:	4013      	ands	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4918      	ldr	r1, [pc, #96]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4914      	ldr	r1, [pc, #80]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 8001834:	4013      	ands	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d021      	beq.n	8001888 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	490e      	ldr	r1, [pc, #56]	@ (8001884 <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e021      	b.n	8001896 <HAL_GPIO_Init+0x2e2>
 8001852:	bf00      	nop
 8001854:	10320000 	.word	0x10320000
 8001858:	10310000 	.word	0x10310000
 800185c:	10220000 	.word	0x10220000
 8001860:	10210000 	.word	0x10210000
 8001864:	10120000 	.word	0x10120000
 8001868:	10110000 	.word	0x10110000
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000
 8001874:	40010800 	.word	0x40010800
 8001878:	40010c00 	.word	0x40010c00
 800187c:	40011000 	.word	0x40011000
 8001880:	40011400 	.word	0x40011400
 8001884:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	4909      	ldr	r1, [pc, #36]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 8001892:	4013      	ands	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	3301      	adds	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f47f ae8e 	bne.w	80015c8 <HAL_GPIO_Init+0x14>
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	372c      	adds	r7, #44	@ 0x2c
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e272      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8087 	beq.w	80019ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018dc:	4b92      	ldr	r3, [pc, #584]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d00c      	beq.n	8001902 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d112      	bne.n	800191a <HAL_RCC_OscConfig+0x5e>
 80018f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001900:	d10b      	bne.n	800191a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001902:	4b89      	ldr	r3, [pc, #548]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d06c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x12c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d168      	bne.n	80019e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e24c      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x76>
 8001924:	4b80      	ldr	r3, [pc, #512]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a7f      	ldr	r2, [pc, #508]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 800192a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e02e      	b.n	8001990 <HAL_RCC_OscConfig+0xd4>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x98>
 800193a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7a      	ldr	r2, [pc, #488]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b78      	ldr	r3, [pc, #480]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a77      	ldr	r2, [pc, #476]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 800194c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e01d      	b.n	8001990 <HAL_RCC_OscConfig+0xd4>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0xbc>
 800195e:	4b72      	ldr	r3, [pc, #456]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a71      	ldr	r2, [pc, #452]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0xd4>
 8001978:	4b6b      	ldr	r3, [pc, #428]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a6a      	ldr	r2, [pc, #424]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b68      	ldr	r3, [pc, #416]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a67      	ldr	r2, [pc, #412]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800198e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7fe ff76 	bl	8000888 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7fe ff72 	bl	8000888 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	@ 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e200      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0xe4>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7fe ff62 	bl	8000888 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7fe ff5e 	bl	8000888 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	@ 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1ec      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	4b53      	ldr	r3, [pc, #332]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x10c>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d063      	beq.n	8001abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a02:	4b49      	ldr	r3, [pc, #292]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d11c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x18c>
 8001a0e:	4b46      	ldr	r3, [pc, #280]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d116      	bne.n	8001a48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	4b43      	ldr	r3, [pc, #268]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x176>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1c0      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4939      	ldr	r1, [pc, #228]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <HAL_RCC_OscConfig+0x270>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7fe ff17 	bl	8000888 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7fe ff13 	bl	8000888 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1a1      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4927      	ldr	r1, [pc, #156]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b26      	ldr	r3, [pc, #152]	@ (8001b2c <HAL_RCC_OscConfig+0x270>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe fef6 	bl	8000888 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7fe fef2 	bl	8000888 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e180      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d03a      	beq.n	8001b40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d019      	beq.n	8001b06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7fe fed6 	bl	8000888 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7fe fed2 	bl	8000888 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e160      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f000 fa86 	bl	8002010 <RCC_Delay>
 8001b04:	e01c      	b.n	8001b40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_RCC_OscConfig+0x274>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0c:	f7fe febc 	bl	8000888 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b12:	e00f      	b.n	8001b34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b14:	f7fe feb8 	bl	8000888 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d908      	bls.n	8001b34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e146      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	42420000 	.word	0x42420000
 8001b30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	4b92      	ldr	r3, [pc, #584]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e9      	bne.n	8001b14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80a6 	beq.w	8001c9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b52:	4b8b      	ldr	r3, [pc, #556]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10d      	bne.n	8001b7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	4b88      	ldr	r3, [pc, #544]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a87      	ldr	r2, [pc, #540]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	61d3      	str	r3, [r2, #28]
 8001b6a:	4b85      	ldr	r3, [pc, #532]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	4b82      	ldr	r3, [pc, #520]	@ (8001d84 <HAL_RCC_OscConfig+0x4c8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b86:	4b7f      	ldr	r3, [pc, #508]	@ (8001d84 <HAL_RCC_OscConfig+0x4c8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d84 <HAL_RCC_OscConfig+0x4c8>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7fe fe79 	bl	8000888 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7fe fe75 	bl	8000888 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b64      	cmp	r3, #100	@ 0x64
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e103      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	4b75      	ldr	r3, [pc, #468]	@ (8001d84 <HAL_RCC_OscConfig+0x4c8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x312>
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	e02d      	b.n	8001c2a <HAL_RCC_OscConfig+0x36e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x334>
 8001bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a69      	ldr	r2, [pc, #420]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	4b67      	ldr	r3, [pc, #412]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a66      	ldr	r2, [pc, #408]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	e01c      	b.n	8001c2a <HAL_RCC_OscConfig+0x36e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d10c      	bne.n	8001c12 <HAL_RCC_OscConfig+0x356>
 8001bf8:	4b61      	ldr	r3, [pc, #388]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4a60      	ldr	r2, [pc, #384]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6213      	str	r3, [r2, #32]
 8001c04:	4b5e      	ldr	r3, [pc, #376]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4a5d      	ldr	r2, [pc, #372]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6213      	str	r3, [r2, #32]
 8001c10:	e00b      	b.n	8001c2a <HAL_RCC_OscConfig+0x36e>
 8001c12:	4b5b      	ldr	r3, [pc, #364]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a5a      	ldr	r2, [pc, #360]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	4b58      	ldr	r3, [pc, #352]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a57      	ldr	r2, [pc, #348]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d015      	beq.n	8001c5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7fe fe29 	bl	8000888 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7fe fe25 	bl	8000888 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e0b1      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	4b4b      	ldr	r3, [pc, #300]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ee      	beq.n	8001c3a <HAL_RCC_OscConfig+0x37e>
 8001c5c:	e014      	b.n	8001c88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7fe fe13 	bl	8000888 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7fe fe0f 	bl	8000888 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e09b      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7c:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ee      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d105      	bne.n	8001c9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a3b      	ldr	r2, [pc, #236]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8087 	beq.w	8001db2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca4:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d061      	beq.n	8001d74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d146      	bne.n	8001d46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb8:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <HAL_RCC_OscConfig+0x4cc>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fde3 	bl	8000888 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7fe fddf 	bl	8000888 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e06d      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cec:	d108      	bne.n	8001d00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	f023 020f 	bic.w	r2, r3, #15
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	4921      	ldr	r1, [pc, #132]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a19      	ldr	r1, [r3, #32]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	430b      	orrs	r3, r1
 8001d12:	491b      	ldr	r1, [pc, #108]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <HAL_RCC_OscConfig+0x4cc>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7fe fdb3 	bl	8000888 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7fe fdaf 	bl	8000888 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e03d      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46a>
 8001d44:	e035      	b.n	8001db2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_RCC_OscConfig+0x4cc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fd9c 	bl	8000888 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe fd98 	bl	8000888 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e026      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x498>
 8001d72:	e01e      	b.n	8001db2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e019      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40007000 	.word	0x40007000
 8001d88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_OscConfig+0x500>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0a0      	b.n	8001f16 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dec:	4b4c      	ldr	r3, [pc, #304]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001df2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e04:	4b46      	ldr	r3, [pc, #280]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a45      	ldr	r2, [pc, #276]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4940      	ldr	r1, [pc, #256]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d040      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b3a      	ldr	r3, [pc, #232]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e067      	b.n	8001f16 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e05b      	b.n	8001f16 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b30      	ldr	r3, [pc, #192]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e053      	b.n	8001f16 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4929      	ldr	r1, [pc, #164]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7fe fd02 	bl	8000888 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7fe fcfe 	bl	8000888 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e03b      	b.n	8001f16 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4915      	ldr	r1, [pc, #84]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	490d      	ldr	r1, [pc, #52]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eee:	f000 f81f 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_RCC_ClockConfig+0x160>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	4909      	ldr	r1, [pc, #36]	@ (8001f24 <HAL_RCC_ClockConfig+0x164>)
 8001f00:	5ccb      	ldrb	r3, [r1, r3]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <HAL_RCC_ClockConfig+0x168>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <HAL_RCC_ClockConfig+0x16c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fc78 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08002c2c 	.word	0x08002c2c
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x90>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x36>
 8001f5e:	e026      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f62:	613b      	str	r3, [r7, #16]
      break;
 8001f64:	e026      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	4a16      	ldr	r2, [pc, #88]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00f      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x90>)
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a11      	ldr	r2, [pc, #68]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f90:	fb03 f202 	mul.w	r2, r3, r2
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e004      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
      break;
 8001fac:	e002      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb0:	613b      	str	r3, [r7, #16]
      break;
 8001fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb4:	693b      	ldr	r3, [r7, #16]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	007a1200 	.word	0x007a1200
 8001fc8:	08002c44 	.word	0x08002c44
 8001fcc:	08002c54 	.word	0x08002c54
 8001fd0:	003d0900 	.word	0x003d0900

08001fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	@ (8001fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fec:	f7ff fff2 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0adb      	lsrs	r3, r3, #11
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	@ (800200c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	08002c3c 	.word	0x08002c3c

08002010 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002018:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <RCC_Delay+0x34>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <RCC_Delay+0x38>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a5b      	lsrs	r3, r3, #9
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800202c:	bf00      	nop
  }
  while (Delay --);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	60fa      	str	r2, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <RCC_Delay+0x1c>
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000000 	.word	0x20000000
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d07d      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206c:	4b47      	ldr	r3, [pc, #284]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b44      	ldr	r3, [pc, #272]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4a43      	ldr	r2, [pc, #268]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002082:	61d3      	str	r3, [r2, #28]
 8002084:	4b41      	ldr	r3, [pc, #260]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002090:	2301      	movs	r3, #1
 8002092:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b3e      	ldr	r3, [pc, #248]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d118      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ac:	f7fe fbec 	bl	8000888 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	e008      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b4:	f7fe fbe8 	bl	8000888 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	@ 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e05e      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d2:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d02e      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d027      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f0:	4b26      	ldr	r3, [pc, #152]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fa:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002100:	4b24      	ldr	r3, [pc, #144]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002106:	4a21      	ldr	r2, [pc, #132]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d014      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe fbb7 	bl	8000888 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fbb3 	bl	8000888 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e027      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ee      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	490f      	ldr	r1, [pc, #60]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800214e:	4313      	orrs	r3, r2
 8002150:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	4a0b      	ldr	r2, [pc, #44]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002162:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4903      	ldr	r1, [pc, #12]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	42420440 	.word	0x42420440

08002198 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d003      	beq.n	80021b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d033      	beq.n	800221c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80021b4:	e041      	b.n	800223a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      temp_reg = RCC->BDCR;
 80021b6:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c6:	d108      	bne.n	80021da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        frequency = LSE_VALUE;
 80021d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e01f      	b.n	800221a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e4:	d109      	bne.n	80021fa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80021e6:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = LSI_VALUE;
 80021f2:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e00f      	b.n	800221a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002204:	d118      	bne.n	8002238 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8002206:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d012      	beq.n	8002238 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        frequency = HSE_VALUE / 128U;
 8002212:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002216:	60fb      	str	r3, [r7, #12]
      break;
 8002218:	e00e      	b.n	8002238 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800221a:	e00d      	b.n	8002238 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800221c:	f7ff fee4 	bl	8001fe8 <HAL_RCC_GetPCLK2Freq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	0b9b      	lsrs	r3, r3, #14
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	3301      	adds	r3, #1
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	60fb      	str	r3, [r7, #12]
      break;
 8002236:	e000      	b.n	800223a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      break;
 8002238:	bf00      	nop
    }
  }
  return (frequency);
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e041      	b.n	80022de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fa0a 	bl	8000688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 f9b2 	bl	80025f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_TIM_PWM_Start+0x24>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e022      	b.n	8002352 <HAL_TIM_PWM_Start+0x6a>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d109      	bne.n	8002326 <HAL_TIM_PWM_Start+0x3e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	e015      	b.n	8002352 <HAL_TIM_PWM_Start+0x6a>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d109      	bne.n	8002340 <HAL_TIM_PWM_Start+0x58>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e008      	b.n	8002352 <HAL_TIM_PWM_Start+0x6a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e077      	b.n	800244a <HAL_TIM_PWM_Start+0x162>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <HAL_TIM_PWM_Start+0x82>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002368:	e013      	b.n	8002392 <HAL_TIM_PWM_Start+0xaa>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b04      	cmp	r3, #4
 800236e:	d104      	bne.n	800237a <HAL_TIM_PWM_Start+0x92>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002378:	e00b      	b.n	8002392 <HAL_TIM_PWM_Start+0xaa>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d104      	bne.n	800238a <HAL_TIM_PWM_Start+0xa2>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002388:	e003      	b.n	8002392 <HAL_TIM_PWM_Start+0xaa>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2201      	movs	r2, #1
 8002398:	6839      	ldr	r1, [r7, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fb84 	bl	8002aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002454 <HAL_TIM_PWM_Start+0x16c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00e      	beq.n	80023c8 <HAL_TIM_PWM_Start+0xe0>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002458 <HAL_TIM_PWM_Start+0x170>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_TIM_PWM_Start+0xe0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a28      	ldr	r2, [pc, #160]	@ (800245c <HAL_TIM_PWM_Start+0x174>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d004      	beq.n	80023c8 <HAL_TIM_PWM_Start+0xe0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a27      	ldr	r2, [pc, #156]	@ (8002460 <HAL_TIM_PWM_Start+0x178>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_TIM_PWM_Start+0xe4>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_TIM_PWM_Start+0xe6>
 80023cc:	2300      	movs	r3, #0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_TIM_PWM_Start+0xfa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002454 <HAL_TIM_PWM_Start+0x16c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_TIM_PWM_Start+0x12c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f4:	d00e      	beq.n	8002414 <HAL_TIM_PWM_Start+0x12c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002464 <HAL_TIM_PWM_Start+0x17c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_TIM_PWM_Start+0x12c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <HAL_TIM_PWM_Start+0x180>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_TIM_PWM_Start+0x12c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <HAL_TIM_PWM_Start+0x170>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d111      	bne.n	8002438 <HAL_TIM_PWM_Start+0x150>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b06      	cmp	r3, #6
 8002424:	d010      	beq.n	8002448 <HAL_TIM_PWM_Start+0x160>
    {
      __HAL_TIM_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002436:	e007      	b.n	8002448 <HAL_TIM_PWM_Start+0x160>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800
 8002464:	40000400 	.word	0x40000400
 8002468:	40000800 	.word	0x40000800

0800246c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002486:	2302      	movs	r3, #2
 8002488:	e0ae      	b.n	80025e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	f200 809f 	bhi.w	80025d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800249a:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024d5 	.word	0x080024d5
 80024a4:	080025d9 	.word	0x080025d9
 80024a8:	080025d9 	.word	0x080025d9
 80024ac:	080025d9 	.word	0x080025d9
 80024b0:	08002515 	.word	0x08002515
 80024b4:	080025d9 	.word	0x080025d9
 80024b8:	080025d9 	.word	0x080025d9
 80024bc:	080025d9 	.word	0x080025d9
 80024c0:	08002557 	.word	0x08002557
 80024c4:	080025d9 	.word	0x080025d9
 80024c8:	080025d9 	.word	0x080025d9
 80024cc:	080025d9 	.word	0x080025d9
 80024d0:	08002597 	.word	0x08002597
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f908 	bl	80026f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0208 	orr.w	r2, r2, #8
 80024ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6999      	ldr	r1, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	619a      	str	r2, [r3, #24]
      break;
 8002512:	e064      	b.n	80025de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f96c 	bl	80027f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800252e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6999      	ldr	r1, [r3, #24]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	021a      	lsls	r2, r3, #8
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	619a      	str	r2, [r3, #24]
      break;
 8002554:	e043      	b.n	80025de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f9c7 	bl	80028f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0208 	orr.w	r2, r2, #8
 8002570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0204 	bic.w	r2, r2, #4
 8002580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69d9      	ldr	r1, [r3, #28]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	61da      	str	r2, [r3, #28]
      break;
 8002594:	e023      	b.n	80025de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fa23 	bl	80029e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69d9      	ldr	r1, [r3, #28]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	021a      	lsls	r2, r3, #8
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	61da      	str	r2, [r3, #28]
      break;
 80025d6:	e002      	b.n	80025de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	75fb      	strb	r3, [r7, #23]
      break;
 80025dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a35      	ldr	r2, [pc, #212]	@ (80026d8 <TIM_Base_SetConfig+0xe8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00b      	beq.n	8002620 <TIM_Base_SetConfig+0x30>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260e:	d007      	beq.n	8002620 <TIM_Base_SetConfig+0x30>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a32      	ldr	r2, [pc, #200]	@ (80026dc <TIM_Base_SetConfig+0xec>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_Base_SetConfig+0x30>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a31      	ldr	r2, [pc, #196]	@ (80026e0 <TIM_Base_SetConfig+0xf0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d108      	bne.n	8002632 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a28      	ldr	r2, [pc, #160]	@ (80026d8 <TIM_Base_SetConfig+0xe8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d017      	beq.n	800266a <TIM_Base_SetConfig+0x7a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002640:	d013      	beq.n	800266a <TIM_Base_SetConfig+0x7a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a25      	ldr	r2, [pc, #148]	@ (80026dc <TIM_Base_SetConfig+0xec>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00f      	beq.n	800266a <TIM_Base_SetConfig+0x7a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a24      	ldr	r2, [pc, #144]	@ (80026e0 <TIM_Base_SetConfig+0xf0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0x7a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <TIM_Base_SetConfig+0xf4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x7a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <TIM_Base_SetConfig+0xf8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x7a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a21      	ldr	r2, [pc, #132]	@ (80026ec <TIM_Base_SetConfig+0xfc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <TIM_Base_SetConfig+0xe8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00b      	beq.n	80026c0 <TIM_Base_SetConfig+0xd0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a0e      	ldr	r2, [pc, #56]	@ (80026e4 <TIM_Base_SetConfig+0xf4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <TIM_Base_SetConfig+0xd0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <TIM_Base_SetConfig+0xf8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d003      	beq.n	80026c0 <TIM_Base_SetConfig+0xd0>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0c      	ldr	r2, [pc, #48]	@ (80026ec <TIM_Base_SetConfig+0xfc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	615a      	str	r2, [r3, #20]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40000800 	.word	0x40000800
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40014800 	.word	0x40014800

080026f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f023 0201 	bic.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 0302 	bic.w	r3, r3, #2
 8002738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a28      	ldr	r2, [pc, #160]	@ (80027e8 <TIM_OC1_SetConfig+0xf8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_OC1_SetConfig+0x74>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a27      	ldr	r2, [pc, #156]	@ (80027ec <TIM_OC1_SetConfig+0xfc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <TIM_OC1_SetConfig+0x74>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a26      	ldr	r2, [pc, #152]	@ (80027f0 <TIM_OC1_SetConfig+0x100>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_OC1_SetConfig+0x74>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a25      	ldr	r2, [pc, #148]	@ (80027f4 <TIM_OC1_SetConfig+0x104>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10c      	bne.n	800277e <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0308 	bic.w	r3, r3, #8
 800276a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a19      	ldr	r2, [pc, #100]	@ (80027e8 <TIM_OC1_SetConfig+0xf8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <TIM_OC1_SetConfig+0xae>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a18      	ldr	r2, [pc, #96]	@ (80027ec <TIM_OC1_SetConfig+0xfc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <TIM_OC1_SetConfig+0xae>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <TIM_OC1_SetConfig+0x100>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_OC1_SetConfig+0xae>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a16      	ldr	r2, [pc, #88]	@ (80027f4 <TIM_OC1_SetConfig+0x104>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d111      	bne.n	80027c2 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	621a      	str	r2, [r3, #32]
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40014000 	.word	0x40014000
 80027f0:	40014400 	.word	0x40014400
 80027f4:	40014800 	.word	0x40014800

080027f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f023 0210 	bic.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800282e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f023 0320 	bic.w	r3, r3, #32
 8002842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <TIM_OC2_SetConfig+0xe8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d10d      	bne.n	8002874 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800285e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a1a      	ldr	r2, [pc, #104]	@ (80028e0 <TIM_OC2_SetConfig+0xe8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00b      	beq.n	8002894 <TIM_OC2_SetConfig+0x9c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a19      	ldr	r2, [pc, #100]	@ (80028e4 <TIM_OC2_SetConfig+0xec>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_OC2_SetConfig+0x9c>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <TIM_OC2_SetConfig+0xf0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <TIM_OC2_SetConfig+0x9c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a17      	ldr	r2, [pc, #92]	@ (80028ec <TIM_OC2_SetConfig+0xf4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d113      	bne.n	80028bc <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800289a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40014000 	.word	0x40014000
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800

080028f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a23      	ldr	r2, [pc, #140]	@ (80029d8 <TIM_OC3_SetConfig+0xe8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10d      	bne.n	800296a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1a      	ldr	r2, [pc, #104]	@ (80029d8 <TIM_OC3_SetConfig+0xe8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00b      	beq.n	800298a <TIM_OC3_SetConfig+0x9a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a19      	ldr	r2, [pc, #100]	@ (80029dc <TIM_OC3_SetConfig+0xec>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <TIM_OC3_SetConfig+0x9a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a18      	ldr	r2, [pc, #96]	@ (80029e0 <TIM_OC3_SetConfig+0xf0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d003      	beq.n	800298a <TIM_OC3_SetConfig+0x9a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a17      	ldr	r2, [pc, #92]	@ (80029e4 <TIM_OC3_SetConfig+0xf4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d113      	bne.n	80029b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40014400 	.word	0x40014400
 80029e4:	40014800 	.word	0x40014800

080029e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	031b      	lsls	r3, r3, #12
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <TIM_OC4_SetConfig+0xb0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00b      	beq.n	8002a60 <TIM_OC4_SetConfig+0x78>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a14      	ldr	r2, [pc, #80]	@ (8002a9c <TIM_OC4_SetConfig+0xb4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <TIM_OC4_SetConfig+0x78>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a13      	ldr	r2, [pc, #76]	@ (8002aa0 <TIM_OC4_SetConfig+0xb8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d003      	beq.n	8002a60 <TIM_OC4_SetConfig+0x78>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a12      	ldr	r2, [pc, #72]	@ (8002aa4 <TIM_OC4_SetConfig+0xbc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d109      	bne.n	8002a74 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	019b      	lsls	r3, r3, #6
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	40014800 	.word	0x40014800

08002aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2201      	movs	r2, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1a      	ldr	r2, [r3, #32]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e04b      	b.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b54:	d00e      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a15      	ldr	r2, [pc, #84]	@ (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a13      	ldr	r2, [pc, #76]	@ (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a12      	ldr	r2, [pc, #72]	@ (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10c      	bne.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	40014000 	.word	0x40014000

08002bbc <memset>:
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4402      	add	r2, r0
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <memset+0xa>
 8002bc4:	4770      	bx	lr
 8002bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bca:	e7f9      	b.n	8002bc0 <memset+0x4>

08002bcc <__libc_init_array>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	2600      	movs	r6, #0
 8002bd0:	4d0c      	ldr	r5, [pc, #48]	@ (8002c04 <__libc_init_array+0x38>)
 8002bd2:	4c0d      	ldr	r4, [pc, #52]	@ (8002c08 <__libc_init_array+0x3c>)
 8002bd4:	1b64      	subs	r4, r4, r5
 8002bd6:	10a4      	asrs	r4, r4, #2
 8002bd8:	42a6      	cmp	r6, r4
 8002bda:	d109      	bne.n	8002bf0 <__libc_init_array+0x24>
 8002bdc:	f000 f81a 	bl	8002c14 <_init>
 8002be0:	2600      	movs	r6, #0
 8002be2:	4d0a      	ldr	r5, [pc, #40]	@ (8002c0c <__libc_init_array+0x40>)
 8002be4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c10 <__libc_init_array+0x44>)
 8002be6:	1b64      	subs	r4, r4, r5
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	42a6      	cmp	r6, r4
 8002bec:	d105      	bne.n	8002bfa <__libc_init_array+0x2e>
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf4:	4798      	blx	r3
 8002bf6:	3601      	adds	r6, #1
 8002bf8:	e7ee      	b.n	8002bd8 <__libc_init_array+0xc>
 8002bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfe:	4798      	blx	r3
 8002c00:	3601      	adds	r6, #1
 8002c02:	e7f2      	b.n	8002bea <__libc_init_array+0x1e>
 8002c04:	08002c64 	.word	0x08002c64
 8002c08:	08002c64 	.word	0x08002c64
 8002c0c:	08002c64 	.word	0x08002c64
 8002c10:	08002c68 	.word	0x08002c68

08002c14 <_init>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr

08002c20 <_fini>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr
