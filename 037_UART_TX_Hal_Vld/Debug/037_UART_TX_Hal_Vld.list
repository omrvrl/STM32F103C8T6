
037_UART_TX_Hal_Vld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f8c  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800215c  0800215c  0000315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ec  080021ec  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  080021ec  080021ec  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021ec  080021ec  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ec  080021ec  000031ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021f0  080021f0  000031f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080021f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000005c  08002250  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08002250  00004244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063d3  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001329  00000000  00000000  0000a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000049a  00000000  00000000  0000bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ffcb  00000000  00000000  0000c232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a6b  00000000  00000000  0001c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060eeb  00000000  00000000  00023c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00084b53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c70  00000000  00000000  00084b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00086808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002144 	.word	0x08002144

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002144 	.word	0x08002144

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f9d9 	bl	80005ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f828 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f000 f894 	bl	8000348 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000220:	f000 f868 	bl	80002f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//  tx_buff[0] = "HELLO WORLD\n";
  HAL_UART_Transmit(&huart3,(uint8_t*) tx_buff,sprintf(tx_buff, "hello world\n"), 100);
 8000224:	490d      	ldr	r1, [pc, #52]	@ (800025c <main+0x4c>)
 8000226:	480e      	ldr	r0, [pc, #56]	@ (8000260 <main+0x50>)
 8000228:	f001 fadc 	bl	80017e4 <siprintf>
 800022c:	4603      	mov	r3, r0
 800022e:	b29a      	uxth	r2, r3
 8000230:	2364      	movs	r3, #100	@ 0x64
 8000232:	490b      	ldr	r1, [pc, #44]	@ (8000260 <main+0x50>)
 8000234:	480b      	ldr	r0, [pc, #44]	@ (8000264 <main+0x54>)
 8000236:	f001 f8ff 	bl	8001438 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff, sprintf(tx_buff, "Omer Faruk Varol\n"), 100);
 800023a:	490b      	ldr	r1, [pc, #44]	@ (8000268 <main+0x58>)
 800023c:	4808      	ldr	r0, [pc, #32]	@ (8000260 <main+0x50>)
 800023e:	f001 fad1 	bl	80017e4 <siprintf>
 8000242:	4603      	mov	r3, r0
 8000244:	b29a      	uxth	r2, r3
 8000246:	2364      	movs	r3, #100	@ 0x64
 8000248:	4905      	ldr	r1, [pc, #20]	@ (8000260 <main+0x50>)
 800024a:	4806      	ldr	r0, [pc, #24]	@ (8000264 <main+0x54>)
 800024c:	f001 f8f4 	bl	8001438 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000250:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000254:	f000 fa12 	bl	800067c <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff, sprintf(tx_buff, "Omer Faruk Varol\n"), 100);
 8000258:	bf00      	nop
 800025a:	e7ee      	b.n	800023a <main+0x2a>
 800025c:	0800215c 	.word	0x0800215c
 8000260:	200000c0 	.word	0x200000c0
 8000264:	20000078 	.word	0x20000078
 8000268:	0800216c 	.word	0x0800216c

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	@ 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fad2 	bl	8001824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	2302      	movs	r3, #2
 800029e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80002a6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80002aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fc6f 	bl	8000b94 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002bc:	f000 f872 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fedd 	bl	8001098 <HAL_RCC_ClockConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80002e4:	f000 f85e 	bl	80003a4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002e8:	f000 ff8e 	bl	8001208 <HAL_RCC_EnableCSS>
}
 80002ec:	bf00      	nop
 80002ee:	3740      	adds	r7, #64	@ 0x40
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002f8:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 80002fa:	4a12      	ldr	r2, [pc, #72]	@ (8000344 <MX_USART3_UART_Init+0x50>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80002fe:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 8000300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000304:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000318:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 800031a:	2208      	movs	r2, #8
 800031c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	@ (8000340 <MX_USART3_UART_Init+0x4c>)
 800032c:	f001 f834 	bl	8001398 <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000336:	f000 f835 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000078 	.word	0x20000078
 8000344:	40004800 	.word	0x40004800

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034e:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a13      	ldr	r2, [pc, #76]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000354:	f043 0320 	orr.w	r3, r3, #32
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <MX_GPIO_Init+0x58>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0320 	and.w	r3, r3, #32
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <MX_GPIO_Init+0x58>)
 800036c:	f043 0308 	orr.w	r3, r3, #8
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0308 	and.w	r3, r3, #8
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a07      	ldr	r2, [pc, #28]	@ (80003a0 <MX_GPIO_Init+0x58>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <MX_GPIO_Init+0x58>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <Error_Handler+0x8>

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b15      	ldr	r3, [pc, #84]	@ (800040c <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a14      	ldr	r2, [pc, #80]	@ (800040c <HAL_MspInit+0x5c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	@ (800040c <HAL_MspInit+0x5c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <HAL_MspInit+0x60>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	@ (8000410 <HAL_MspInit+0x60>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <HAL_UART_MspInit+0x8c>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d131      	bne.n	8000498 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	4a1a      	ldr	r2, [pc, #104]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 800043a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800043e:	61d3      	str	r3, [r2, #28]
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0308 	and.w	r3, r3, #8
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	2302      	movs	r3, #2
 800046c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046e:	2303      	movs	r3, #3
 8000470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	480b      	ldr	r0, [pc, #44]	@ (80004a8 <HAL_UART_MspInit+0x94>)
 800047a:	f000 fa07 	bl	800088c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800047e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <HAL_UART_MspInit+0x94>)
 8000494:	f000 f9fa 	bl	800088c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40004800 	.word	0x40004800
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010c00 	.word	0x40010c00

080004ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80004b0:	f000 ff3a 	bl	8001328 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <NMI_Handler+0x8>

080004b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <MemManage_Handler+0x4>

080004c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000500:	f000 f8a0 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f001 f97c 	bl	8001834 <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	@ (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	@ (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20002000 	.word	0x20002000
 8000568:	00000400 	.word	0x00000400
 800056c:	200000f4 	.word	0x200000f4
 8000570:	20000248 	.word	0x20000248

08000574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f7ff fff8 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000586:	490c      	ldr	r1, [pc, #48]	@ (80005b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a09      	ldr	r2, [pc, #36]	@ (80005c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800059c:	4c09      	ldr	r4, [pc, #36]	@ (80005c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f001 f949 	bl	8001840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff fe2f 	bl	8000210 <main>
  bx lr
 80005b2:	4770      	bx	lr
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005bc:	080021f4 	.word	0x080021f4
  ldr r2, =_sbss
 80005c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005c4:	20000244 	.word	0x20000244

080005c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_IRQHandler>

080005ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f000 f928 	bl	8000824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d4:	200f      	movs	r0, #15
 80005d6:	f000 f805 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005da:	f7ff fee9 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f935 	bl	8000872 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f90b 	bl	800083a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000008 	.word	0x20000008
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	@ (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000008 	.word	0x20000008
 8000664:	200000f8 	.word	0x200000f8

08000668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	@ (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	200000f8 	.word	0x200000f8

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff fff0 	bl	8000668 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffe0 	bl	8000668 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	@ (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	@ (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	@ 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	@ 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007f0:	d301      	bcc.n	80007f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00f      	b.n	8000816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <SysTick_Config+0x40>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fe:	210f      	movs	r1, #15
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f7ff ff90 	bl	8000728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <SysTick_Config+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080e:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <SysTick_Config+0x40>)
 8000810:	2207      	movs	r2, #7
 8000812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	e000e010 	.word	0xe000e010

08000824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff49 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800084c:	f7ff ff5e 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	6978      	ldr	r0, [r7, #20]
 8000858:	f7ff ff90 	bl	800077c <NVIC_EncodePriority>
 800085c:	4602      	mov	r2, r0
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5f 	bl	8000728 <__NVIC_SetPriority>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffb0 	bl	80007e0 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088c:	b480      	push	{r7}
 800088e:	b08b      	sub	sp, #44	@ 0x2c
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089e:	e169      	b.n	8000b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008a0:	2201      	movs	r2, #1
 80008a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69fa      	ldr	r2, [r7, #28]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f040 8158 	bne.w	8000b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	4a9a      	ldr	r2, [pc, #616]	@ (8000b2c <HAL_GPIO_Init+0x2a0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d05e      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008c8:	4a98      	ldr	r2, [pc, #608]	@ (8000b2c <HAL_GPIO_Init+0x2a0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d875      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008ce:	4a98      	ldr	r2, [pc, #608]	@ (8000b30 <HAL_GPIO_Init+0x2a4>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d058      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008d4:	4a96      	ldr	r2, [pc, #600]	@ (8000b30 <HAL_GPIO_Init+0x2a4>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d86f      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008da:	4a96      	ldr	r2, [pc, #600]	@ (8000b34 <HAL_GPIO_Init+0x2a8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d052      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008e0:	4a94      	ldr	r2, [pc, #592]	@ (8000b34 <HAL_GPIO_Init+0x2a8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d869      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008e6:	4a94      	ldr	r2, [pc, #592]	@ (8000b38 <HAL_GPIO_Init+0x2ac>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d04c      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008ec:	4a92      	ldr	r2, [pc, #584]	@ (8000b38 <HAL_GPIO_Init+0x2ac>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d863      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008f2:	4a92      	ldr	r2, [pc, #584]	@ (8000b3c <HAL_GPIO_Init+0x2b0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d046      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008f8:	4a90      	ldr	r2, [pc, #576]	@ (8000b3c <HAL_GPIO_Init+0x2b0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d85d      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d82a      	bhi.n	8000958 <HAL_GPIO_Init+0xcc>
 8000902:	2b12      	cmp	r3, #18
 8000904:	d859      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 8000906:	a201      	add	r2, pc, #4	@ (adr r2, 800090c <HAL_GPIO_Init+0x80>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000987 	.word	0x08000987
 8000910:	08000961 	.word	0x08000961
 8000914:	08000973 	.word	0x08000973
 8000918:	080009b5 	.word	0x080009b5
 800091c:	080009bb 	.word	0x080009bb
 8000920:	080009bb 	.word	0x080009bb
 8000924:	080009bb 	.word	0x080009bb
 8000928:	080009bb 	.word	0x080009bb
 800092c:	080009bb 	.word	0x080009bb
 8000930:	080009bb 	.word	0x080009bb
 8000934:	080009bb 	.word	0x080009bb
 8000938:	080009bb 	.word	0x080009bb
 800093c:	080009bb 	.word	0x080009bb
 8000940:	080009bb 	.word	0x080009bb
 8000944:	080009bb 	.word	0x080009bb
 8000948:	080009bb 	.word	0x080009bb
 800094c:	080009bb 	.word	0x080009bb
 8000950:	08000969 	.word	0x08000969
 8000954:	0800097d 	.word	0x0800097d
 8000958:	4a79      	ldr	r2, [pc, #484]	@ (8000b40 <HAL_GPIO_Init+0x2b4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d013      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800095e:	e02c      	b.n	80009ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e029      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	3304      	adds	r3, #4
 800096e:	623b      	str	r3, [r7, #32]
          break;
 8000970:	e024      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	3308      	adds	r3, #8
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e01f      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	330c      	adds	r3, #12
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e01a      	b.n	80009bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098e:	2304      	movs	r3, #4
 8000990:	623b      	str	r3, [r7, #32]
          break;
 8000992:	e013      	b.n	80009bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d105      	bne.n	80009a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	611a      	str	r2, [r3, #16]
          break;
 80009a6:	e009      	b.n	80009bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	615a      	str	r2, [r3, #20]
          break;
 80009b2:	e003      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
          break;
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x130>
          break;
 80009ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2bff      	cmp	r3, #255	@ 0xff
 80009c0:	d801      	bhi.n	80009c6 <HAL_GPIO_Init+0x13a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	e001      	b.n	80009ca <HAL_GPIO_Init+0x13e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3304      	adds	r3, #4
 80009ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2bff      	cmp	r3, #255	@ 0xff
 80009d0:	d802      	bhi.n	80009d8 <HAL_GPIO_Init+0x14c>
 80009d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0x152>
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	3b08      	subs	r3, #8
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	210f      	movs	r1, #15
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	401a      	ands	r2, r3
 80009f0:	6a39      	ldr	r1, [r7, #32]
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	431a      	orrs	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 80b1 	beq.w	8000b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a4c      	ldr	r2, [pc, #304]	@ (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b4a      	ldr	r3, [pc, #296]	@ (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a24:	4a48      	ldr	r2, [pc, #288]	@ (8000b48 <HAL_GPIO_Init+0x2bc>)
 8000a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	220f      	movs	r2, #15
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a40      	ldr	r2, [pc, #256]	@ (8000b4c <HAL_GPIO_Init+0x2c0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d013      	beq.n	8000a78 <HAL_GPIO_Init+0x1ec>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a3f      	ldr	r2, [pc, #252]	@ (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d00d      	beq.n	8000a74 <HAL_GPIO_Init+0x1e8>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d007      	beq.n	8000a70 <HAL_GPIO_Init+0x1e4>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a3d      	ldr	r2, [pc, #244]	@ (8000b58 <HAL_GPIO_Init+0x2cc>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d101      	bne.n	8000a6c <HAL_GPIO_Init+0x1e0>
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	e004      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	f002 0203 	and.w	r2, r2, #3
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	4093      	lsls	r3, r2
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a8a:	492f      	ldr	r1, [pc, #188]	@ (8000b48 <HAL_GPIO_Init+0x2bc>)
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	492c      	ldr	r1, [pc, #176]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	608b      	str	r3, [r1, #8]
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	4928      	ldr	r1, [pc, #160]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000acc:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	4922      	ldr	r1, [pc, #136]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	60cb      	str	r3, [r1, #12]
 8000ad8:	e006      	b.n	8000ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000adc:	68da      	ldr	r2, [r3, #12]
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	491e      	ldr	r1, [pc, #120]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	4918      	ldr	r1, [pc, #96]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	604b      	str	r3, [r1, #4]
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	4914      	ldr	r1, [pc, #80]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d021      	beq.n	8000b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	490e      	ldr	r1, [pc, #56]	@ (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	600b      	str	r3, [r1, #0]
 8000b28:	e021      	b.n	8000b6e <HAL_GPIO_Init+0x2e2>
 8000b2a:	bf00      	nop
 8000b2c:	10320000 	.word	0x10320000
 8000b30:	10310000 	.word	0x10310000
 8000b34:	10220000 	.word	0x10220000
 8000b38:	10210000 	.word	0x10210000
 8000b3c:	10120000 	.word	0x10120000
 8000b40:	10110000 	.word	0x10110000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40011400 	.word	0x40011400
 8000b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <HAL_GPIO_Init+0x304>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	4909      	ldr	r1, [pc, #36]	@ (8000b90 <HAL_GPIO_Init+0x304>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b70:	3301      	adds	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f47f ae8e 	bne.w	80008a0 <HAL_GPIO_Init+0x14>
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	372c      	adds	r7, #44	@ 0x2c
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40010400 	.word	0x40010400

08000b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e272      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8087 	beq.w	8000cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb4:	4b92      	ldr	r3, [pc, #584]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d00c      	beq.n	8000bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d112      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
 8000bcc:	4b8c      	ldr	r3, [pc, #560]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	4b89      	ldr	r3, [pc, #548]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d06c      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d168      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e24c      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bfa:	d106      	bne.n	8000c0a <HAL_RCC_OscConfig+0x76>
 8000bfc:	4b80      	ldr	r3, [pc, #512]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a7f      	ldr	r2, [pc, #508]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e02e      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x98>
 8000c12:	4b7b      	ldr	r3, [pc, #492]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a7a      	ldr	r2, [pc, #488]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	4b78      	ldr	r3, [pc, #480]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a77      	ldr	r2, [pc, #476]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e01d      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0xbc>
 8000c36:	4b72      	ldr	r3, [pc, #456]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a71      	ldr	r2, [pc, #452]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b6f      	ldr	r3, [pc, #444]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a6e      	ldr	r2, [pc, #440]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e00b      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c50:	4b6b      	ldr	r3, [pc, #428]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a6a      	ldr	r2, [pc, #424]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b68      	ldr	r3, [pc, #416]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a67      	ldr	r2, [pc, #412]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d013      	beq.n	8000c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fcfa 	bl	8000668 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c78:	f7ff fcf6 	bl	8000668 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b64      	cmp	r3, #100	@ 0x64
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e200      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0xe4>
 8000c96:	e014      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fce6 	bl	8000668 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fce2 	bl	8000668 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	@ 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e1ec      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	4b53      	ldr	r3, [pc, #332]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x10c>
 8000cbe:	e000      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d063      	beq.n	8000d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cce:	4b4c      	ldr	r3, [pc, #304]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cda:	4b49      	ldr	r3, [pc, #292]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d11c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
 8000ce6:	4b46      	ldr	r3, [pc, #280]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d116      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	4b43      	ldr	r3, [pc, #268]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d001      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e1c0      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4939      	ldr	r1, [pc, #228]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	e03a      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fc9b 	bl	8000668 <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d36:	f7ff fc97 	bl	8000668 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e1a1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4927      	ldr	r1, [pc, #156]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc7a 	bl	8000668 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc76 	bl	8000668 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e180      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03a      	beq.n	8000e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d019      	beq.n	8000dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc5a 	bl	8000668 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc56 	bl	8000668 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e160      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 faba 	bl	8001350 <RCC_Delay>
 8000ddc:	e01c      	b.n	8000e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de4:	f7ff fc40 	bl	8000668 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dea:	e00f      	b.n	8000e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc3c 	bl	8000668 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d908      	bls.n	8000e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e146      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	42420000 	.word	0x42420000
 8000e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0c:	4b92      	ldr	r3, [pc, #584]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1e9      	bne.n	8000dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80a6 	beq.w	8000f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10d      	bne.n	8000e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b88      	ldr	r3, [pc, #544]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a87      	ldr	r2, [pc, #540]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b85      	ldr	r3, [pc, #532]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	4b82      	ldr	r3, [pc, #520]	@ (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d118      	bne.n	8000e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5e:	4b7f      	ldr	r3, [pc, #508]	@ (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a7e      	ldr	r2, [pc, #504]	@ (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fbfd 	bl	8000668 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e72:	f7ff fbf9 	bl	8000668 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	@ 0x64
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e103      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	4b75      	ldr	r3, [pc, #468]	@ (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x312>
 8000e98:	4b6f      	ldr	r3, [pc, #444]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	e02d      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x334>
 8000eae:	4b6a      	ldr	r3, [pc, #424]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a69      	ldr	r2, [pc, #420]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	4b67      	ldr	r3, [pc, #412]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a66      	ldr	r2, [pc, #408]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6213      	str	r3, [r2, #32]
 8000ec6:	e01c      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d10c      	bne.n	8000eea <HAL_RCC_OscConfig+0x356>
 8000ed0:	4b61      	ldr	r3, [pc, #388]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a60      	ldr	r2, [pc, #384]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	4b5e      	ldr	r3, [pc, #376]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6213      	str	r3, [r2, #32]
 8000ee8:	e00b      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000eea:	4b5b      	ldr	r3, [pc, #364]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a5a      	ldr	r2, [pc, #360]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	4b58      	ldr	r3, [pc, #352]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a57      	ldr	r2, [pc, #348]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d015      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fbad 	bl	8000668 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fba9 	bl	8000668 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e0b1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	4b4b      	ldr	r3, [pc, #300]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ee      	beq.n	8000f12 <HAL_RCC_OscConfig+0x37e>
 8000f34:	e014      	b.n	8000f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fb97 	bl	8000668 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fb93 	bl	8000668 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e09b      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	4b40      	ldr	r3, [pc, #256]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ee      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d105      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f66:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8087 	beq.w	800108a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f7c:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d061      	beq.n	800104c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d146      	bne.n	800101e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f90:	4b33      	ldr	r3, [pc, #204]	@ (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fb67 	bl	8000668 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fb63 	bl	8000668 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e06d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb0:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f0      	bne.n	8000f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc4:	d108      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc6:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fca:	f023 020f 	bic.w	r2, r3, #15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4921      	ldr	r1, [pc, #132]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a19      	ldr	r1, [r3, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	491b      	ldr	r1, [pc, #108]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fb37 	bl	8000668 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fb33 	bl	8000668 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e03d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x46a>
 800101c:	e035      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fb20 	bl	8000668 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fb1c 	bl	8000668 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e026      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x498>
 800104a:	e01e      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e019      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8001058:	40021000 	.word	0x40021000
 800105c:	40007000 	.word	0x40007000
 8001060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_RCC_OscConfig+0x500>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	429a      	cmp	r2, r3
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0a0      	b.n	80011ee <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d020      	beq.n	80010fa <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c4:	4b4c      	ldr	r3, [pc, #304]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80010ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010dc:	4b46      	ldr	r3, [pc, #280]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a45      	ldr	r2, [pc, #276]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80010e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e8:	4b43      	ldr	r3, [pc, #268]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4940      	ldr	r1, [pc, #256]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d040      	beq.n	8001188 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d115      	bne.n	8001146 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e067      	b.n	80011ee <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d107      	bne.n	8001136 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001126:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e05b      	b.n	80011ee <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001136:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e053      	b.n	80011ee <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001146:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f023 0203 	bic.w	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4929      	ldr	r1, [pc, #164]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001158:	f7ff fa86 	bl	8000668 <HAL_GetTick>
 800115c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	e00a      	b.n	8001176 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001160:	f7ff fa82 	bl	8000668 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e03b      	b.n	80011ee <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 020c 	and.w	r2, r3, #12
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	429a      	cmp	r2, r3
 8001186:	d1eb      	bne.n	8001160 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	4915      	ldr	r1, [pc, #84]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	490d      	ldr	r1, [pc, #52]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011c6:	f000 f82b 	bl	8001220 <HAL_RCC_GetSysClockFreq>
 80011ca:	4602      	mov	r2, r0
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_RCC_ClockConfig+0x160>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4909      	ldr	r1, [pc, #36]	@ (80011fc <HAL_RCC_ClockConfig+0x164>)
 80011d8:	5ccb      	ldrb	r3, [r1, r3]
 80011da:	fa22 f303 	lsr.w	r3, r2, r3
 80011de:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <HAL_RCC_ClockConfig+0x168>)
 80011e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_RCC_ClockConfig+0x16c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9fc 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	08002180 	.word	0x08002180
 8001200:	20000000 	.word	0x20000000
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_RCC_EnableCSS+0x14>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	4242004c 	.word	0x4242004c

08001220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800123a:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x90>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b04      	cmp	r3, #4
 8001248:	d002      	beq.n	8001250 <HAL_RCC_GetSysClockFreq+0x30>
 800124a:	2b08      	cmp	r3, #8
 800124c:	d003      	beq.n	8001256 <HAL_RCC_GetSysClockFreq+0x36>
 800124e:	e026      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001250:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001252:	613b      	str	r3, [r7, #16]
      break;
 8001254:	e026      	b.n	80012a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0c9b      	lsrs	r3, r3, #18
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	4a16      	ldr	r2, [pc, #88]	@ (80012b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00f      	beq.n	800128e <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x90>)
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	4a11      	ldr	r2, [pc, #68]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001280:	fb03 f202 	mul.w	r2, r3, r2
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e004      	b.n	8001298 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
      break;
 800129c:	e002      	b.n	80012a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800129e:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x94>)
 80012a0:	613b      	str	r3, [r7, #16]
      break;
 80012a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012a4:	693b      	ldr	r3, [r7, #16]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	007a1200 	.word	0x007a1200
 80012b8:	08002198 	.word	0x08002198
 80012bc:	080021a8 	.word	0x080021a8
 80012c0:	003d0900 	.word	0x003d0900

080012c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c8:	4b02      	ldr	r3, [pc, #8]	@ (80012d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000000 	.word	0x20000000

080012d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012dc:	f7ff fff2 	bl	80012c4 <HAL_RCC_GetHCLKFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	4903      	ldr	r1, [pc, #12]	@ (80012fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	08002190 	.word	0x08002190

08001300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001304:	f7ff ffde 	bl	80012c4 <HAL_RCC_GetHCLKFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	0adb      	lsrs	r3, r3, #11
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	4903      	ldr	r1, [pc, #12]	@ (8001324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	08002190 	.word	0x08002190

08001328 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_RCC_NMI_IRQHandler+0x20>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001334:	2b80      	cmp	r3, #128	@ 0x80
 8001336:	d104      	bne.n	8001342 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001338:	f000 f828 	bl	800138c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800133c:	4b03      	ldr	r3, [pc, #12]	@ (800134c <HAL_RCC_NMI_IRQHandler+0x24>)
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	701a      	strb	r2, [r3, #0]
  }
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	4002100a 	.word	0x4002100a

08001350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <RCC_Delay+0x34>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <RCC_Delay+0x38>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0a5b      	lsrs	r3, r3, #9
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800136c:	bf00      	nop
  }
  while (Delay --);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	60fa      	str	r2, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f9      	bne.n	800136c <RCC_Delay+0x1c>
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	20000000 	.word	0x20000000
 8001388:	10624dd3 	.word	0x10624dd3

0800138c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e042      	b.n	8001430 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff f828 	bl	8000414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2224      	movs	r2, #36	@ 0x24
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80013da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f91d 	bl	800161c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80013f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2220      	movs	r2, #32
 8001424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af02      	add	r7, sp, #8
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b20      	cmp	r3, #32
 8001456:	d16d      	bne.n	8001534 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <HAL_UART_Transmit+0x2c>
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e066      	b.n	8001536 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2221      	movs	r2, #33	@ 0x21
 8001472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001476:	f7ff f8f7 	bl	8000668 <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	88fa      	ldrh	r2, [r7, #6]
 8001480:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001490:	d108      	bne.n	80014a4 <HAL_UART_Transmit+0x6c>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e003      	b.n	80014ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80014ac:	e02a      	b.n	8001504 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2200      	movs	r2, #0
 80014b6:	2180      	movs	r1, #128	@ 0x80
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 f840 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e036      	b.n	8001536 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10b      	bne.n	80014e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	3302      	adds	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	e007      	b.n	80014f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001508:	b29b      	uxth	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1cf      	bne.n	80014ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	@ 0x40
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f810 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e006      	b.n	8001536 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2220      	movs	r2, #32
 800152c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	e000      	b.n	8001536 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001534:	2302      	movs	r3, #2
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b090      	sub	sp, #64	@ 0x40
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800154e:	e050      	b.n	80015f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001556:	d04c      	beq.n	80015f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <UART_WaitOnFlagUntilTimeout+0x30>
 800155e:	f7ff f883 	bl	8000668 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800156a:	429a      	cmp	r2, r3
 800156c:	d241      	bcs.n	80015f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	330c      	adds	r3, #12
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001578:	e853 3f00 	ldrex	r3, [r3]
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	330c      	adds	r3, #12
 800158c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800158e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001590:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001592:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001594:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001596:	e841 2300 	strex	r3, r2, [r1]
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800159c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e5      	bne.n	800156e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3314      	adds	r3, #20
 80015a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	e853 3f00 	ldrex	r3, [r3]
 80015b0:	613b      	str	r3, [r7, #16]
   return(result);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3314      	adds	r3, #20
 80015c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015c2:	623a      	str	r2, [r7, #32]
 80015c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015c6:	69f9      	ldr	r1, [r7, #28]
 80015c8:	6a3a      	ldr	r2, [r7, #32]
 80015ca:	e841 2300 	strex	r3, r2, [r1]
 80015ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1e5      	bne.n	80015a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2220      	movs	r2, #32
 80015da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e00f      	b.n	8001612 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4013      	ands	r3, r2
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	429a      	cmp	r2, r3
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	429a      	cmp	r2, r3
 800160e:	d09f      	beq.n	8001550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3740      	adds	r7, #64	@ 0x40
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4313      	orrs	r3, r2
 8001650:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800165c:	f023 030c 	bic.w	r3, r3, #12
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	430b      	orrs	r3, r1
 8001668:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a55      	ldr	r2, [pc, #340]	@ (80017dc <UART_SetConfig+0x1c0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d103      	bne.n	8001692 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800168a:	f7ff fe39 	bl	8001300 <HAL_RCC_GetPCLK2Freq>
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	e002      	b.n	8001698 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001692:	f7ff fe21 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 8001696:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016a0:	d14c      	bne.n	800173c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	009a      	lsls	r2, r3, #2
 80016ac:	441a      	add	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	4a49      	ldr	r2, [pc, #292]	@ (80017e0 <UART_SetConfig+0x1c4>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	0119      	lsls	r1, r3, #4
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	009a      	lsls	r2, r3, #2
 80016cc:	441a      	add	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80016d8:	4b41      	ldr	r3, [pc, #260]	@ (80017e0 <UART_SetConfig+0x1c4>)
 80016da:	fba3 0302 	umull	r0, r3, r3, r2
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2064      	movs	r0, #100	@ 0x64
 80016e2:	fb00 f303 	mul.w	r3, r0, r3
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	3332      	adds	r3, #50	@ 0x32
 80016ec:	4a3c      	ldr	r2, [pc, #240]	@ (80017e0 <UART_SetConfig+0x1c4>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80016fa:	4419      	add	r1, r3
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	009a      	lsls	r2, r3, #2
 8001706:	441a      	add	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001712:	4b33      	ldr	r3, [pc, #204]	@ (80017e0 <UART_SetConfig+0x1c4>)
 8001714:	fba3 0302 	umull	r0, r3, r3, r2
 8001718:	095b      	lsrs	r3, r3, #5
 800171a:	2064      	movs	r0, #100	@ 0x64
 800171c:	fb00 f303 	mul.w	r3, r0, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	3332      	adds	r3, #50	@ 0x32
 8001726:	4a2e      	ldr	r2, [pc, #184]	@ (80017e0 <UART_SetConfig+0x1c4>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	f003 0207 	and.w	r2, r3, #7
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	440a      	add	r2, r1
 8001738:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 800173a:	e04a      	b.n	80017d2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	441a      	add	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <UART_SetConfig+0x1c4>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	0119      	lsls	r1, r3, #4
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	009a      	lsls	r2, r3, #2
 8001766:	441a      	add	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <UART_SetConfig+0x1c4>)
 8001774:	fba3 0302 	umull	r0, r3, r3, r2
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	2064      	movs	r0, #100	@ 0x64
 800177c:	fb00 f303 	mul.w	r3, r0, r3
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	3332      	adds	r3, #50	@ 0x32
 8001786:	4a16      	ldr	r2, [pc, #88]	@ (80017e0 <UART_SetConfig+0x1c4>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	095b      	lsrs	r3, r3, #5
 800178e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001792:	4419      	add	r1, r3
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009a      	lsls	r2, r3, #2
 800179e:	441a      	add	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <UART_SetConfig+0x1c4>)
 80017ac:	fba3 0302 	umull	r0, r3, r3, r2
 80017b0:	095b      	lsrs	r3, r3, #5
 80017b2:	2064      	movs	r0, #100	@ 0x64
 80017b4:	fb00 f303 	mul.w	r3, r0, r3
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	3332      	adds	r3, #50	@ 0x32
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <UART_SetConfig+0x1c4>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	f003 020f 	and.w	r2, r3, #15
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	440a      	add	r2, r1
 80017d0:	609a      	str	r2, [r3, #8]
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40013800 	.word	0x40013800
 80017e0:	51eb851f 	.word	0x51eb851f

080017e4 <siprintf>:
 80017e4:	b40e      	push	{r1, r2, r3}
 80017e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80017ea:	b500      	push	{lr}
 80017ec:	b09c      	sub	sp, #112	@ 0x70
 80017ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80017f0:	9002      	str	r0, [sp, #8]
 80017f2:	9006      	str	r0, [sp, #24]
 80017f4:	9107      	str	r1, [sp, #28]
 80017f6:	9104      	str	r1, [sp, #16]
 80017f8:	4808      	ldr	r0, [pc, #32]	@ (800181c <siprintf+0x38>)
 80017fa:	4909      	ldr	r1, [pc, #36]	@ (8001820 <siprintf+0x3c>)
 80017fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001800:	9105      	str	r1, [sp, #20]
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	a902      	add	r1, sp, #8
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	f000 f992 	bl	8001b30 <_svfiprintf_r>
 800180c:	2200      	movs	r2, #0
 800180e:	9b02      	ldr	r3, [sp, #8]
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	b01c      	add	sp, #112	@ 0x70
 8001814:	f85d eb04 	ldr.w	lr, [sp], #4
 8001818:	b003      	add	sp, #12
 800181a:	4770      	bx	lr
 800181c:	2000000c 	.word	0x2000000c
 8001820:	ffff0208 	.word	0xffff0208

08001824 <memset>:
 8001824:	4603      	mov	r3, r0
 8001826:	4402      	add	r2, r0
 8001828:	4293      	cmp	r3, r2
 800182a:	d100      	bne.n	800182e <memset+0xa>
 800182c:	4770      	bx	lr
 800182e:	f803 1b01 	strb.w	r1, [r3], #1
 8001832:	e7f9      	b.n	8001828 <memset+0x4>

08001834 <__errno>:
 8001834:	4b01      	ldr	r3, [pc, #4]	@ (800183c <__errno+0x8>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c

08001840 <__libc_init_array>:
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	2600      	movs	r6, #0
 8001844:	4d0c      	ldr	r5, [pc, #48]	@ (8001878 <__libc_init_array+0x38>)
 8001846:	4c0d      	ldr	r4, [pc, #52]	@ (800187c <__libc_init_array+0x3c>)
 8001848:	1b64      	subs	r4, r4, r5
 800184a:	10a4      	asrs	r4, r4, #2
 800184c:	42a6      	cmp	r6, r4
 800184e:	d109      	bne.n	8001864 <__libc_init_array+0x24>
 8001850:	f000 fc78 	bl	8002144 <_init>
 8001854:	2600      	movs	r6, #0
 8001856:	4d0a      	ldr	r5, [pc, #40]	@ (8001880 <__libc_init_array+0x40>)
 8001858:	4c0a      	ldr	r4, [pc, #40]	@ (8001884 <__libc_init_array+0x44>)
 800185a:	1b64      	subs	r4, r4, r5
 800185c:	10a4      	asrs	r4, r4, #2
 800185e:	42a6      	cmp	r6, r4
 8001860:	d105      	bne.n	800186e <__libc_init_array+0x2e>
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	f855 3b04 	ldr.w	r3, [r5], #4
 8001868:	4798      	blx	r3
 800186a:	3601      	adds	r6, #1
 800186c:	e7ee      	b.n	800184c <__libc_init_array+0xc>
 800186e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001872:	4798      	blx	r3
 8001874:	3601      	adds	r6, #1
 8001876:	e7f2      	b.n	800185e <__libc_init_array+0x1e>
 8001878:	080021ec 	.word	0x080021ec
 800187c:	080021ec 	.word	0x080021ec
 8001880:	080021ec 	.word	0x080021ec
 8001884:	080021f0 	.word	0x080021f0

08001888 <__retarget_lock_acquire_recursive>:
 8001888:	4770      	bx	lr

0800188a <__retarget_lock_release_recursive>:
 800188a:	4770      	bx	lr

0800188c <_free_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	4605      	mov	r5, r0
 8001890:	2900      	cmp	r1, #0
 8001892:	d040      	beq.n	8001916 <_free_r+0x8a>
 8001894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001898:	1f0c      	subs	r4, r1, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	bfb8      	it	lt
 800189e:	18e4      	addlt	r4, r4, r3
 80018a0:	f000 f8de 	bl	8001a60 <__malloc_lock>
 80018a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001918 <_free_r+0x8c>)
 80018a6:	6813      	ldr	r3, [r2, #0]
 80018a8:	b933      	cbnz	r3, 80018b8 <_free_r+0x2c>
 80018aa:	6063      	str	r3, [r4, #4]
 80018ac:	6014      	str	r4, [r2, #0]
 80018ae:	4628      	mov	r0, r5
 80018b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018b4:	f000 b8da 	b.w	8001a6c <__malloc_unlock>
 80018b8:	42a3      	cmp	r3, r4
 80018ba:	d908      	bls.n	80018ce <_free_r+0x42>
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	1821      	adds	r1, r4, r0
 80018c0:	428b      	cmp	r3, r1
 80018c2:	bf01      	itttt	eq
 80018c4:	6819      	ldreq	r1, [r3, #0]
 80018c6:	685b      	ldreq	r3, [r3, #4]
 80018c8:	1809      	addeq	r1, r1, r0
 80018ca:	6021      	streq	r1, [r4, #0]
 80018cc:	e7ed      	b.n	80018aa <_free_r+0x1e>
 80018ce:	461a      	mov	r2, r3
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	b10b      	cbz	r3, 80018d8 <_free_r+0x4c>
 80018d4:	42a3      	cmp	r3, r4
 80018d6:	d9fa      	bls.n	80018ce <_free_r+0x42>
 80018d8:	6811      	ldr	r1, [r2, #0]
 80018da:	1850      	adds	r0, r2, r1
 80018dc:	42a0      	cmp	r0, r4
 80018de:	d10b      	bne.n	80018f8 <_free_r+0x6c>
 80018e0:	6820      	ldr	r0, [r4, #0]
 80018e2:	4401      	add	r1, r0
 80018e4:	1850      	adds	r0, r2, r1
 80018e6:	4283      	cmp	r3, r0
 80018e8:	6011      	str	r1, [r2, #0]
 80018ea:	d1e0      	bne.n	80018ae <_free_r+0x22>
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4408      	add	r0, r1
 80018f2:	6010      	str	r0, [r2, #0]
 80018f4:	6053      	str	r3, [r2, #4]
 80018f6:	e7da      	b.n	80018ae <_free_r+0x22>
 80018f8:	d902      	bls.n	8001900 <_free_r+0x74>
 80018fa:	230c      	movs	r3, #12
 80018fc:	602b      	str	r3, [r5, #0]
 80018fe:	e7d6      	b.n	80018ae <_free_r+0x22>
 8001900:	6820      	ldr	r0, [r4, #0]
 8001902:	1821      	adds	r1, r4, r0
 8001904:	428b      	cmp	r3, r1
 8001906:	bf01      	itttt	eq
 8001908:	6819      	ldreq	r1, [r3, #0]
 800190a:	685b      	ldreq	r3, [r3, #4]
 800190c:	1809      	addeq	r1, r1, r0
 800190e:	6021      	streq	r1, [r4, #0]
 8001910:	6063      	str	r3, [r4, #4]
 8001912:	6054      	str	r4, [r2, #4]
 8001914:	e7cb      	b.n	80018ae <_free_r+0x22>
 8001916:	bd38      	pop	{r3, r4, r5, pc}
 8001918:	20000240 	.word	0x20000240

0800191c <sbrk_aligned>:
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	4e0f      	ldr	r6, [pc, #60]	@ (800195c <sbrk_aligned+0x40>)
 8001920:	460c      	mov	r4, r1
 8001922:	6831      	ldr	r1, [r6, #0]
 8001924:	4605      	mov	r5, r0
 8001926:	b911      	cbnz	r1, 800192e <sbrk_aligned+0x12>
 8001928:	f000 fbaa 	bl	8002080 <_sbrk_r>
 800192c:	6030      	str	r0, [r6, #0]
 800192e:	4621      	mov	r1, r4
 8001930:	4628      	mov	r0, r5
 8001932:	f000 fba5 	bl	8002080 <_sbrk_r>
 8001936:	1c43      	adds	r3, r0, #1
 8001938:	d103      	bne.n	8001942 <sbrk_aligned+0x26>
 800193a:	f04f 34ff 	mov.w	r4, #4294967295
 800193e:	4620      	mov	r0, r4
 8001940:	bd70      	pop	{r4, r5, r6, pc}
 8001942:	1cc4      	adds	r4, r0, #3
 8001944:	f024 0403 	bic.w	r4, r4, #3
 8001948:	42a0      	cmp	r0, r4
 800194a:	d0f8      	beq.n	800193e <sbrk_aligned+0x22>
 800194c:	1a21      	subs	r1, r4, r0
 800194e:	4628      	mov	r0, r5
 8001950:	f000 fb96 	bl	8002080 <_sbrk_r>
 8001954:	3001      	adds	r0, #1
 8001956:	d1f2      	bne.n	800193e <sbrk_aligned+0x22>
 8001958:	e7ef      	b.n	800193a <sbrk_aligned+0x1e>
 800195a:	bf00      	nop
 800195c:	2000023c 	.word	0x2000023c

08001960 <_malloc_r>:
 8001960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001964:	1ccd      	adds	r5, r1, #3
 8001966:	f025 0503 	bic.w	r5, r5, #3
 800196a:	3508      	adds	r5, #8
 800196c:	2d0c      	cmp	r5, #12
 800196e:	bf38      	it	cc
 8001970:	250c      	movcc	r5, #12
 8001972:	2d00      	cmp	r5, #0
 8001974:	4606      	mov	r6, r0
 8001976:	db01      	blt.n	800197c <_malloc_r+0x1c>
 8001978:	42a9      	cmp	r1, r5
 800197a:	d904      	bls.n	8001986 <_malloc_r+0x26>
 800197c:	230c      	movs	r3, #12
 800197e:	6033      	str	r3, [r6, #0]
 8001980:	2000      	movs	r0, #0
 8001982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001a5c <_malloc_r+0xfc>
 800198a:	f000 f869 	bl	8001a60 <__malloc_lock>
 800198e:	f8d8 3000 	ldr.w	r3, [r8]
 8001992:	461c      	mov	r4, r3
 8001994:	bb44      	cbnz	r4, 80019e8 <_malloc_r+0x88>
 8001996:	4629      	mov	r1, r5
 8001998:	4630      	mov	r0, r6
 800199a:	f7ff ffbf 	bl	800191c <sbrk_aligned>
 800199e:	1c43      	adds	r3, r0, #1
 80019a0:	4604      	mov	r4, r0
 80019a2:	d158      	bne.n	8001a56 <_malloc_r+0xf6>
 80019a4:	f8d8 4000 	ldr.w	r4, [r8]
 80019a8:	4627      	mov	r7, r4
 80019aa:	2f00      	cmp	r7, #0
 80019ac:	d143      	bne.n	8001a36 <_malloc_r+0xd6>
 80019ae:	2c00      	cmp	r4, #0
 80019b0:	d04b      	beq.n	8001a4a <_malloc_r+0xea>
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	4639      	mov	r1, r7
 80019b6:	4630      	mov	r0, r6
 80019b8:	eb04 0903 	add.w	r9, r4, r3
 80019bc:	f000 fb60 	bl	8002080 <_sbrk_r>
 80019c0:	4581      	cmp	r9, r0
 80019c2:	d142      	bne.n	8001a4a <_malloc_r+0xea>
 80019c4:	6821      	ldr	r1, [r4, #0]
 80019c6:	4630      	mov	r0, r6
 80019c8:	1a6d      	subs	r5, r5, r1
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7ff ffa6 	bl	800191c <sbrk_aligned>
 80019d0:	3001      	adds	r0, #1
 80019d2:	d03a      	beq.n	8001a4a <_malloc_r+0xea>
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	442b      	add	r3, r5
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	f8d8 3000 	ldr.w	r3, [r8]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	bb62      	cbnz	r2, 8001a3c <_malloc_r+0xdc>
 80019e2:	f8c8 7000 	str.w	r7, [r8]
 80019e6:	e00f      	b.n	8001a08 <_malloc_r+0xa8>
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	1b52      	subs	r2, r2, r5
 80019ec:	d420      	bmi.n	8001a30 <_malloc_r+0xd0>
 80019ee:	2a0b      	cmp	r2, #11
 80019f0:	d917      	bls.n	8001a22 <_malloc_r+0xc2>
 80019f2:	1961      	adds	r1, r4, r5
 80019f4:	42a3      	cmp	r3, r4
 80019f6:	6025      	str	r5, [r4, #0]
 80019f8:	bf18      	it	ne
 80019fa:	6059      	strne	r1, [r3, #4]
 80019fc:	6863      	ldr	r3, [r4, #4]
 80019fe:	bf08      	it	eq
 8001a00:	f8c8 1000 	streq.w	r1, [r8]
 8001a04:	5162      	str	r2, [r4, r5]
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f000 f82f 	bl	8001a6c <__malloc_unlock>
 8001a0e:	f104 000b 	add.w	r0, r4, #11
 8001a12:	1d23      	adds	r3, r4, #4
 8001a14:	f020 0007 	bic.w	r0, r0, #7
 8001a18:	1ac2      	subs	r2, r0, r3
 8001a1a:	bf1c      	itt	ne
 8001a1c:	1a1b      	subne	r3, r3, r0
 8001a1e:	50a3      	strne	r3, [r4, r2]
 8001a20:	e7af      	b.n	8001982 <_malloc_r+0x22>
 8001a22:	6862      	ldr	r2, [r4, #4]
 8001a24:	42a3      	cmp	r3, r4
 8001a26:	bf0c      	ite	eq
 8001a28:	f8c8 2000 	streq.w	r2, [r8]
 8001a2c:	605a      	strne	r2, [r3, #4]
 8001a2e:	e7eb      	b.n	8001a08 <_malloc_r+0xa8>
 8001a30:	4623      	mov	r3, r4
 8001a32:	6864      	ldr	r4, [r4, #4]
 8001a34:	e7ae      	b.n	8001994 <_malloc_r+0x34>
 8001a36:	463c      	mov	r4, r7
 8001a38:	687f      	ldr	r7, [r7, #4]
 8001a3a:	e7b6      	b.n	80019aa <_malloc_r+0x4a>
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	42a3      	cmp	r3, r4
 8001a42:	d1fb      	bne.n	8001a3c <_malloc_r+0xdc>
 8001a44:	2300      	movs	r3, #0
 8001a46:	6053      	str	r3, [r2, #4]
 8001a48:	e7de      	b.n	8001a08 <_malloc_r+0xa8>
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	6033      	str	r3, [r6, #0]
 8001a50:	f000 f80c 	bl	8001a6c <__malloc_unlock>
 8001a54:	e794      	b.n	8001980 <_malloc_r+0x20>
 8001a56:	6005      	str	r5, [r0, #0]
 8001a58:	e7d6      	b.n	8001a08 <_malloc_r+0xa8>
 8001a5a:	bf00      	nop
 8001a5c:	20000240 	.word	0x20000240

08001a60 <__malloc_lock>:
 8001a60:	4801      	ldr	r0, [pc, #4]	@ (8001a68 <__malloc_lock+0x8>)
 8001a62:	f7ff bf11 	b.w	8001888 <__retarget_lock_acquire_recursive>
 8001a66:	bf00      	nop
 8001a68:	20000238 	.word	0x20000238

08001a6c <__malloc_unlock>:
 8001a6c:	4801      	ldr	r0, [pc, #4]	@ (8001a74 <__malloc_unlock+0x8>)
 8001a6e:	f7ff bf0c 	b.w	800188a <__retarget_lock_release_recursive>
 8001a72:	bf00      	nop
 8001a74:	20000238 	.word	0x20000238

08001a78 <__ssputs_r>:
 8001a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a7c:	461f      	mov	r7, r3
 8001a7e:	688e      	ldr	r6, [r1, #8]
 8001a80:	4682      	mov	sl, r0
 8001a82:	42be      	cmp	r6, r7
 8001a84:	460c      	mov	r4, r1
 8001a86:	4690      	mov	r8, r2
 8001a88:	680b      	ldr	r3, [r1, #0]
 8001a8a:	d82d      	bhi.n	8001ae8 <__ssputs_r+0x70>
 8001a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001a90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001a94:	d026      	beq.n	8001ae4 <__ssputs_r+0x6c>
 8001a96:	6965      	ldr	r5, [r4, #20]
 8001a98:	6909      	ldr	r1, [r1, #16]
 8001a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a9e:	eba3 0901 	sub.w	r9, r3, r1
 8001aa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001aa6:	1c7b      	adds	r3, r7, #1
 8001aa8:	444b      	add	r3, r9
 8001aaa:	106d      	asrs	r5, r5, #1
 8001aac:	429d      	cmp	r5, r3
 8001aae:	bf38      	it	cc
 8001ab0:	461d      	movcc	r5, r3
 8001ab2:	0553      	lsls	r3, r2, #21
 8001ab4:	d527      	bpl.n	8001b06 <__ssputs_r+0x8e>
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7ff ff52 	bl	8001960 <_malloc_r>
 8001abc:	4606      	mov	r6, r0
 8001abe:	b360      	cbz	r0, 8001b1a <__ssputs_r+0xa2>
 8001ac0:	464a      	mov	r2, r9
 8001ac2:	6921      	ldr	r1, [r4, #16]
 8001ac4:	f000 fafa 	bl	80020bc <memcpy>
 8001ac8:	89a3      	ldrh	r3, [r4, #12]
 8001aca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ad2:	81a3      	strh	r3, [r4, #12]
 8001ad4:	6126      	str	r6, [r4, #16]
 8001ad6:	444e      	add	r6, r9
 8001ad8:	6026      	str	r6, [r4, #0]
 8001ada:	463e      	mov	r6, r7
 8001adc:	6165      	str	r5, [r4, #20]
 8001ade:	eba5 0509 	sub.w	r5, r5, r9
 8001ae2:	60a5      	str	r5, [r4, #8]
 8001ae4:	42be      	cmp	r6, r7
 8001ae6:	d900      	bls.n	8001aea <__ssputs_r+0x72>
 8001ae8:	463e      	mov	r6, r7
 8001aea:	4632      	mov	r2, r6
 8001aec:	4641      	mov	r1, r8
 8001aee:	6820      	ldr	r0, [r4, #0]
 8001af0:	f000 faac 	bl	800204c <memmove>
 8001af4:	2000      	movs	r0, #0
 8001af6:	68a3      	ldr	r3, [r4, #8]
 8001af8:	1b9b      	subs	r3, r3, r6
 8001afa:	60a3      	str	r3, [r4, #8]
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	4433      	add	r3, r6
 8001b00:	6023      	str	r3, [r4, #0]
 8001b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b06:	462a      	mov	r2, r5
 8001b08:	f000 fae6 	bl	80020d8 <_realloc_r>
 8001b0c:	4606      	mov	r6, r0
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d1e0      	bne.n	8001ad4 <__ssputs_r+0x5c>
 8001b12:	4650      	mov	r0, sl
 8001b14:	6921      	ldr	r1, [r4, #16]
 8001b16:	f7ff feb9 	bl	800188c <_free_r>
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	f8ca 3000 	str.w	r3, [sl]
 8001b20:	89a3      	ldrh	r3, [r4, #12]
 8001b22:	f04f 30ff 	mov.w	r0, #4294967295
 8001b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b2a:	81a3      	strh	r3, [r4, #12]
 8001b2c:	e7e9      	b.n	8001b02 <__ssputs_r+0x8a>
	...

08001b30 <_svfiprintf_r>:
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	4698      	mov	r8, r3
 8001b36:	898b      	ldrh	r3, [r1, #12]
 8001b38:	4607      	mov	r7, r0
 8001b3a:	061b      	lsls	r3, r3, #24
 8001b3c:	460d      	mov	r5, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	b09d      	sub	sp, #116	@ 0x74
 8001b42:	d510      	bpl.n	8001b66 <_svfiprintf_r+0x36>
 8001b44:	690b      	ldr	r3, [r1, #16]
 8001b46:	b973      	cbnz	r3, 8001b66 <_svfiprintf_r+0x36>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	f7ff ff09 	bl	8001960 <_malloc_r>
 8001b4e:	6028      	str	r0, [r5, #0]
 8001b50:	6128      	str	r0, [r5, #16]
 8001b52:	b930      	cbnz	r0, 8001b62 <_svfiprintf_r+0x32>
 8001b54:	230c      	movs	r3, #12
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	b01d      	add	sp, #116	@ 0x74
 8001b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b62:	2340      	movs	r3, #64	@ 0x40
 8001b64:	616b      	str	r3, [r5, #20]
 8001b66:	2300      	movs	r3, #0
 8001b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b70:	2330      	movs	r3, #48	@ 0x30
 8001b72:	f04f 0901 	mov.w	r9, #1
 8001b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001d14 <_svfiprintf_r+0x1e4>
 8001b7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b82:	4623      	mov	r3, r4
 8001b84:	469a      	mov	sl, r3
 8001b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b8a:	b10a      	cbz	r2, 8001b90 <_svfiprintf_r+0x60>
 8001b8c:	2a25      	cmp	r2, #37	@ 0x25
 8001b8e:	d1f9      	bne.n	8001b84 <_svfiprintf_r+0x54>
 8001b90:	ebba 0b04 	subs.w	fp, sl, r4
 8001b94:	d00b      	beq.n	8001bae <_svfiprintf_r+0x7e>
 8001b96:	465b      	mov	r3, fp
 8001b98:	4622      	mov	r2, r4
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	f7ff ff6b 	bl	8001a78 <__ssputs_r>
 8001ba2:	3001      	adds	r0, #1
 8001ba4:	f000 80a7 	beq.w	8001cf6 <_svfiprintf_r+0x1c6>
 8001ba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001baa:	445a      	add	r2, fp
 8001bac:	9209      	str	r2, [sp, #36]	@ 0x24
 8001bae:	f89a 3000 	ldrb.w	r3, [sl]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 809f 	beq.w	8001cf6 <_svfiprintf_r+0x1c6>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bc2:	f10a 0a01 	add.w	sl, sl, #1
 8001bc6:	9304      	str	r3, [sp, #16]
 8001bc8:	9307      	str	r3, [sp, #28]
 8001bca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001bce:	931a      	str	r3, [sp, #104]	@ 0x68
 8001bd0:	4654      	mov	r4, sl
 8001bd2:	2205      	movs	r2, #5
 8001bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd8:	484e      	ldr	r0, [pc, #312]	@ (8001d14 <_svfiprintf_r+0x1e4>)
 8001bda:	f000 fa61 	bl	80020a0 <memchr>
 8001bde:	9a04      	ldr	r2, [sp, #16]
 8001be0:	b9d8      	cbnz	r0, 8001c1a <_svfiprintf_r+0xea>
 8001be2:	06d0      	lsls	r0, r2, #27
 8001be4:	bf44      	itt	mi
 8001be6:	2320      	movmi	r3, #32
 8001be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001bec:	0711      	lsls	r1, r2, #28
 8001bee:	bf44      	itt	mi
 8001bf0:	232b      	movmi	r3, #43	@ 0x2b
 8001bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8001bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bfc:	d015      	beq.n	8001c2a <_svfiprintf_r+0xfa>
 8001bfe:	4654      	mov	r4, sl
 8001c00:	2000      	movs	r0, #0
 8001c02:	f04f 0c0a 	mov.w	ip, #10
 8001c06:	9a07      	ldr	r2, [sp, #28]
 8001c08:	4621      	mov	r1, r4
 8001c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c0e:	3b30      	subs	r3, #48	@ 0x30
 8001c10:	2b09      	cmp	r3, #9
 8001c12:	d94b      	bls.n	8001cac <_svfiprintf_r+0x17c>
 8001c14:	b1b0      	cbz	r0, 8001c44 <_svfiprintf_r+0x114>
 8001c16:	9207      	str	r2, [sp, #28]
 8001c18:	e014      	b.n	8001c44 <_svfiprintf_r+0x114>
 8001c1a:	eba0 0308 	sub.w	r3, r0, r8
 8001c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	46a2      	mov	sl, r4
 8001c26:	9304      	str	r3, [sp, #16]
 8001c28:	e7d2      	b.n	8001bd0 <_svfiprintf_r+0xa0>
 8001c2a:	9b03      	ldr	r3, [sp, #12]
 8001c2c:	1d19      	adds	r1, r3, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	9103      	str	r1, [sp, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bfbb      	ittet	lt
 8001c36:	425b      	neglt	r3, r3
 8001c38:	f042 0202 	orrlt.w	r2, r2, #2
 8001c3c:	9307      	strge	r3, [sp, #28]
 8001c3e:	9307      	strlt	r3, [sp, #28]
 8001c40:	bfb8      	it	lt
 8001c42:	9204      	strlt	r2, [sp, #16]
 8001c44:	7823      	ldrb	r3, [r4, #0]
 8001c46:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c48:	d10a      	bne.n	8001c60 <_svfiprintf_r+0x130>
 8001c4a:	7863      	ldrb	r3, [r4, #1]
 8001c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c4e:	d132      	bne.n	8001cb6 <_svfiprintf_r+0x186>
 8001c50:	9b03      	ldr	r3, [sp, #12]
 8001c52:	3402      	adds	r4, #2
 8001c54:	1d1a      	adds	r2, r3, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	9203      	str	r2, [sp, #12]
 8001c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c5e:	9305      	str	r3, [sp, #20]
 8001c60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001d18 <_svfiprintf_r+0x1e8>
 8001c64:	2203      	movs	r2, #3
 8001c66:	4650      	mov	r0, sl
 8001c68:	7821      	ldrb	r1, [r4, #0]
 8001c6a:	f000 fa19 	bl	80020a0 <memchr>
 8001c6e:	b138      	cbz	r0, 8001c80 <_svfiprintf_r+0x150>
 8001c70:	2240      	movs	r2, #64	@ 0x40
 8001c72:	9b04      	ldr	r3, [sp, #16]
 8001c74:	eba0 000a 	sub.w	r0, r0, sl
 8001c78:	4082      	lsls	r2, r0
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	3401      	adds	r4, #1
 8001c7e:	9304      	str	r3, [sp, #16]
 8001c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c84:	2206      	movs	r2, #6
 8001c86:	4825      	ldr	r0, [pc, #148]	@ (8001d1c <_svfiprintf_r+0x1ec>)
 8001c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c8c:	f000 fa08 	bl	80020a0 <memchr>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d036      	beq.n	8001d02 <_svfiprintf_r+0x1d2>
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <_svfiprintf_r+0x1f0>)
 8001c96:	bb1b      	cbnz	r3, 8001ce0 <_svfiprintf_r+0x1b0>
 8001c98:	9b03      	ldr	r3, [sp, #12]
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	f023 0307 	bic.w	r3, r3, #7
 8001ca0:	3308      	adds	r3, #8
 8001ca2:	9303      	str	r3, [sp, #12]
 8001ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ca6:	4433      	add	r3, r6
 8001ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8001caa:	e76a      	b.n	8001b82 <_svfiprintf_r+0x52>
 8001cac:	460c      	mov	r4, r1
 8001cae:	2001      	movs	r0, #1
 8001cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cb4:	e7a8      	b.n	8001c08 <_svfiprintf_r+0xd8>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f04f 0c0a 	mov.w	ip, #10
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	3401      	adds	r4, #1
 8001cc0:	9305      	str	r3, [sp, #20]
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cc8:	3a30      	subs	r2, #48	@ 0x30
 8001cca:	2a09      	cmp	r2, #9
 8001ccc:	d903      	bls.n	8001cd6 <_svfiprintf_r+0x1a6>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0c6      	beq.n	8001c60 <_svfiprintf_r+0x130>
 8001cd2:	9105      	str	r1, [sp, #20]
 8001cd4:	e7c4      	b.n	8001c60 <_svfiprintf_r+0x130>
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	2301      	movs	r3, #1
 8001cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cde:	e7f0      	b.n	8001cc2 <_svfiprintf_r+0x192>
 8001ce0:	ab03      	add	r3, sp, #12
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	462a      	mov	r2, r5
 8001ce6:	4638      	mov	r0, r7
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <_svfiprintf_r+0x1f4>)
 8001cea:	a904      	add	r1, sp, #16
 8001cec:	f3af 8000 	nop.w
 8001cf0:	1c42      	adds	r2, r0, #1
 8001cf2:	4606      	mov	r6, r0
 8001cf4:	d1d6      	bne.n	8001ca4 <_svfiprintf_r+0x174>
 8001cf6:	89ab      	ldrh	r3, [r5, #12]
 8001cf8:	065b      	lsls	r3, r3, #25
 8001cfa:	f53f af2d 	bmi.w	8001b58 <_svfiprintf_r+0x28>
 8001cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d00:	e72c      	b.n	8001b5c <_svfiprintf_r+0x2c>
 8001d02:	ab03      	add	r3, sp, #12
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	462a      	mov	r2, r5
 8001d08:	4638      	mov	r0, r7
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <_svfiprintf_r+0x1f4>)
 8001d0c:	a904      	add	r1, sp, #16
 8001d0e:	f000 f87d 	bl	8001e0c <_printf_i>
 8001d12:	e7ed      	b.n	8001cf0 <_svfiprintf_r+0x1c0>
 8001d14:	080021b8 	.word	0x080021b8
 8001d18:	080021be 	.word	0x080021be
 8001d1c:	080021c2 	.word	0x080021c2
 8001d20:	00000000 	.word	0x00000000
 8001d24:	08001a79 	.word	0x08001a79

08001d28 <_printf_common>:
 8001d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d2c:	4616      	mov	r6, r2
 8001d2e:	4698      	mov	r8, r3
 8001d30:	688a      	ldr	r2, [r1, #8]
 8001d32:	690b      	ldr	r3, [r1, #16]
 8001d34:	4607      	mov	r7, r0
 8001d36:	4293      	cmp	r3, r2
 8001d38:	bfb8      	it	lt
 8001d3a:	4613      	movlt	r3, r2
 8001d3c:	6033      	str	r3, [r6, #0]
 8001d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d42:	460c      	mov	r4, r1
 8001d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d48:	b10a      	cbz	r2, 8001d4e <_printf_common+0x26>
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	6033      	str	r3, [r6, #0]
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	0699      	lsls	r1, r3, #26
 8001d52:	bf42      	ittt	mi
 8001d54:	6833      	ldrmi	r3, [r6, #0]
 8001d56:	3302      	addmi	r3, #2
 8001d58:	6033      	strmi	r3, [r6, #0]
 8001d5a:	6825      	ldr	r5, [r4, #0]
 8001d5c:	f015 0506 	ands.w	r5, r5, #6
 8001d60:	d106      	bne.n	8001d70 <_printf_common+0x48>
 8001d62:	f104 0a19 	add.w	sl, r4, #25
 8001d66:	68e3      	ldr	r3, [r4, #12]
 8001d68:	6832      	ldr	r2, [r6, #0]
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	42ab      	cmp	r3, r5
 8001d6e:	dc2b      	bgt.n	8001dc8 <_printf_common+0xa0>
 8001d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d74:	6822      	ldr	r2, [r4, #0]
 8001d76:	3b00      	subs	r3, #0
 8001d78:	bf18      	it	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	0692      	lsls	r2, r2, #26
 8001d7e:	d430      	bmi.n	8001de2 <_printf_common+0xba>
 8001d80:	4641      	mov	r1, r8
 8001d82:	4638      	mov	r0, r7
 8001d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d88:	47c8      	blx	r9
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	d023      	beq.n	8001dd6 <_printf_common+0xae>
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	6922      	ldr	r2, [r4, #16]
 8001d92:	f003 0306 	and.w	r3, r3, #6
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf14      	ite	ne
 8001d9a:	2500      	movne	r5, #0
 8001d9c:	6833      	ldreq	r3, [r6, #0]
 8001d9e:	f04f 0600 	mov.w	r6, #0
 8001da2:	bf08      	it	eq
 8001da4:	68e5      	ldreq	r5, [r4, #12]
 8001da6:	f104 041a 	add.w	r4, r4, #26
 8001daa:	bf08      	it	eq
 8001dac:	1aed      	subeq	r5, r5, r3
 8001dae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001db2:	bf08      	it	eq
 8001db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bfc4      	itt	gt
 8001dbc:	1a9b      	subgt	r3, r3, r2
 8001dbe:	18ed      	addgt	r5, r5, r3
 8001dc0:	42b5      	cmp	r5, r6
 8001dc2:	d11a      	bne.n	8001dfa <_printf_common+0xd2>
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e008      	b.n	8001dda <_printf_common+0xb2>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4652      	mov	r2, sl
 8001dcc:	4641      	mov	r1, r8
 8001dce:	4638      	mov	r0, r7
 8001dd0:	47c8      	blx	r9
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	d103      	bne.n	8001dde <_printf_common+0xb6>
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dde:	3501      	adds	r5, #1
 8001de0:	e7c1      	b.n	8001d66 <_printf_common+0x3e>
 8001de2:	2030      	movs	r0, #48	@ 0x30
 8001de4:	18e1      	adds	r1, r4, r3
 8001de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001df0:	4422      	add	r2, r4
 8001df2:	3302      	adds	r3, #2
 8001df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001df8:	e7c2      	b.n	8001d80 <_printf_common+0x58>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	4641      	mov	r1, r8
 8001e00:	4638      	mov	r0, r7
 8001e02:	47c8      	blx	r9
 8001e04:	3001      	adds	r0, #1
 8001e06:	d0e6      	beq.n	8001dd6 <_printf_common+0xae>
 8001e08:	3601      	adds	r6, #1
 8001e0a:	e7d9      	b.n	8001dc0 <_printf_common+0x98>

08001e0c <_printf_i>:
 8001e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e10:	7e0f      	ldrb	r7, [r1, #24]
 8001e12:	4691      	mov	r9, r2
 8001e14:	2f78      	cmp	r7, #120	@ 0x78
 8001e16:	4680      	mov	r8, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	469a      	mov	sl, r3
 8001e1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001e22:	d807      	bhi.n	8001e34 <_printf_i+0x28>
 8001e24:	2f62      	cmp	r7, #98	@ 0x62
 8001e26:	d80a      	bhi.n	8001e3e <_printf_i+0x32>
 8001e28:	2f00      	cmp	r7, #0
 8001e2a:	f000 80d3 	beq.w	8001fd4 <_printf_i+0x1c8>
 8001e2e:	2f58      	cmp	r7, #88	@ 0x58
 8001e30:	f000 80ba 	beq.w	8001fa8 <_printf_i+0x19c>
 8001e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001e3c:	e03a      	b.n	8001eb4 <_printf_i+0xa8>
 8001e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001e42:	2b15      	cmp	r3, #21
 8001e44:	d8f6      	bhi.n	8001e34 <_printf_i+0x28>
 8001e46:	a101      	add	r1, pc, #4	@ (adr r1, 8001e4c <_printf_i+0x40>)
 8001e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e4c:	08001ea5 	.word	0x08001ea5
 8001e50:	08001eb9 	.word	0x08001eb9
 8001e54:	08001e35 	.word	0x08001e35
 8001e58:	08001e35 	.word	0x08001e35
 8001e5c:	08001e35 	.word	0x08001e35
 8001e60:	08001e35 	.word	0x08001e35
 8001e64:	08001eb9 	.word	0x08001eb9
 8001e68:	08001e35 	.word	0x08001e35
 8001e6c:	08001e35 	.word	0x08001e35
 8001e70:	08001e35 	.word	0x08001e35
 8001e74:	08001e35 	.word	0x08001e35
 8001e78:	08001fbb 	.word	0x08001fbb
 8001e7c:	08001ee3 	.word	0x08001ee3
 8001e80:	08001f75 	.word	0x08001f75
 8001e84:	08001e35 	.word	0x08001e35
 8001e88:	08001e35 	.word	0x08001e35
 8001e8c:	08001fdd 	.word	0x08001fdd
 8001e90:	08001e35 	.word	0x08001e35
 8001e94:	08001ee3 	.word	0x08001ee3
 8001e98:	08001e35 	.word	0x08001e35
 8001e9c:	08001e35 	.word	0x08001e35
 8001ea0:	08001f7d 	.word	0x08001f7d
 8001ea4:	6833      	ldr	r3, [r6, #0]
 8001ea6:	1d1a      	adds	r2, r3, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6032      	str	r2, [r6, #0]
 8001eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e09e      	b.n	8001ff6 <_printf_i+0x1ea>
 8001eb8:	6833      	ldr	r3, [r6, #0]
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	1d19      	adds	r1, r3, #4
 8001ebe:	6031      	str	r1, [r6, #0]
 8001ec0:	0606      	lsls	r6, r0, #24
 8001ec2:	d501      	bpl.n	8001ec8 <_printf_i+0xbc>
 8001ec4:	681d      	ldr	r5, [r3, #0]
 8001ec6:	e003      	b.n	8001ed0 <_printf_i+0xc4>
 8001ec8:	0645      	lsls	r5, r0, #25
 8001eca:	d5fb      	bpl.n	8001ec4 <_printf_i+0xb8>
 8001ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ed0:	2d00      	cmp	r5, #0
 8001ed2:	da03      	bge.n	8001edc <_printf_i+0xd0>
 8001ed4:	232d      	movs	r3, #45	@ 0x2d
 8001ed6:	426d      	negs	r5, r5
 8001ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001edc:	230a      	movs	r3, #10
 8001ede:	4859      	ldr	r0, [pc, #356]	@ (8002044 <_printf_i+0x238>)
 8001ee0:	e011      	b.n	8001f06 <_printf_i+0xfa>
 8001ee2:	6821      	ldr	r1, [r4, #0]
 8001ee4:	6833      	ldr	r3, [r6, #0]
 8001ee6:	0608      	lsls	r0, r1, #24
 8001ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001eec:	d402      	bmi.n	8001ef4 <_printf_i+0xe8>
 8001eee:	0649      	lsls	r1, r1, #25
 8001ef0:	bf48      	it	mi
 8001ef2:	b2ad      	uxthmi	r5, r5
 8001ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001ef6:	6033      	str	r3, [r6, #0]
 8001ef8:	bf14      	ite	ne
 8001efa:	230a      	movne	r3, #10
 8001efc:	2308      	moveq	r3, #8
 8001efe:	4851      	ldr	r0, [pc, #324]	@ (8002044 <_printf_i+0x238>)
 8001f00:	2100      	movs	r1, #0
 8001f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f06:	6866      	ldr	r6, [r4, #4]
 8001f08:	2e00      	cmp	r6, #0
 8001f0a:	bfa8      	it	ge
 8001f0c:	6821      	ldrge	r1, [r4, #0]
 8001f0e:	60a6      	str	r6, [r4, #8]
 8001f10:	bfa4      	itt	ge
 8001f12:	f021 0104 	bicge.w	r1, r1, #4
 8001f16:	6021      	strge	r1, [r4, #0]
 8001f18:	b90d      	cbnz	r5, 8001f1e <_printf_i+0x112>
 8001f1a:	2e00      	cmp	r6, #0
 8001f1c:	d04b      	beq.n	8001fb6 <_printf_i+0x1aa>
 8001f1e:	4616      	mov	r6, r2
 8001f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f24:	fb03 5711 	mls	r7, r3, r1, r5
 8001f28:	5dc7      	ldrb	r7, [r0, r7]
 8001f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f2e:	462f      	mov	r7, r5
 8001f30:	42bb      	cmp	r3, r7
 8001f32:	460d      	mov	r5, r1
 8001f34:	d9f4      	bls.n	8001f20 <_printf_i+0x114>
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d10b      	bne.n	8001f52 <_printf_i+0x146>
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	07df      	lsls	r7, r3, #31
 8001f3e:	d508      	bpl.n	8001f52 <_printf_i+0x146>
 8001f40:	6923      	ldr	r3, [r4, #16]
 8001f42:	6861      	ldr	r1, [r4, #4]
 8001f44:	4299      	cmp	r1, r3
 8001f46:	bfde      	ittt	le
 8001f48:	2330      	movle	r3, #48	@ 0x30
 8001f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f52:	1b92      	subs	r2, r2, r6
 8001f54:	6122      	str	r2, [r4, #16]
 8001f56:	464b      	mov	r3, r9
 8001f58:	4621      	mov	r1, r4
 8001f5a:	4640      	mov	r0, r8
 8001f5c:	f8cd a000 	str.w	sl, [sp]
 8001f60:	aa03      	add	r2, sp, #12
 8001f62:	f7ff fee1 	bl	8001d28 <_printf_common>
 8001f66:	3001      	adds	r0, #1
 8001f68:	d14a      	bne.n	8002000 <_printf_i+0x1f4>
 8001f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6e:	b004      	add	sp, #16
 8001f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	f043 0320 	orr.w	r3, r3, #32
 8001f7a:	6023      	str	r3, [r4, #0]
 8001f7c:	2778      	movs	r7, #120	@ 0x78
 8001f7e:	4832      	ldr	r0, [pc, #200]	@ (8002048 <_printf_i+0x23c>)
 8001f80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	6831      	ldr	r1, [r6, #0]
 8001f88:	061f      	lsls	r7, r3, #24
 8001f8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f8e:	d402      	bmi.n	8001f96 <_printf_i+0x18a>
 8001f90:	065f      	lsls	r7, r3, #25
 8001f92:	bf48      	it	mi
 8001f94:	b2ad      	uxthmi	r5, r5
 8001f96:	6031      	str	r1, [r6, #0]
 8001f98:	07d9      	lsls	r1, r3, #31
 8001f9a:	bf44      	itt	mi
 8001f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8001fa0:	6023      	strmi	r3, [r4, #0]
 8001fa2:	b11d      	cbz	r5, 8001fac <_printf_i+0x1a0>
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	e7ab      	b.n	8001f00 <_printf_i+0xf4>
 8001fa8:	4826      	ldr	r0, [pc, #152]	@ (8002044 <_printf_i+0x238>)
 8001faa:	e7e9      	b.n	8001f80 <_printf_i+0x174>
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	f023 0320 	bic.w	r3, r3, #32
 8001fb2:	6023      	str	r3, [r4, #0]
 8001fb4:	e7f6      	b.n	8001fa4 <_printf_i+0x198>
 8001fb6:	4616      	mov	r6, r2
 8001fb8:	e7bd      	b.n	8001f36 <_printf_i+0x12a>
 8001fba:	6833      	ldr	r3, [r6, #0]
 8001fbc:	6825      	ldr	r5, [r4, #0]
 8001fbe:	1d18      	adds	r0, r3, #4
 8001fc0:	6961      	ldr	r1, [r4, #20]
 8001fc2:	6030      	str	r0, [r6, #0]
 8001fc4:	062e      	lsls	r6, r5, #24
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	d501      	bpl.n	8001fce <_printf_i+0x1c2>
 8001fca:	6019      	str	r1, [r3, #0]
 8001fcc:	e002      	b.n	8001fd4 <_printf_i+0x1c8>
 8001fce:	0668      	lsls	r0, r5, #25
 8001fd0:	d5fb      	bpl.n	8001fca <_printf_i+0x1be>
 8001fd2:	8019      	strh	r1, [r3, #0]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	4616      	mov	r6, r2
 8001fd8:	6123      	str	r3, [r4, #16]
 8001fda:	e7bc      	b.n	8001f56 <_printf_i+0x14a>
 8001fdc:	6833      	ldr	r3, [r6, #0]
 8001fde:	2100      	movs	r1, #0
 8001fe0:	1d1a      	adds	r2, r3, #4
 8001fe2:	6032      	str	r2, [r6, #0]
 8001fe4:	681e      	ldr	r6, [r3, #0]
 8001fe6:	6862      	ldr	r2, [r4, #4]
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f000 f859 	bl	80020a0 <memchr>
 8001fee:	b108      	cbz	r0, 8001ff4 <_printf_i+0x1e8>
 8001ff0:	1b80      	subs	r0, r0, r6
 8001ff2:	6060      	str	r0, [r4, #4]
 8001ff4:	6863      	ldr	r3, [r4, #4]
 8001ff6:	6123      	str	r3, [r4, #16]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ffe:	e7aa      	b.n	8001f56 <_printf_i+0x14a>
 8002000:	4632      	mov	r2, r6
 8002002:	4649      	mov	r1, r9
 8002004:	4640      	mov	r0, r8
 8002006:	6923      	ldr	r3, [r4, #16]
 8002008:	47d0      	blx	sl
 800200a:	3001      	adds	r0, #1
 800200c:	d0ad      	beq.n	8001f6a <_printf_i+0x15e>
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	079b      	lsls	r3, r3, #30
 8002012:	d413      	bmi.n	800203c <_printf_i+0x230>
 8002014:	68e0      	ldr	r0, [r4, #12]
 8002016:	9b03      	ldr	r3, [sp, #12]
 8002018:	4298      	cmp	r0, r3
 800201a:	bfb8      	it	lt
 800201c:	4618      	movlt	r0, r3
 800201e:	e7a6      	b.n	8001f6e <_printf_i+0x162>
 8002020:	2301      	movs	r3, #1
 8002022:	4632      	mov	r2, r6
 8002024:	4649      	mov	r1, r9
 8002026:	4640      	mov	r0, r8
 8002028:	47d0      	blx	sl
 800202a:	3001      	adds	r0, #1
 800202c:	d09d      	beq.n	8001f6a <_printf_i+0x15e>
 800202e:	3501      	adds	r5, #1
 8002030:	68e3      	ldr	r3, [r4, #12]
 8002032:	9903      	ldr	r1, [sp, #12]
 8002034:	1a5b      	subs	r3, r3, r1
 8002036:	42ab      	cmp	r3, r5
 8002038:	dcf2      	bgt.n	8002020 <_printf_i+0x214>
 800203a:	e7eb      	b.n	8002014 <_printf_i+0x208>
 800203c:	2500      	movs	r5, #0
 800203e:	f104 0619 	add.w	r6, r4, #25
 8002042:	e7f5      	b.n	8002030 <_printf_i+0x224>
 8002044:	080021c9 	.word	0x080021c9
 8002048:	080021da 	.word	0x080021da

0800204c <memmove>:
 800204c:	4288      	cmp	r0, r1
 800204e:	b510      	push	{r4, lr}
 8002050:	eb01 0402 	add.w	r4, r1, r2
 8002054:	d902      	bls.n	800205c <memmove+0x10>
 8002056:	4284      	cmp	r4, r0
 8002058:	4623      	mov	r3, r4
 800205a:	d807      	bhi.n	800206c <memmove+0x20>
 800205c:	1e43      	subs	r3, r0, #1
 800205e:	42a1      	cmp	r1, r4
 8002060:	d008      	beq.n	8002074 <memmove+0x28>
 8002062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800206a:	e7f8      	b.n	800205e <memmove+0x12>
 800206c:	4601      	mov	r1, r0
 800206e:	4402      	add	r2, r0
 8002070:	428a      	cmp	r2, r1
 8002072:	d100      	bne.n	8002076 <memmove+0x2a>
 8002074:	bd10      	pop	{r4, pc}
 8002076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800207a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800207e:	e7f7      	b.n	8002070 <memmove+0x24>

08002080 <_sbrk_r>:
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	2300      	movs	r3, #0
 8002084:	4d05      	ldr	r5, [pc, #20]	@ (800209c <_sbrk_r+0x1c>)
 8002086:	4604      	mov	r4, r0
 8002088:	4608      	mov	r0, r1
 800208a:	602b      	str	r3, [r5, #0]
 800208c:	f7fe fa3c 	bl	8000508 <_sbrk>
 8002090:	1c43      	adds	r3, r0, #1
 8002092:	d102      	bne.n	800209a <_sbrk_r+0x1a>
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	b103      	cbz	r3, 800209a <_sbrk_r+0x1a>
 8002098:	6023      	str	r3, [r4, #0]
 800209a:	bd38      	pop	{r3, r4, r5, pc}
 800209c:	20000234 	.word	0x20000234

080020a0 <memchr>:
 80020a0:	4603      	mov	r3, r0
 80020a2:	b510      	push	{r4, lr}
 80020a4:	b2c9      	uxtb	r1, r1
 80020a6:	4402      	add	r2, r0
 80020a8:	4293      	cmp	r3, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	d101      	bne.n	80020b2 <memchr+0x12>
 80020ae:	2000      	movs	r0, #0
 80020b0:	e003      	b.n	80020ba <memchr+0x1a>
 80020b2:	7804      	ldrb	r4, [r0, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	428c      	cmp	r4, r1
 80020b8:	d1f6      	bne.n	80020a8 <memchr+0x8>
 80020ba:	bd10      	pop	{r4, pc}

080020bc <memcpy>:
 80020bc:	440a      	add	r2, r1
 80020be:	4291      	cmp	r1, r2
 80020c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80020c4:	d100      	bne.n	80020c8 <memcpy+0xc>
 80020c6:	4770      	bx	lr
 80020c8:	b510      	push	{r4, lr}
 80020ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020ce:	4291      	cmp	r1, r2
 80020d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020d4:	d1f9      	bne.n	80020ca <memcpy+0xe>
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <_realloc_r>:
 80020d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020dc:	4680      	mov	r8, r0
 80020de:	4615      	mov	r5, r2
 80020e0:	460c      	mov	r4, r1
 80020e2:	b921      	cbnz	r1, 80020ee <_realloc_r+0x16>
 80020e4:	4611      	mov	r1, r2
 80020e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ea:	f7ff bc39 	b.w	8001960 <_malloc_r>
 80020ee:	b92a      	cbnz	r2, 80020fc <_realloc_r+0x24>
 80020f0:	f7ff fbcc 	bl	800188c <_free_r>
 80020f4:	2400      	movs	r4, #0
 80020f6:	4620      	mov	r0, r4
 80020f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020fc:	f000 f81a 	bl	8002134 <_malloc_usable_size_r>
 8002100:	4285      	cmp	r5, r0
 8002102:	4606      	mov	r6, r0
 8002104:	d802      	bhi.n	800210c <_realloc_r+0x34>
 8002106:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800210a:	d8f4      	bhi.n	80020f6 <_realloc_r+0x1e>
 800210c:	4629      	mov	r1, r5
 800210e:	4640      	mov	r0, r8
 8002110:	f7ff fc26 	bl	8001960 <_malloc_r>
 8002114:	4607      	mov	r7, r0
 8002116:	2800      	cmp	r0, #0
 8002118:	d0ec      	beq.n	80020f4 <_realloc_r+0x1c>
 800211a:	42b5      	cmp	r5, r6
 800211c:	462a      	mov	r2, r5
 800211e:	4621      	mov	r1, r4
 8002120:	bf28      	it	cs
 8002122:	4632      	movcs	r2, r6
 8002124:	f7ff ffca 	bl	80020bc <memcpy>
 8002128:	4621      	mov	r1, r4
 800212a:	4640      	mov	r0, r8
 800212c:	f7ff fbae 	bl	800188c <_free_r>
 8002130:	463c      	mov	r4, r7
 8002132:	e7e0      	b.n	80020f6 <_realloc_r+0x1e>

08002134 <_malloc_usable_size_r>:
 8002134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002138:	1f18      	subs	r0, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	bfbc      	itt	lt
 800213e:	580b      	ldrlt	r3, [r1, r0]
 8002140:	18c0      	addlt	r0, r0, r3
 8002142:	4770      	bx	lr

08002144 <_init>:
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	bf00      	nop
 8002148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214a:	bc08      	pop	{r3}
 800214c:	469e      	mov	lr, r3
 800214e:	4770      	bx	lr

08002150 <_fini>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	bf00      	nop
 8002154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002156:	bc08      	pop	{r3}
 8002158:	469e      	mov	lr, r3
 800215a:	4770      	bx	lr
