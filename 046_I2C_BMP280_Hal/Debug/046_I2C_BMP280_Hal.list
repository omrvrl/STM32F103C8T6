
046_I2C_BMP280_Hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003f80  08003f80  00004f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fac  08003fac  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fac  08003fac  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fac  08003fac  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fac  08003fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fb0  08003fb0  00004fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003fb4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003fc0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003fc0  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069e6  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013bf  00000000  00000000  0000ba1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0000d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a35  00000000  00000000  0000db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009222  00000000  00000000  00024545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e09  00000000  00000000  0002d767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c3c  00000000  00000000  000af5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f68 	.word	0x08003f68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003f68 	.word	0x08003f68

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <BMP280_Init>:
signed short dig_P8;
signed short dig_P9;



void BMP280_Init(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	Slave_Scan_Address();
 800093c:	f000 f81e 	bl	800097c <Slave_Scan_Address>
	mdata = BMP280_Config();
 8000940:	f000 f840 	bl	80009c4 <BMP280_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <BMP280_Init+0x3c>)
 800094a:	701a      	strb	r2, [r3, #0]
	Temp = bmp280_compensate_T_double(Read_Adc_tRaw());
 800094c:	f000 f864 	bl	8000a18 <Read_Adc_tRaw>
 8000950:	4603      	mov	r3, r0
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fb30 	bl	8000fb8 <bmp280_compensate_T_double>
 8000958:	4602      	mov	r2, r0
 800095a:	460b      	mov	r3, r1
 800095c:	4610      	mov	r0, r2
 800095e:	4619      	mov	r1, r3
 8000960:	f7ff ffc2 	bl	80008e8 <__aeabi_d2iz>
 8000964:	4603      	mov	r3, r0
 8000966:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <BMP280_Init+0x40>)
 8000968:	6013      	str	r3, [r2, #0]
	BMP280_GetCallibrationValue();
 800096a:	f000 f899 	bl	8000aa0 <BMP280_GetCallibrationValue>

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000030 	.word	0x20000030
 8000978:	20000034 	.word	0x20000034

0800097c <Slave_Scan_Address>:

void Slave_Scan_Address(){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	for(i=0;i <= 256; i++){
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <Slave_Scan_Address+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	e00f      	b.n	80009a8 <Slave_Scan_Address+0x2c>
		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 100) == HAL_OK){
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <Slave_Scan_Address+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	b299      	uxth	r1, r3
 800098e:	2364      	movs	r3, #100	@ 0x64
 8000990:	2201      	movs	r2, #1
 8000992:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <Slave_Scan_Address+0x44>)
 8000994:	f002 f88e 	bl	8002ab4 <HAL_I2C_IsDeviceReady>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00a      	beq.n	80009b4 <Slave_Scan_Address+0x38>
	for(i=0;i <= 256; i++){
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <Slave_Scan_Address+0x40>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <Slave_Scan_Address+0x40>)
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <Slave_Scan_Address+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009b0:	ddea      	ble.n	8000988 <Slave_Scan_Address+0xc>
			break;
		}
	}
}
 80009b2:	e000      	b.n	80009b6 <Slave_Scan_Address+0x3a>
			break;
 80009b4:	bf00      	nop
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000002c 	.word	0x2000002c
 80009c0:	2000005c 	.word	0x2000005c

080009c4 <BMP280_Config>:

uint8_t BMP280_Config(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af04      	add	r7, sp, #16
	uint8_t cdata = 0x03;								// normal mode selection
 80009ca:	2303      	movs	r3, #3
 80009cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, BMP280_Write_SLAVE_ADDRESS, BMP280_Config_ADDR, 1, &cdata, 1, 1000);
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	2301      	movs	r3, #1
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2301      	movs	r3, #1
 80009de:	22f4      	movs	r2, #244	@ 0xf4
 80009e0:	21ec      	movs	r1, #236	@ 0xec
 80009e2:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <BMP280_Config+0x50>)
 80009e4:	f001 fd04 	bl	80023f0 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80009e8:	2005      	movs	r0, #5
 80009ea:	f000 fdaf 	bl	800154c <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP280_Read_SLAVE_ADDRESS, BMP280_Config_ADDR, 1, &cdata,1, 1000);
 80009ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	22f4      	movs	r2, #244	@ 0xf4
 8000a00:	21ed      	movs	r1, #237	@ 0xed
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <BMP280_Config+0x50>)
 8000a04:	f001 fdee 	bl	80025e4 <HAL_I2C_Mem_Read>
	return cdata;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000005c 	.word	0x2000005c

08000a18 <Read_Adc_tRaw>:


int32_t Read_Adc_tRaw(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af04      	add	r7, sp, #16
	uint8_t uTdata[6];
	uint8_t sdata;
	while(HAL_I2C_Mem_Read(&hi2c1, BMP280_Read_SLAVE_ADDRESS, BMP280_STATUS_ADDR, 1, &sdata,1, 1000) != HAL_OK);				// wait until conversion is done
 8000a1e:	bf00      	nop
 8000a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a24:	9302      	str	r3, [sp, #8]
 8000a26:	2301      	movs	r3, #1
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	22f3      	movs	r2, #243	@ 0xf3
 8000a32:	21ed      	movs	r1, #237	@ 0xed
 8000a34:	4817      	ldr	r0, [pc, #92]	@ (8000a94 <Read_Adc_tRaw+0x7c>)
 8000a36:	f001 fdd5 	bl	80025e4 <HAL_I2C_Mem_Read>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1ef      	bne.n	8000a20 <Read_Adc_tRaw+0x8>

	HAL_I2C_Mem_Read(&hi2c1, BMP280_Read_SLAVE_ADDRESS, BMP280_TEMP_REG_ADDRESS, 1, uTdata, 6, 10000);
 8000a40:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a44:	9302      	str	r3, [sp, #8]
 8000a46:	2306      	movs	r3, #6
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	22fa      	movs	r2, #250	@ 0xfa
 8000a54:	21ed      	movs	r1, #237	@ 0xed
 8000a56:	480f      	ldr	r0, [pc, #60]	@ (8000a94 <Read_Adc_tRaw+0x7c>)
 8000a58:	f001 fdc4 	bl	80025e4 <HAL_I2C_Mem_Read>

	uT = (uTdata[0] << 12 | uTdata[1] << 4 | uTdata[2] >> 4);
 8000a5c:	7a3b      	ldrb	r3, [r7, #8]
 8000a5e:	031a      	lsls	r2, r3, #12
 8000a60:	7a7b      	ldrb	r3, [r7, #9]
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	4313      	orrs	r3, r2
 8000a66:	7aba      	ldrb	r2, [r7, #10]
 8000a68:	0912      	lsrs	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <Read_Adc_tRaw+0x80>)
 8000a70:	6013      	str	r3, [r2, #0]
	uP = (uTdata[3] << 12 | uTdata[4] << 4 | uTdata[5] >> 4);
 8000a72:	7afb      	ldrb	r3, [r7, #11]
 8000a74:	031a      	lsls	r2, r3, #12
 8000a76:	7b3b      	ldrb	r3, [r7, #12]
 8000a78:	011b      	lsls	r3, r3, #4
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	7b7a      	ldrb	r2, [r7, #13]
 8000a7e:	0912      	lsrs	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	4313      	orrs	r3, r2
 8000a84:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <Read_Adc_tRaw+0x84>)
 8000a86:	6013      	str	r3, [r2, #0]

	return uT;
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <Read_Adc_tRaw+0x80>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000005c 	.word	0x2000005c
 8000a98:	20000038 	.word	0x20000038
 8000a9c:	2000003c 	.word	0x2000003c

08000aa0 <BMP280_GetCallibrationValue>:

void BMP280_GetCallibrationValue(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af04      	add	r7, sp, #16
	uint8_t CallBuffer[BMP280_CALL_REGISTER_LENGTH] = {0};
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]


	HAL_I2C_Mem_Read(&hi2c1, BMP280_Read_SLAVE_ADDRESS, BMP280_CALL_REGISTER_ADDRESS, 1, CallBuffer, BMP280_CALL_REGISTER_LENGTH, 1000);
 8000ab8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	2318      	movs	r3, #24
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	2288      	movs	r2, #136	@ 0x88
 8000aca:	21ed      	movs	r1, #237	@ 0xed
 8000acc:	48b7      	ldr	r0, [pc, #732]	@ (8000dac <BMP280_GetCallibrationValue+0x30c>)
 8000ace:	f001 fd89 	bl	80025e4 <HAL_I2C_Mem_Read>

	dig_t1 = (CallBuffer[a] << 8) | (CallBuffer[a+1]); a= a+2;
 8000ad2:	4bb7      	ldr	r3, [pc, #732]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ad8:	3318      	adds	r3, #24
 8000ada:	443b      	add	r3, r7
 8000adc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	4bb2      	ldr	r3, [pc, #712]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8000aea:	3301      	adds	r3, #1
 8000aec:	3318      	adds	r3, #24
 8000aee:	443b      	add	r3, r7
 8000af0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4bad      	ldr	r3, [pc, #692]	@ (8000db4 <BMP280_GetCallibrationValue+0x314>)
 8000afe:	801a      	strh	r2, [r3, #0]
 8000b00:	4bab      	ldr	r3, [pc, #684]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b02:	f993 3000 	ldrsb.w	r3, [r3]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	3302      	adds	r3, #2
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b25a      	sxtb	r2, r3
 8000b0e:	4ba8      	ldr	r3, [pc, #672]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b10:	701a      	strb	r2, [r3, #0]
	dig_t2 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000b12:	4ba7      	ldr	r3, [pc, #668]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b14:	f993 3000 	ldrsb.w	r3, [r3]
 8000b18:	3318      	adds	r3, #24
 8000b1a:	443b      	add	r3, r7
 8000b1c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	4ba2      	ldr	r3, [pc, #648]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b26:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	3318      	adds	r3, #24
 8000b2e:	443b      	add	r3, r7
 8000b30:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	4b9f      	ldr	r3, [pc, #636]	@ (8000db8 <BMP280_GetCallibrationValue+0x318>)
 8000b3c:	801a      	strh	r2, [r3, #0]
 8000b3e:	4b9c      	ldr	r3, [pc, #624]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b40:	f993 3000 	ldrsb.w	r3, [r3]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	3302      	adds	r3, #2
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	b25a      	sxtb	r2, r3
 8000b4c:	4b98      	ldr	r3, [pc, #608]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b4e:	701a      	strb	r2, [r3, #0]
	dig_t3 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000b50:	4b97      	ldr	r3, [pc, #604]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b52:	f993 3000 	ldrsb.w	r3, [r3]
 8000b56:	3318      	adds	r3, #24
 8000b58:	443b      	add	r3, r7
 8000b5a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b5e:	021b      	lsls	r3, r3, #8
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	4b93      	ldr	r3, [pc, #588]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b64:	f993 3000 	ldrsb.w	r3, [r3]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	3318      	adds	r3, #24
 8000b6c:	443b      	add	r3, r7
 8000b6e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	4b90      	ldr	r3, [pc, #576]	@ (8000dbc <BMP280_GetCallibrationValue+0x31c>)
 8000b7a:	801a      	strh	r2, [r3, #0]
 8000b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	3302      	adds	r3, #2
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	b25a      	sxtb	r2, r3
 8000b8a:	4b89      	ldr	r3, [pc, #548]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b8c:	701a      	strb	r2, [r3, #0]
	dig_P1 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000b8e:	4b88      	ldr	r3, [pc, #544]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000b90:	f993 3000 	ldrsb.w	r3, [r3]
 8000b94:	3318      	adds	r3, #24
 8000b96:	443b      	add	r3, r7
 8000b98:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	4b83      	ldr	r3, [pc, #524]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	3318      	adds	r3, #24
 8000baa:	443b      	add	r3, r7
 8000bac:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b81      	ldr	r3, [pc, #516]	@ (8000dc0 <BMP280_GetCallibrationValue+0x320>)
 8000bba:	801a      	strh	r2, [r3, #0]
 8000bbc:	4b7c      	ldr	r3, [pc, #496]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000bbe:	f993 3000 	ldrsb.w	r3, [r3]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	b25a      	sxtb	r2, r3
 8000bca:	4b79      	ldr	r3, [pc, #484]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000bcc:	701a      	strb	r2, [r3, #0]
	dig_P2 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000bce:	4b78      	ldr	r3, [pc, #480]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000bd0:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd4:	3318      	adds	r3, #24
 8000bd6:	443b      	add	r3, r7
 8000bd8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	4b73      	ldr	r3, [pc, #460]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000be2:	f993 3000 	ldrsb.w	r3, [r3]
 8000be6:	3301      	adds	r3, #1
 8000be8:	3318      	adds	r3, #24
 8000bea:	443b      	add	r3, r7
 8000bec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	4b73      	ldr	r3, [pc, #460]	@ (8000dc4 <BMP280_GetCallibrationValue+0x324>)
 8000bf8:	801a      	strh	r2, [r3, #0]
 8000bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	3302      	adds	r3, #2
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	b25a      	sxtb	r2, r3
 8000c08:	4b69      	ldr	r3, [pc, #420]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c0a:	701a      	strb	r2, [r3, #0]
	dig_P3 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000c0c:	4b68      	ldr	r3, [pc, #416]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c12:	3318      	adds	r3, #24
 8000c14:	443b      	add	r3, r7
 8000c16:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	4b64      	ldr	r3, [pc, #400]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c20:	f993 3000 	ldrsb.w	r3, [r3]
 8000c24:	3301      	adds	r3, #1
 8000c26:	3318      	adds	r3, #24
 8000c28:	443b      	add	r3, r7
 8000c2a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	4b64      	ldr	r3, [pc, #400]	@ (8000dc8 <BMP280_GetCallibrationValue+0x328>)
 8000c36:	801a      	strh	r2, [r3, #0]
 8000c38:	4b5d      	ldr	r3, [pc, #372]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	3302      	adds	r3, #2
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	b25a      	sxtb	r2, r3
 8000c46:	4b5a      	ldr	r3, [pc, #360]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c48:	701a      	strb	r2, [r3, #0]
	dig_P4 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000c4a:	4b59      	ldr	r3, [pc, #356]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c4c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c50:	3318      	adds	r3, #24
 8000c52:	443b      	add	r3, r7
 8000c54:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	4b54      	ldr	r3, [pc, #336]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c62:	3301      	adds	r3, #1
 8000c64:	3318      	adds	r3, #24
 8000c66:	443b      	add	r3, r7
 8000c68:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	4b56      	ldr	r3, [pc, #344]	@ (8000dcc <BMP280_GetCallibrationValue+0x32c>)
 8000c74:	801a      	strh	r2, [r3, #0]
 8000c76:	4b4e      	ldr	r3, [pc, #312]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c78:	f993 3000 	ldrsb.w	r3, [r3]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	3302      	adds	r3, #2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	b25a      	sxtb	r2, r3
 8000c84:	4b4a      	ldr	r3, [pc, #296]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c86:	701a      	strb	r2, [r3, #0]
	dig_P5 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000c88:	4b49      	ldr	r3, [pc, #292]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c8e:	3318      	adds	r3, #24
 8000c90:	443b      	add	r3, r7
 8000c92:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	4b45      	ldr	r3, [pc, #276]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000c9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	443b      	add	r3, r7
 8000ca6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	4b47      	ldr	r3, [pc, #284]	@ (8000dd0 <BMP280_GetCallibrationValue+0x330>)
 8000cb2:	801a      	strh	r2, [r3, #0]
 8000cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	b25a      	sxtb	r2, r3
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000cc4:	701a      	strb	r2, [r3, #0]
	dig_P6 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	4b35      	ldr	r3, [pc, #212]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000cda:	f993 3000 	ldrsb.w	r3, [r3]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	443b      	add	r3, r7
 8000ce4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	4b39      	ldr	r3, [pc, #228]	@ (8000dd4 <BMP280_GetCallibrationValue+0x334>)
 8000cf0:	801a      	strh	r2, [r3, #0]
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	4b2b      	ldr	r3, [pc, #172]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d02:	701a      	strb	r2, [r3, #0]
	dig_P7 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000d04:	4b2a      	ldr	r3, [pc, #168]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d06:	f993 3000 	ldrsb.w	r3, [r3]
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	443b      	add	r3, r7
 8000d0e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d18:	f993 3000 	ldrsb.w	r3, [r3]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	3318      	adds	r3, #24
 8000d20:	443b      	add	r3, r7
 8000d22:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <BMP280_GetCallibrationValue+0x338>)
 8000d2e:	801a      	strh	r2, [r3, #0]
 8000d30:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d32:	f993 3000 	ldrsb.w	r3, [r3]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	3302      	adds	r3, #2
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	b25a      	sxtb	r2, r3
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d40:	701a      	strb	r2, [r3, #0]
	dig_P8 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d44:	f993 3000 	ldrsb.w	r3, [r3]
 8000d48:	3318      	adds	r3, #24
 8000d4a:	443b      	add	r3, r7
 8000d4c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d56:	f993 3000 	ldrsb.w	r3, [r3]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	3318      	adds	r3, #24
 8000d5e:	443b      	add	r3, r7
 8000d60:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21a      	sxth	r2, r3
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <BMP280_GetCallibrationValue+0x33c>)
 8000d6c:	801a      	strh	r2, [r3, #0]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d70:	f993 3000 	ldrsb.w	r3, [r3]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	3302      	adds	r3, #2
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	b25a      	sxtb	r2, r3
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	dig_P9 = CallBuffer[a] << 8 | CallBuffer[a+1]; a= a+2;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d82:	f993 3000 	ldrsb.w	r3, [r3]
 8000d86:	3318      	adds	r3, #24
 8000d88:	443b      	add	r3, r7
 8000d8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <BMP280_GetCallibrationValue+0x310>)
 8000d94:	f993 3000 	ldrsb.w	r3, [r3]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	3318      	adds	r3, #24
 8000d9c:	443b      	add	r3, r7
 8000d9e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	e01a      	b.n	8000de0 <BMP280_GetCallibrationValue+0x340>
 8000daa:	bf00      	nop
 8000dac:	2000005c 	.word	0x2000005c
 8000db0:	20000028 	.word	0x20000028
 8000db4:	20000040 	.word	0x20000040
 8000db8:	20000042 	.word	0x20000042
 8000dbc:	20000044 	.word	0x20000044
 8000dc0:	20000046 	.word	0x20000046
 8000dc4:	20000048 	.word	0x20000048
 8000dc8:	2000004a 	.word	0x2000004a
 8000dcc:	2000004c 	.word	0x2000004c
 8000dd0:	2000004e 	.word	0x2000004e
 8000dd4:	20000050 	.word	0x20000050
 8000dd8:	20000052 	.word	0x20000052
 8000ddc:	20000054 	.word	0x20000054
 8000de0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f1c <BMP280_GetCallibrationValue+0x47c>)
 8000de2:	801a      	strh	r2, [r3, #0]
 8000de4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f20 <BMP280_GetCallibrationValue+0x480>)
 8000de6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	3302      	adds	r3, #2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <BMP280_GetCallibrationValue+0x480>)
 8000df4:	701a      	strb	r2, [r3, #0]


	if(dig_t1 == 0x0000 || dig_t1 == 0xFFFF)
 8000df6:	4b4b      	ldr	r3, [pc, #300]	@ (8000f24 <BMP280_GetCallibrationValue+0x484>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <BMP280_GetCallibrationValue+0x36a>
 8000dfe:	4b49      	ldr	r3, [pc, #292]	@ (8000f24 <BMP280_GetCallibrationValue+0x484>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d105      	bne.n	8000e16 <BMP280_GetCallibrationValue+0x376>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e10:	4845      	ldr	r0, [pc, #276]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000e12:	f000 fe27 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_t2 == 0x0000 || dig_t2 == 0xFFFF)
 8000e16:	4b45      	ldr	r3, [pc, #276]	@ (8000f2c <BMP280_GetCallibrationValue+0x48c>)
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d105      	bne.n	8000e2c <BMP280_GetCallibrationValue+0x38c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e26:	4840      	ldr	r0, [pc, #256]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000e28:	f000 fe1c 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_t3 == 0x0000 || dig_t3 == 0xFFFF)
 8000e2c:	4b40      	ldr	r3, [pc, #256]	@ (8000f30 <BMP280_GetCallibrationValue+0x490>)
 8000e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d105      	bne.n	8000e42 <BMP280_GetCallibrationValue+0x3a2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	483a      	ldr	r0, [pc, #232]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000e3e:	f000 fe11 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P1 == 0x0000 || dig_P1 == 0xFFFF)
 8000e42:	4b3c      	ldr	r3, [pc, #240]	@ (8000f34 <BMP280_GetCallibrationValue+0x494>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <BMP280_GetCallibrationValue+0x3b6>
 8000e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f34 <BMP280_GetCallibrationValue+0x494>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d105      	bne.n	8000e62 <BMP280_GetCallibrationValue+0x3c2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e5c:	4832      	ldr	r0, [pc, #200]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000e5e:	f000 fe01 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P2 == 0x0000 || dig_P2 == 0xFFFF)
 8000e62:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <BMP280_GetCallibrationValue+0x498>)
 8000e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <BMP280_GetCallibrationValue+0x3d8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e72:	482d      	ldr	r0, [pc, #180]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000e74:	f000 fdf6 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P3 == 0x0000 || dig_P3 == 0xFFFF)
 8000e78:	4b30      	ldr	r3, [pc, #192]	@ (8000f3c <BMP280_GetCallibrationValue+0x49c>)
 8000e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d105      	bne.n	8000e8e <BMP280_GetCallibrationValue+0x3ee>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e88:	4827      	ldr	r0, [pc, #156]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000e8a:	f000 fdeb 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P4 == 0x0000 || dig_P4 == 0xFFFF)
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <BMP280_GetCallibrationValue+0x4a0>)
 8000e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d105      	bne.n	8000ea4 <BMP280_GetCallibrationValue+0x404>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e9e:	4822      	ldr	r0, [pc, #136]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000ea0:	f000 fde0 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P5 == 0x0000 || dig_P5 == 0xFFFF)
 8000ea4:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <BMP280_GetCallibrationValue+0x4a4>)
 8000ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d105      	bne.n	8000eba <BMP280_GetCallibrationValue+0x41a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eb4:	481c      	ldr	r0, [pc, #112]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000eb6:	f000 fdd5 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P6 == 0x0000 || dig_P6 == 0xFFFF)
 8000eba:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <BMP280_GetCallibrationValue+0x4a8>)
 8000ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d105      	bne.n	8000ed0 <BMP280_GetCallibrationValue+0x430>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eca:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000ecc:	f000 fdca 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P7 == 0x0000 || dig_P7 == 0xFFFF)
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <BMP280_GetCallibrationValue+0x4ac>)
 8000ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d105      	bne.n	8000ee6 <BMP280_GetCallibrationValue+0x446>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee0:	4811      	ldr	r0, [pc, #68]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000ee2:	f000 fdbf 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P8 == 0x0000 || dig_P8 == 0xFFFF)
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <BMP280_GetCallibrationValue+0x4b0>)
 8000ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <BMP280_GetCallibrationValue+0x45c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef6:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000ef8:	f000 fdb4 	bl	8001a64 <HAL_GPIO_WritePin>
	if(dig_P9 == 0x0000 || dig_P9 == 0xFFFF)
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <BMP280_GetCallibrationValue+0x47c>)
 8000efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d105      	bne.n	8000f12 <BMP280_GetCallibrationValue+0x472>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f0c:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <BMP280_GetCallibrationValue+0x488>)
 8000f0e:	f000 fda9 	bl	8001a64 <HAL_GPIO_WritePin>

}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000056 	.word	0x20000056
 8000f20:	20000028 	.word	0x20000028
 8000f24:	20000040 	.word	0x20000040
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	20000042 	.word	0x20000042
 8000f30:	20000044 	.word	0x20000044
 8000f34:	20000046 	.word	0x20000046
 8000f38:	20000048 	.word	0x20000048
 8000f3c:	2000004a 	.word	0x2000004a
 8000f40:	2000004c 	.word	0x2000004c
 8000f44:	2000004e 	.word	0x2000004e
 8000f48:	20000050 	.word	0x20000050
 8000f4c:	20000052 	.word	0x20000052
 8000f50:	20000054 	.word	0x20000054

08000f54 <read_word_data>:
//		var2 = ( ((double)part1) * ((double) part1) *  ((double) dig_t3) );
//		tfine =  (var1 + var2);
//		Temp = (tfine / 5120);
//}

int32_t read_word_data(uint8_t reg_addr) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
    int16_t data[2];
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BMP280_Write_SLAVE_ADDRESS, &reg_addr, 1, HAL_MAX_DELAY);
 8000f5e:	1dfa      	adds	r2, r7, #7
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	21ec      	movs	r1, #236	@ 0xec
 8000f6a:	4812      	ldr	r0, [pc, #72]	@ (8000fb4 <read_word_data+0x60>)
 8000f6c:	f000 fed6 	bl	8001d1c <HAL_I2C_Master_Transmit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK != status) {
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <read_word_data+0x2a>
        return 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e016      	b.n	8000fac <read_word_data+0x58>
    }
    status = HAL_I2C_Master_Receive(&hi2c1, BMP280_Read_SLAVE_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2302      	movs	r3, #2
 8000f8a:	21ed      	movs	r1, #237	@ 0xed
 8000f8c:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <read_word_data+0x60>)
 8000f8e:	f000 ffc3 	bl	8001f18 <HAL_I2C_Master_Receive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK != status) {
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <read_word_data+0x4c>
        return 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e005      	b.n	8000fac <read_word_data+0x58>
    }
    return (int32_t)((data[0] << 8) | data[1]);
 8000fa0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000faa:	4313      	orrs	r3, r2
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000005c 	.word	0x2000005c

08000fb8 <bmp280_compensate_T_double>:

BMP280_S32_t t_fine;
double bmp280_compensate_T_double(BMP280_S32_t adc_T)
{
 8000fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fbc:	b088      	sub	sp, #32
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	double var1, var2, T;
	dig_t1 = read_word_data(BMP280_REG_DIG_T1);
 8000fc2:	2088      	movs	r0, #136	@ 0x88
 8000fc4:	f7ff ffc6 	bl	8000f54 <read_word_data>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b60      	ldr	r3, [pc, #384]	@ (8001150 <bmp280_compensate_T_double+0x198>)
 8000fce:	801a      	strh	r2, [r3, #0]
	dig_t2 = read_word_data(BMP280_REG_DIG_T2);
 8000fd0:	208a      	movs	r0, #138	@ 0x8a
 8000fd2:	f7ff ffbf 	bl	8000f54 <read_word_data>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b5e      	ldr	r3, [pc, #376]	@ (8001154 <bmp280_compensate_T_double+0x19c>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	dig_t3 = read_word_data(BMP280_REG_DIG_T3);
 8000fde:	208c      	movs	r0, #140	@ 0x8c
 8000fe0:	f7ff ffb8 	bl	8000f54 <read_word_data>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8001158 <bmp280_compensate_T_double+0x1a0>)
 8000fea:	801a      	strh	r2, [r3, #0]

	var1 = (((double)adc_T)/16384.0 - ((double)dig_t1)/1024.0) * ((double)dig_t2);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f9ff 	bl	80003f0 <__aeabi_i2d>
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b59      	ldr	r3, [pc, #356]	@ (800115c <bmp280_compensate_T_double+0x1a4>)
 8000ff8:	f7ff fb8e 	bl	8000718 <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4614      	mov	r4, r2
 8001002:	461d      	mov	r5, r3
 8001004:	4b52      	ldr	r3, [pc, #328]	@ (8001150 <bmp280_compensate_T_double+0x198>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f9e1 	bl	80003d0 <__aeabi_ui2d>
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	4b53      	ldr	r3, [pc, #332]	@ (8001160 <bmp280_compensate_T_double+0x1a8>)
 8001014:	f7ff fb80 	bl	8000718 <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4620      	mov	r0, r4
 800101e:	4629      	mov	r1, r5
 8001020:	f7ff f898 	bl	8000154 <__aeabi_dsub>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4614      	mov	r4, r2
 800102a:	461d      	mov	r5, r3
 800102c:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <bmp280_compensate_T_double+0x19c>)
 800102e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f9dc 	bl	80003f0 <__aeabi_i2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4620      	mov	r0, r4
 800103e:	4629      	mov	r1, r5
 8001040:	f7ff fa40 	bl	80004c4 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = ((((double)adc_T)/131072.0 - ((double)dig_t1)/8192.0) * (((double)adc_T)/131072.0 - ((double) dig_t1)/8192.0)) * ((double)dig_t3);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff f9cf 	bl	80003f0 <__aeabi_i2d>
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800105a:	f7ff fb5d 	bl	8000718 <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4614      	mov	r4, r2
 8001064:	461d      	mov	r5, r3
 8001066:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <bmp280_compensate_T_double+0x198>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f9b0 	bl	80003d0 <__aeabi_ui2d>
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b3b      	ldr	r3, [pc, #236]	@ (8001164 <bmp280_compensate_T_double+0x1ac>)
 8001076:	f7ff fb4f 	bl	8000718 <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff f867 	bl	8000154 <__aeabi_dsub>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4614      	mov	r4, r2
 800108c:	461d      	mov	r5, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f9ae 	bl	80003f0 <__aeabi_i2d>
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800109c:	f7ff fb3c 	bl	8000718 <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4690      	mov	r8, r2
 80010a6:	4699      	mov	r9, r3
 80010a8:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <bmp280_compensate_T_double+0x198>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f98f 	bl	80003d0 <__aeabi_ui2d>
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001164 <bmp280_compensate_T_double+0x1ac>)
 80010b8:	f7ff fb2e 	bl	8000718 <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4640      	mov	r0, r8
 80010c2:	4649      	mov	r1, r9
 80010c4:	f7ff f846 	bl	8000154 <__aeabi_dsub>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4620      	mov	r0, r4
 80010ce:	4629      	mov	r1, r5
 80010d0:	f7ff f9f8 	bl	80004c4 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	461d      	mov	r5, r3
 80010dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <bmp280_compensate_T_double+0x1a0>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f984 	bl	80003f0 <__aeabi_i2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff f9e8 	bl	80004c4 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t_fine = (BMP280_S32_t)(var1 + var2);
 80010fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001100:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001104:	f7ff f828 	bl	8000158 <__adddf3>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fbea 	bl	80008e8 <__aeabi_d2iz>
 8001114:	4603      	mov	r3, r0
 8001116:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <bmp280_compensate_T_double+0x1b0>)
 8001118:	6013      	str	r3, [r2, #0]
	T = (var1 + var2) / 5120.0;
 800111a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800111e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001122:	f7ff f819 	bl	8000158 <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <bmp280_compensate_T_double+0x1b4>)
 8001134:	f7ff faf0 	bl	8000718 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return T;
 8001140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001150:	20000040 	.word	0x20000040
 8001154:	20000042 	.word	0x20000042
 8001158:	20000044 	.word	0x20000044
 800115c:	40d00000 	.word	0x40d00000
 8001160:	40900000 	.word	0x40900000
 8001164:	40c00000 	.word	0x40c00000
 8001168:	20000058 	.word	0x20000058
 800116c:	40b40000 	.word	0x40b40000

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001174:	f000 f988 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001178:	f000 f808 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f000 f876 	bl	800126c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001180:	f000 f846 	bl	8001210 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  BMP280_Init();
  /* USER CODE END 2 */
  BMP280_Init();
 8001184:	f7ff fbd8 	bl	8000938 <BMP280_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <main+0x18>

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b090      	sub	sp, #64	@ 0x40
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	2228      	movs	r2, #40	@ 0x28
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f002 feb8 	bl	8003f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b6:	2310      	movs	r3, #16
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011be:	2300      	movs	r3, #0
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011c2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 faa3 	bl	8003718 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011d8:	f000 f888 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fd10 	bl	8003c1c <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001202:	f000 f873 	bl	80012ec <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3740      	adds	r7, #64	@ 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f000 fc21 	bl	8001a94 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 f848 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000005c 	.word	0x2000005c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_GPIO_Init+0x78>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <MX_GPIO_Init+0x78>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_GPIO_Init+0x78>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_GPIO_Init+0x78>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a11      	ldr	r2, [pc, #68]	@ (80012e4 <MX_GPIO_Init+0x78>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_GPIO_Init+0x78>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80012b6:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_GPIO_Init+0x7c>)
 80012b8:	f000 fbd4 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012bc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2302      	movs	r3, #2
 80012cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4619      	mov	r1, r3
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <MX_GPIO_Init+0x7c>)
 80012d6:	f000 fa41 	bl	800175c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010c00 	.word	0x40010c00

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <Error_Handler+0x8>

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_MspInit+0x5c>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <HAL_MspInit+0x5c>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6193      	str	r3, [r2, #24]
 800130a:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_MspInit+0x5c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_MspInit+0x5c>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a0e      	ldr	r2, [pc, #56]	@ (8001354 <HAL_MspInit+0x5c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_MspInit+0x5c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_MspInit+0x60>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <HAL_MspInit+0x60>)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <HAL_I2C_MspInit+0x70>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d123      	bne.n	80013c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_I2C_MspInit+0x74>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <HAL_I2C_MspInit+0x74>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_I2C_MspInit+0x74>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001394:	23c0      	movs	r3, #192	@ 0xc0
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001398:	2312      	movs	r3, #18
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <HAL_I2C_MspInit+0x78>)
 80013a8:	f000 f9d8 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <HAL_I2C_MspInit+0x74>)
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <HAL_I2C_MspInit+0x74>)
 80013b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013b6:	61d3      	str	r3, [r2, #28]
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_I2C_MspInit+0x74>)
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40005400 	.word	0x40005400
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010c00 	.word	0x40010c00

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <NMI_Handler+0x4>

080013e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <MemManage_Handler+0x4>

080013f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <UsageFault_Handler+0x4>

08001400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f874 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800143c:	f7ff fff8 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480b      	ldr	r0, [pc, #44]	@ (8001470 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001442:	490c      	ldr	r1, [pc, #48]	@ (8001474 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001444:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a09      	ldr	r2, [pc, #36]	@ (800147c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001458:	4c09      	ldr	r4, [pc, #36]	@ (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f002 fd5b 	bl	8003f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146a:	f7ff fe81 	bl	8001170 <main>
  bx lr
 800146e:	4770      	bx	lr
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001478:	08003fb4 	.word	0x08003fb4
  ldr r2, =_sbss
 800147c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001480:	200000b4 	.word	0x200000b4

08001484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_2_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <HAL_Init+0x28>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <HAL_Init+0x28>)
 8001492:	f043 0310 	orr.w	r3, r3, #16
 8001496:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f92b 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149e:	200f      	movs	r0, #15
 80014a0:	f000 f808 	bl	80014b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a4:	f7ff ff28 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40022000 	.word	0x40022000

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_InitTick+0x54>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f935 	bl	8001742 <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00e      	b.n	8001500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d80a      	bhi.n	80014fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 f90b 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f4:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <HAL_InitTick+0x5c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000000 	.word	0x20000000
 800150c:	20000008 	.word	0x20000008
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_IncTick+0x1c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_IncTick+0x20>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a03      	ldr	r2, [pc, #12]	@ (8001534 <HAL_IncTick+0x20>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000008 	.word	0x20000008
 8001534:	200000b0 	.word	0x200000b0

08001538 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b02      	ldr	r3, [pc, #8]	@ (8001548 <HAL_GetTick+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	200000b0 	.word	0x200000b0

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff fff0 	bl	8001538 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffe0 	bl	8001538 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff90 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff49 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff5e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff90 	bl	800164c <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5f 	bl	80015f8 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffb0 	bl	80016b0 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b08b      	sub	sp, #44	@ 0x2c
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e169      	b.n	8001a44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001770:	2201      	movs	r2, #1
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 8158 	bne.w	8001a3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a9a      	ldr	r2, [pc, #616]	@ (80019fc <HAL_GPIO_Init+0x2a0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d05e      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 8001798:	4a98      	ldr	r2, [pc, #608]	@ (80019fc <HAL_GPIO_Init+0x2a0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d875      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 800179e:	4a98      	ldr	r2, [pc, #608]	@ (8001a00 <HAL_GPIO_Init+0x2a4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d058      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017a4:	4a96      	ldr	r2, [pc, #600]	@ (8001a00 <HAL_GPIO_Init+0x2a4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d86f      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017aa:	4a96      	ldr	r2, [pc, #600]	@ (8001a04 <HAL_GPIO_Init+0x2a8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d052      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017b0:	4a94      	ldr	r2, [pc, #592]	@ (8001a04 <HAL_GPIO_Init+0x2a8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d869      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017b6:	4a94      	ldr	r2, [pc, #592]	@ (8001a08 <HAL_GPIO_Init+0x2ac>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04c      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017bc:	4a92      	ldr	r2, [pc, #584]	@ (8001a08 <HAL_GPIO_Init+0x2ac>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d863      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017c2:	4a92      	ldr	r2, [pc, #584]	@ (8001a0c <HAL_GPIO_Init+0x2b0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d046      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017c8:	4a90      	ldr	r2, [pc, #576]	@ (8001a0c <HAL_GPIO_Init+0x2b0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d85d      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d82a      	bhi.n	8001828 <HAL_GPIO_Init+0xcc>
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d859      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017d6:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <HAL_GPIO_Init+0x80>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	08001857 	.word	0x08001857
 80017e0:	08001831 	.word	0x08001831
 80017e4:	08001843 	.word	0x08001843
 80017e8:	08001885 	.word	0x08001885
 80017ec:	0800188b 	.word	0x0800188b
 80017f0:	0800188b 	.word	0x0800188b
 80017f4:	0800188b 	.word	0x0800188b
 80017f8:	0800188b 	.word	0x0800188b
 80017fc:	0800188b 	.word	0x0800188b
 8001800:	0800188b 	.word	0x0800188b
 8001804:	0800188b 	.word	0x0800188b
 8001808:	0800188b 	.word	0x0800188b
 800180c:	0800188b 	.word	0x0800188b
 8001810:	0800188b 	.word	0x0800188b
 8001814:	0800188b 	.word	0x0800188b
 8001818:	0800188b 	.word	0x0800188b
 800181c:	0800188b 	.word	0x0800188b
 8001820:	08001839 	.word	0x08001839
 8001824:	0800184d 	.word	0x0800184d
 8001828:	4a79      	ldr	r2, [pc, #484]	@ (8001a10 <HAL_GPIO_Init+0x2b4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182e:	e02c      	b.n	800188a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e029      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	3304      	adds	r3, #4
 800183e:	623b      	str	r3, [r7, #32]
          break;
 8001840:	e024      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	3308      	adds	r3, #8
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e01f      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	330c      	adds	r3, #12
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e01a      	b.n	800188c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185e:	2304      	movs	r3, #4
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e013      	b.n	800188c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	611a      	str	r2, [r3, #16]
          break;
 8001876:	e009      	b.n	800188c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	615a      	str	r2, [r3, #20]
          break;
 8001882:	e003      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x130>
          break;
 800188a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2bff      	cmp	r3, #255	@ 0xff
 8001890:	d801      	bhi.n	8001896 <HAL_GPIO_Init+0x13a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	e001      	b.n	800189a <HAL_GPIO_Init+0x13e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3304      	adds	r3, #4
 800189a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2bff      	cmp	r3, #255	@ 0xff
 80018a0:	d802      	bhi.n	80018a8 <HAL_GPIO_Init+0x14c>
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x152>
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	3b08      	subs	r3, #8
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	210f      	movs	r1, #15
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	6a39      	ldr	r1, [r7, #32]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	431a      	orrs	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80b1 	beq.w	8001a3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a14 <HAL_GPIO_Init+0x2b8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001a14 <HAL_GPIO_Init+0x2b8>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001a14 <HAL_GPIO_Init+0x2b8>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f4:	4a48      	ldr	r2, [pc, #288]	@ (8001a18 <HAL_GPIO_Init+0x2bc>)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a40      	ldr	r2, [pc, #256]	@ (8001a1c <HAL_GPIO_Init+0x2c0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d013      	beq.n	8001948 <HAL_GPIO_Init+0x1ec>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3f      	ldr	r2, [pc, #252]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00d      	beq.n	8001944 <HAL_GPIO_Init+0x1e8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a24 <HAL_GPIO_Init+0x2c8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d007      	beq.n	8001940 <HAL_GPIO_Init+0x1e4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3d      	ldr	r2, [pc, #244]	@ (8001a28 <HAL_GPIO_Init+0x2cc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_GPIO_Init+0x1e0>
 8001938:	2303      	movs	r3, #3
 800193a:	e006      	b.n	800194a <HAL_GPIO_Init+0x1ee>
 800193c:	2304      	movs	r3, #4
 800193e:	e004      	b.n	800194a <HAL_GPIO_Init+0x1ee>
 8001940:	2302      	movs	r3, #2
 8001942:	e002      	b.n	800194a <HAL_GPIO_Init+0x1ee>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_GPIO_Init+0x1ee>
 8001948:	2300      	movs	r3, #0
 800194a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800194c:	f002 0203 	and.w	r2, r2, #3
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	4093      	lsls	r3, r2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800195a:	492f      	ldr	r1, [pc, #188]	@ (8001a18 <HAL_GPIO_Init+0x2bc>)
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001974:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	492c      	ldr	r1, [pc, #176]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001982:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	4928      	ldr	r1, [pc, #160]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 800198c:	4013      	ands	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800199c:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4922      	ldr	r1, [pc, #136]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	491e      	ldr	r1, [pc, #120]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4918      	ldr	r1, [pc, #96]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019d2:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4914      	ldr	r1, [pc, #80]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d021      	beq.n	8001a30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	490e      	ldr	r1, [pc, #56]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e021      	b.n	8001a3e <HAL_GPIO_Init+0x2e2>
 80019fa:	bf00      	nop
 80019fc:	10320000 	.word	0x10320000
 8001a00:	10310000 	.word	0x10310000
 8001a04:	10220000 	.word	0x10220000
 8001a08:	10210000 	.word	0x10210000
 8001a0c:	10120000 	.word	0x10120000
 8001a10:	10110000 	.word	0x10110000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	40010800 	.word	0x40010800
 8001a20:	40010c00 	.word	0x40010c00
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40011400 	.word	0x40011400
 8001a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_GPIO_Init+0x304>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4909      	ldr	r1, [pc, #36]	@ (8001a60 <HAL_GPIO_Init+0x304>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	3301      	adds	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f47f ae8e 	bne.w	8001770 <HAL_GPIO_Init+0x14>
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	372c      	adds	r7, #44	@ 0x2c
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e12b      	b.n	8001cfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fc4e 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	@ 0x24
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af8:	f002 f9d8 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8001afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a81      	ldr	r2, [pc, #516]	@ (8001d08 <HAL_I2C_Init+0x274>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d807      	bhi.n	8001b18 <HAL_I2C_Init+0x84>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a80      	ldr	r2, [pc, #512]	@ (8001d0c <HAL_I2C_Init+0x278>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	e006      	b.n	8001b26 <HAL_I2C_Init+0x92>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d10 <HAL_I2C_Init+0x27c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	bf94      	ite	ls
 8001b20:	2301      	movls	r3, #1
 8001b22:	2300      	movhi	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0e7      	b.n	8001cfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4a78      	ldr	r2, [pc, #480]	@ (8001d14 <HAL_I2C_Init+0x280>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001d08 <HAL_I2C_Init+0x274>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d802      	bhi.n	8001b68 <HAL_I2C_Init+0xd4>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3301      	adds	r3, #1
 8001b66:	e009      	b.n	8001b7c <HAL_I2C_Init+0xe8>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a69      	ldr	r2, [pc, #420]	@ (8001d18 <HAL_I2C_Init+0x284>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	495c      	ldr	r1, [pc, #368]	@ (8001d08 <HAL_I2C_Init+0x274>)
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d819      	bhi.n	8001bd0 <HAL_I2C_Init+0x13c>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e59      	subs	r1, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001baa:	1c59      	adds	r1, r3, #1
 8001bac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_I2C_Init+0x138>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1e59      	subs	r1, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bca:	e051      	b.n	8001c70 <HAL_I2C_Init+0x1dc>
 8001bcc:	2304      	movs	r3, #4
 8001bce:	e04f      	b.n	8001c70 <HAL_I2C_Init+0x1dc>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <HAL_I2C_Init+0x168>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e58      	subs	r0, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	440b      	add	r3, r1
 8001be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bea:	3301      	adds	r3, #1
 8001bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e012      	b.n	8001c22 <HAL_I2C_Init+0x18e>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1e58      	subs	r0, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	0099      	lsls	r1, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Init+0x196>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e022      	b.n	8001c70 <HAL_I2C_Init+0x1dc>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10e      	bne.n	8001c50 <HAL_I2C_Init+0x1bc>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1e58      	subs	r0, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	440b      	add	r3, r1
 8001c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c4e:	e00f      	b.n	8001c70 <HAL_I2C_Init+0x1dc>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e58      	subs	r0, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	0099      	lsls	r1, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	6809      	ldr	r1, [r1, #0]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69da      	ldr	r2, [r3, #28]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6911      	ldr	r1, [r2, #16]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68d2      	ldr	r2, [r2, #12]
 8001caa:	4311      	orrs	r1, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	000186a0 	.word	0x000186a0
 8001d0c:	001e847f 	.word	0x001e847f
 8001d10:	003d08ff 	.word	0x003d08ff
 8001d14:	431bde83 	.word	0x431bde83
 8001d18:	10624dd3 	.word	0x10624dd3

08001d1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	461a      	mov	r2, r3
 8001d28:	460b      	mov	r3, r1
 8001d2a:	817b      	strh	r3, [r7, #10]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff fc02 	bl	8001538 <HAL_GetTick>
 8001d34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	f040 80e0 	bne.w	8001f04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2319      	movs	r3, #25
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4970      	ldr	r1, [pc, #448]	@ (8001f10 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f001 faac 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e0d3      	b.n	8001f06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_I2C_Master_Transmit+0x50>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e0cc      	b.n	8001f06 <HAL_I2C_Master_Transmit+0x1ea>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d007      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001da0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2221      	movs	r2, #33	@ 0x21
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2210      	movs	r2, #16
 8001dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	893a      	ldrh	r2, [r7, #8]
 8001dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4a50      	ldr	r2, [pc, #320]	@ (8001f14 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dd4:	8979      	ldrh	r1, [r7, #10]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 ff98 	bl	8002d10 <I2C_MasterRequestWrite>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e08d      	b.n	8001f06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e00:	e066      	b.n	8001ed0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	6a39      	ldr	r1, [r7, #32]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f001 fb6a 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d107      	bne.n	8001e2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06b      	b.n	8001f06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_I2C_Master_Transmit+0x188>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d017      	beq.n	8001ea4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	6a39      	ldr	r1, [r7, #32]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f001 fb61 	bl	8003570 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d107      	bne.n	8001ecc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e01a      	b.n	8001f06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d194      	bne.n	8001e02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	00100002 	.word	0x00100002
 8001f14:	ffff0000 	.word	0xffff0000

08001f18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	@ 0x30
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	461a      	mov	r2, r3
 8001f24:	460b      	mov	r3, r1
 8001f26:	817b      	strh	r3, [r7, #10]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fb02 	bl	8001538 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	f040 824b 	bne.w	80023da <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2319      	movs	r3, #25
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	497f      	ldr	r1, [pc, #508]	@ (800214c <HAL_I2C_Master_Receive+0x234>)
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f001 f9ac 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e23e      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_I2C_Master_Receive+0x54>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e237      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d007      	beq.n	8001f92 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2222      	movs	r2, #34	@ 0x22
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2210      	movs	r2, #16
 8001fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	893a      	ldrh	r2, [r7, #8]
 8001fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a5f      	ldr	r2, [pc, #380]	@ (8002150 <HAL_I2C_Master_Receive+0x238>)
 8001fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 ff1a 	bl	8002e14 <I2C_MasterRequestRead>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1f8      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d113      	bne.n	800201a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e1cc      	b.n	80023b4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	2b01      	cmp	r3, #1
 8002020:	d11e      	bne.n	8002060 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002032:	b672      	cpsid	i
}
 8002034:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800205a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800205c:	b662      	cpsie	i
}
 800205e:	e035      	b.n	80020cc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002064:	2b02      	cmp	r3, #2
 8002066:	d11e      	bne.n	80020a6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002076:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002078:	b672      	cpsid	i
}
 800207a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020a2:	b662      	cpsie	i
}
 80020a4:	e012      	b.n	80020cc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80020cc:	e172      	b.n	80023b4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	f200 811f 	bhi.w	8002316 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d123      	bne.n	8002128 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f001 fa8b 	bl	8003600 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e173      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002126:	e145      	b.n	80023b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212c:	2b02      	cmp	r3, #2
 800212e:	d152      	bne.n	80021d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002136:	2200      	movs	r2, #0
 8002138:	4906      	ldr	r1, [pc, #24]	@ (8002154 <HAL_I2C_Master_Receive+0x23c>)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f001 f8b6 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e148      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
 800214a:	bf00      	nop
 800214c:	00100002 	.word	0x00100002
 8002150:	ffff0000 	.word	0xffff0000
 8002154:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800219e:	b662      	cpsie	i
}
 80021a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021d4:	e0ee      	b.n	80023b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021dc:	2200      	movs	r2, #0
 80021de:	4981      	ldr	r1, [pc, #516]	@ (80023e4 <HAL_I2C_Master_Receive+0x4cc>)
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f001 f863 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0f5      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002236:	4b6c      	ldr	r3, [pc, #432]	@ (80023e8 <HAL_I2C_Master_Receive+0x4d0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	08db      	lsrs	r3, r3, #3
 800223c:	4a6b      	ldr	r2, [pc, #428]	@ (80023ec <HAL_I2C_Master_Receive+0x4d4>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0a1a      	lsrs	r2, r3, #8
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00da      	lsls	r2, r3, #3
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	3b01      	subs	r3, #1
 8002254:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d118      	bne.n	800228e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f043 0220 	orr.w	r2, r3, #32
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800227e:	b662      	cpsie	i
}
 8002280:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0a6      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d1d9      	bne.n	8002250 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022de:	b662      	cpsie	i
}
 80022e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002314:	e04e      	b.n	80023b4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002318:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f001 f970 	bl	8003600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e058      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d124      	bne.n	80023b4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236e:	2b03      	cmp	r3, #3
 8002370:	d107      	bne.n	8002382 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002380:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f47f ae88 	bne.w	80020ce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
  }
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3728      	adds	r7, #40	@ 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	00010004 	.word	0x00010004
 80023e8:	20000000 	.word	0x20000000
 80023ec:	14f8b589 	.word	0x14f8b589

080023f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	4608      	mov	r0, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	4603      	mov	r3, r0
 8002400:	817b      	strh	r3, [r7, #10]
 8002402:	460b      	mov	r3, r1
 8002404:	813b      	strh	r3, [r7, #8]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800240a:	f7ff f895 	bl	8001538 <HAL_GetTick>
 800240e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b20      	cmp	r3, #32
 800241a:	f040 80d9 	bne.w	80025d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2319      	movs	r3, #25
 8002424:	2201      	movs	r2, #1
 8002426:	496d      	ldr	r1, [pc, #436]	@ (80025dc <HAL_I2C_Mem_Write+0x1ec>)
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 ff3f 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
 8002436:	e0cc      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_I2C_Mem_Write+0x56>
 8002442:	2302      	movs	r3, #2
 8002444:	e0c5      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d007      	beq.n	800246c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2221      	movs	r2, #33	@ 0x21
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2240      	movs	r2, #64	@ 0x40
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800249c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a4d      	ldr	r2, [pc, #308]	@ (80025e0 <HAL_I2C_Mem_Write+0x1f0>)
 80024ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ae:	88f8      	ldrh	r0, [r7, #6]
 80024b0:	893a      	ldrh	r2, [r7, #8]
 80024b2:	8979      	ldrh	r1, [r7, #10]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4603      	mov	r3, r0
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fd76 	bl	8002fb0 <I2C_RequestMemoryWrite>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d052      	beq.n	8002570 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e081      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f001 f804 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d107      	bne.n	80024f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06b      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11b      	bne.n	8002570 <HAL_I2C_Mem_Write+0x180>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d017      	beq.n	8002570 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1aa      	bne.n	80024ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fff7 	bl	8003570 <I2C_WaitOnBTFFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	2b04      	cmp	r3, #4
 800258e:	d107      	bne.n	80025a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e016      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	00100002 	.word	0x00100002
 80025e0:	ffff0000 	.word	0xffff0000

080025e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	@ 0x30
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002602:	f7fe ff99 	bl	8001538 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	f040 8244 	bne.w	8002a9e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2319      	movs	r3, #25
 800261c:	2201      	movs	r2, #1
 800261e:	4982      	ldr	r1, [pc, #520]	@ (8002828 <HAL_I2C_Mem_Read+0x244>)
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fe43 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
 800262e:	e237      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_I2C_Mem_Read+0x5a>
 800263a:	2302      	movs	r3, #2
 800263c:	e230      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d007      	beq.n	8002664 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2222      	movs	r2, #34	@ 0x22
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2240      	movs	r2, #64	@ 0x40
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800268e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a62      	ldr	r2, [pc, #392]	@ (800282c <HAL_I2C_Mem_Read+0x248>)
 80026a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a6:	88f8      	ldrh	r0, [r7, #6]
 80026a8:	893a      	ldrh	r2, [r7, #8]
 80026aa:	8979      	ldrh	r1, [r7, #10]
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4603      	mov	r3, r0
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fd10 	bl	80030dc <I2C_RequestMemoryRead>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e1ec      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d113      	bne.n	80026f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e1c0      	b.n	8002a78 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d11e      	bne.n	800273c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800270c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800270e:	b672      	cpsid	i
}
 8002710:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002736:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002738:	b662      	cpsie	i
}
 800273a:	e035      	b.n	80027a8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002740:	2b02      	cmp	r3, #2
 8002742:	d11e      	bne.n	8002782 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800277c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800277e:	b662      	cpsie	i
}
 8002780:	e012      	b.n	80027a8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002790:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027a8:	e166      	b.n	8002a78 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	f200 811f 	bhi.w	80029f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d123      	bne.n	8002804 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 ff1d 	bl	8003600 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e167      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002802:	e139      	b.n	8002a78 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	2b02      	cmp	r3, #2
 800280a:	d152      	bne.n	80028b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002812:	2200      	movs	r2, #0
 8002814:	4906      	ldr	r1, [pc, #24]	@ (8002830 <HAL_I2C_Mem_Read+0x24c>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fd48 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e13c      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
 8002826:	bf00      	nop
 8002828:	00100002 	.word	0x00100002
 800282c:	ffff0000 	.word	0xffff0000
 8002830:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002834:	b672      	cpsid	i
}
 8002836:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800287a:	b662      	cpsie	i
}
 800287c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028b0:	e0e2      	b.n	8002a78 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	2200      	movs	r2, #0
 80028ba:	497b      	ldr	r1, [pc, #492]	@ (8002aa8 <HAL_I2C_Mem_Read+0x4c4>)
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fcf5 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0e9      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028dc:	b672      	cpsid	i
}
 80028de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002912:	4b66      	ldr	r3, [pc, #408]	@ (8002aac <HAL_I2C_Mem_Read+0x4c8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	08db      	lsrs	r3, r3, #3
 8002918:	4a65      	ldr	r2, [pc, #404]	@ (8002ab0 <HAL_I2C_Mem_Read+0x4cc>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0a1a      	lsrs	r2, r3, #8
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00da      	lsls	r2, r3, #3
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	3b01      	subs	r3, #1
 8002930:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d118      	bne.n	800296a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800295a:	b662      	cpsie	i
}
 800295c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e09a      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d1d9      	bne.n	800292c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029ba:	b662      	cpsie	i
}
 80029bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029f0:	e042      	b.n	8002a78 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fe02 	bl	8003600 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e04c      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d118      	bne.n	8002a78 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f ae94 	bne.w	80027aa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3728      	adds	r7, #40	@ 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	00010004 	.word	0x00010004
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	14f8b589 	.word	0x14f8b589

08002ab4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	@ 0x28
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7fe fd38 	bl	8001538 <HAL_GetTick>
 8002ac8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	f040 8111 	bne.w	8002cfe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2319      	movs	r3, #25
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4988      	ldr	r1, [pc, #544]	@ (8002d08 <HAL_I2C_IsDeviceReady+0x254>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fbe0 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	e104      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_I2C_IsDeviceReady+0x50>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e0fd      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x24c>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d007      	beq.n	8002b2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2224      	movs	r2, #36	@ 0x24
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4a70      	ldr	r2, [pc, #448]	@ (8002d0c <HAL_I2C_IsDeviceReady+0x258>)
 8002b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fb9e 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b84:	d103      	bne.n	8002b8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0b6      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ba0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fcc9 	bl	8001538 <HAL_GetTick>
 8002ba6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bd6:	e025      	b.n	8002c24 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bd8:	f7fe fcae 	bl	8001538 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d302      	bcc.n	8002bee <HAL_I2C_IsDeviceReady+0x13a>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	22a0      	movs	r2, #160	@ 0xa0
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c2e:	d005      	beq.n	8002c3c <HAL_I2C_IsDeviceReady+0x188>
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <HAL_I2C_IsDeviceReady+0x188>
 8002c36:	7dbb      	ldrb	r3, [r7, #22]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0cd      	beq.n	8002bd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d129      	bne.n	8002ca6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c60:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2319      	movs	r3, #25
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4921      	ldr	r1, [pc, #132]	@ (8002d08 <HAL_I2C_IsDeviceReady+0x254>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fb12 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e036      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e02c      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cbe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2319      	movs	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	490f      	ldr	r1, [pc, #60]	@ (8002d08 <HAL_I2C_IsDeviceReady+0x254>)
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 faee 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e012      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f4ff af32 	bcc.w	8002b4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
  }
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	00100002 	.word	0x00100002
 8002d0c:	ffff0000 	.word	0xffff0000

08002d10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d006      	beq.n	8002d3a <I2C_MasterRequestWrite+0x2a>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d003      	beq.n	8002d3a <I2C_MasterRequestWrite+0x2a>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d38:	d108      	bne.n	8002d4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e00b      	b.n	8002d64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	2b12      	cmp	r3, #18
 8002d52:	d107      	bne.n	8002d64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fa9b 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d8a:	d103      	bne.n	8002d94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e035      	b.n	8002e04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002da0:	d108      	bne.n	8002db4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002db0:	611a      	str	r2, [r3, #16]
 8002db2:	e01b      	b.n	8002dec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db4:	897b      	ldrh	r3, [r7, #10]
 8002db6:	11db      	asrs	r3, r3, #7
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f003 0306 	and.w	r3, r3, #6
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f063 030f 	orn	r3, r3, #15
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	490e      	ldr	r1, [pc, #56]	@ (8002e0c <I2C_MasterRequestWrite+0xfc>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fae4 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e010      	b.n	8002e04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002de2:	897b      	ldrh	r3, [r7, #10]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4907      	ldr	r1, [pc, #28]	@ (8002e10 <I2C_MasterRequestWrite+0x100>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fad4 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	00010008 	.word	0x00010008
 8002e10:	00010002 	.word	0x00010002

08002e14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	460b      	mov	r3, r1
 8002e22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d006      	beq.n	8002e4e <I2C_MasterRequestRead+0x3a>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d003      	beq.n	8002e4e <I2C_MasterRequestRead+0x3a>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e4c:	d108      	bne.n	8002e60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e00b      	b.n	8002e78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	2b11      	cmp	r3, #17
 8002e66:	d107      	bne.n	8002e78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fa11 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e9e:	d103      	bne.n	8002ea8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e079      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eb4:	d108      	bne.n	8002ec8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e05f      	b.n	8002f88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	11db      	asrs	r3, r3, #7
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 0306 	and.w	r3, r3, #6
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f063 030f 	orn	r3, r3, #15
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4930      	ldr	r1, [pc, #192]	@ (8002fa8 <I2C_MasterRequestRead+0x194>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fa5a 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e054      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4929      	ldr	r1, [pc, #164]	@ (8002fac <I2C_MasterRequestRead+0x198>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa4a 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e044      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f9af 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f62:	d103      	bne.n	8002f6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e017      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f70:	897b      	ldrh	r3, [r7, #10]
 8002f72:	11db      	asrs	r3, r3, #7
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0306 	and.w	r3, r3, #6
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f063 030e 	orn	r3, r3, #14
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4907      	ldr	r1, [pc, #28]	@ (8002fac <I2C_MasterRequestRead+0x198>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa06 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	00010008 	.word	0x00010008
 8002fac:	00010002 	.word	0x00010002

08002fb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f960 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003000:	d103      	bne.n	800300a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e05f      	b.n	80030ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800300e:	897b      	ldrh	r3, [r7, #10]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800301c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	492d      	ldr	r1, [pc, #180]	@ (80030d8 <I2C_RequestMemoryWrite+0x128>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f9bb 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e04c      	b.n	80030ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fa46 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e02b      	b.n	80030ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800307c:	893b      	ldrh	r3, [r7, #8]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	611a      	str	r2, [r3, #16]
 8003086:	e021      	b.n	80030cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003088:	893b      	ldrh	r3, [r7, #8]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	b29b      	uxth	r3, r3
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa20 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d107      	bne.n	80030be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e005      	b.n	80030ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c2:	893b      	ldrh	r3, [r7, #8]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	00010002 	.word	0x00010002

080030dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	817b      	strh	r3, [r7, #10]
 80030ee:	460b      	mov	r3, r1
 80030f0:	813b      	strh	r3, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003104:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003114:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	2200      	movs	r2, #0
 800311e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f8c2 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800313c:	d103      	bne.n	8003146 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003144:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0aa      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003158:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	4952      	ldr	r1, [pc, #328]	@ (80032a8 <I2C_RequestMemoryRead+0x1cc>)
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f91d 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e097      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003188:	6a39      	ldr	r1, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f9a8 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	2b04      	cmp	r3, #4
 800319c:	d107      	bne.n	80031ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e076      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031b8:	893b      	ldrh	r3, [r7, #8]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	611a      	str	r2, [r3, #16]
 80031c2:	e021      	b.n	8003208 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031c4:	893b      	ldrh	r3, [r7, #8]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	6a39      	ldr	r1, [r7, #32]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f982 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d107      	bne.n	80031fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e050      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031fe:	893b      	ldrh	r3, [r7, #8]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320a:	6a39      	ldr	r1, [r7, #32]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f967 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00d      	beq.n	8003234 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	2b04      	cmp	r3, #4
 800321e:	d107      	bne.n	8003230 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e035      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003242:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	2200      	movs	r2, #0
 800324c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f82b 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326a:	d103      	bne.n	8003274 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003272:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e013      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003278:	897b      	ldrh	r3, [r7, #10]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	4906      	ldr	r1, [pc, #24]	@ (80032a8 <I2C_RequestMemoryRead+0x1cc>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f886 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	00010002 	.word	0x00010002

080032ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	e048      	b.n	8003350 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d044      	beq.n	8003350 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7fe f937 	bl	8001538 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d139      	bne.n	8003350 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10d      	bne.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	e00c      	b.n	800331c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	43da      	mvns	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	429a      	cmp	r2, r3
 8003320:	d116      	bne.n	8003350 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e023      	b.n	8003398 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0c1b      	lsrs	r3, r3, #16
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d10d      	bne.n	8003376 <I2C_WaitOnFlagUntilTimeout+0xca>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	43da      	mvns	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	e00c      	b.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	43da      	mvns	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	429a      	cmp	r2, r3
 8003394:	d093      	beq.n	80032be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ae:	e071      	b.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033be:	d123      	bne.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f043 0204 	orr.w	r2, r3, #4
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e067      	b.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d041      	beq.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003410:	f7fe f892 	bl	8001538 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d302      	bcc.n	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d136      	bne.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10c      	bne.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4013      	ands	r3, r2
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e00b      	b.n	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	43da      	mvns	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4013      	ands	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e021      	b.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d10c      	bne.n	80034b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	43da      	mvns	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e00b      	b.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f af6d 	bne.w	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ec:	e034      	b.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f8e3 	bl	80036ba <I2C_IsAcknowledgeFailed>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e034      	b.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d028      	beq.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fe f817 	bl	8001538 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11d      	bne.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003526:	2b80      	cmp	r3, #128	@ 0x80
 8003528:	d016      	beq.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b80      	cmp	r3, #128	@ 0x80
 8003564:	d1c3      	bne.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800357c:	e034      	b.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f89b 	bl	80036ba <I2C_IsAcknowledgeFailed>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e034      	b.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d028      	beq.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fd ffcf 	bl	8001538 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11d      	bne.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d016      	beq.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e007      	b.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d1c3      	bne.n	800357e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800360c:	e049      	b.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b10      	cmp	r3, #16
 800361a:	d119      	bne.n	8003650 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0210 	mvn.w	r2, #16
 8003624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e030      	b.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003650:	f7fd ff72 	bl	8001538 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	d302      	bcc.n	8003666 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11d      	bne.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d016      	beq.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e007      	b.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b40      	cmp	r3, #64	@ 0x40
 80036ae:	d1ae      	bne.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d0:	d11b      	bne.n	800370a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f043 0204 	orr.w	r2, r3, #4
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
	...

08003718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e272      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8087 	beq.w	8003846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003738:	4b92      	ldr	r3, [pc, #584]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b04      	cmp	r3, #4
 8003742:	d00c      	beq.n	800375e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003744:	4b8f      	ldr	r3, [pc, #572]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d112      	bne.n	8003776 <HAL_RCC_OscConfig+0x5e>
 8003750:	4b8c      	ldr	r3, [pc, #560]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800375c:	d10b      	bne.n	8003776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375e:	4b89      	ldr	r3, [pc, #548]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d06c      	beq.n	8003844 <HAL_RCC_OscConfig+0x12c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d168      	bne.n	8003844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e24c      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800377e:	d106      	bne.n	800378e <HAL_RCC_OscConfig+0x76>
 8003780:	4b80      	ldr	r3, [pc, #512]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a7f      	ldr	r2, [pc, #508]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e02e      	b.n	80037ec <HAL_RCC_OscConfig+0xd4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x98>
 8003796:	4b7b      	ldr	r3, [pc, #492]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a7a      	ldr	r2, [pc, #488]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 800379c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b78      	ldr	r3, [pc, #480]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a77      	ldr	r2, [pc, #476]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e01d      	b.n	80037ec <HAL_RCC_OscConfig+0xd4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0xbc>
 80037ba:	4b72      	ldr	r3, [pc, #456]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a71      	ldr	r2, [pc, #452]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0xd4>
 80037d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b68      	ldr	r3, [pc, #416]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a67      	ldr	r2, [pc, #412]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d013      	beq.n	800381c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fea0 	bl	8001538 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd fe9c 	bl	8001538 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	@ 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e200      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b5d      	ldr	r3, [pc, #372]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0xe4>
 800381a:	e014      	b.n	8003846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fd fe8c 	bl	8001538 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003824:	f7fd fe88 	bl	8001538 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	@ 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e1ec      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	4b53      	ldr	r3, [pc, #332]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x10c>
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003852:	4b4c      	ldr	r3, [pc, #304]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800385e:	4b49      	ldr	r3, [pc, #292]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	d11c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x18c>
 800386a:	4b46      	ldr	r3, [pc, #280]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d116      	bne.n	80038a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	4b43      	ldr	r3, [pc, #268]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x176>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1c0      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4939      	ldr	r1, [pc, #228]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	e03a      	b.n	800391a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ac:	4b36      	ldr	r3, [pc, #216]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fd fe41 	bl	8001538 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fd fe3d 	bl	8001538 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e1a1      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4927      	ldr	r1, [pc, #156]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b26      	ldr	r3, [pc, #152]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fd fe20 	bl	8001538 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fc:	f7fd fe1c 	bl	8001538 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e180      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d03a      	beq.n	800399c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d019      	beq.n	8003962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392e:	4b17      	ldr	r3, [pc, #92]	@ (800398c <HAL_RCC_OscConfig+0x274>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003934:	f7fd fe00 	bl	8001538 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393c:	f7fd fdfc 	bl	8001538 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e160      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	4b0d      	ldr	r3, [pc, #52]	@ (8003984 <HAL_RCC_OscConfig+0x26c>)
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800395a:	2001      	movs	r0, #1
 800395c:	f000 faba 	bl	8003ed4 <RCC_Delay>
 8003960:	e01c      	b.n	800399c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003962:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <HAL_RCC_OscConfig+0x274>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003968:	f7fd fde6 	bl	8001538 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396e:	e00f      	b.n	8003990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003970:	f7fd fde2 	bl	8001538 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d908      	bls.n	8003990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e146      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	42420000 	.word	0x42420000
 800398c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	4b92      	ldr	r3, [pc, #584]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e9      	bne.n	8003970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80a6 	beq.w	8003af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ae:	4b8b      	ldr	r3, [pc, #556]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10d      	bne.n	80039d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ba:	4b88      	ldr	r3, [pc, #544]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4a87      	ldr	r2, [pc, #540]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	61d3      	str	r3, [r2, #28]
 80039c6:	4b85      	ldr	r3, [pc, #532]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d2:	2301      	movs	r3, #1
 80039d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d6:	4b82      	ldr	r3, [pc, #520]	@ (8003be0 <HAL_RCC_OscConfig+0x4c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d118      	bne.n	8003a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e2:	4b7f      	ldr	r3, [pc, #508]	@ (8003be0 <HAL_RCC_OscConfig+0x4c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7e      	ldr	r2, [pc, #504]	@ (8003be0 <HAL_RCC_OscConfig+0x4c8>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ee:	f7fd fda3 	bl	8001538 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f6:	f7fd fd9f 	bl	8001538 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b64      	cmp	r3, #100	@ 0x64
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e103      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a08:	4b75      	ldr	r3, [pc, #468]	@ (8003be0 <HAL_RCC_OscConfig+0x4c8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x312>
 8003a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a6e      	ldr	r2, [pc, #440]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	e02d      	b.n	8003a86 <HAL_RCC_OscConfig+0x36e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x334>
 8003a32:	4b6a      	ldr	r3, [pc, #424]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	4a69      	ldr	r2, [pc, #420]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6213      	str	r3, [r2, #32]
 8003a3e:	4b67      	ldr	r3, [pc, #412]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4a66      	ldr	r2, [pc, #408]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	6213      	str	r3, [r2, #32]
 8003a4a:	e01c      	b.n	8003a86 <HAL_RCC_OscConfig+0x36e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d10c      	bne.n	8003a6e <HAL_RCC_OscConfig+0x356>
 8003a54:	4b61      	ldr	r3, [pc, #388]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4a60      	ldr	r2, [pc, #384]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	f043 0304 	orr.w	r3, r3, #4
 8003a5e:	6213      	str	r3, [r2, #32]
 8003a60:	4b5e      	ldr	r3, [pc, #376]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4a5d      	ldr	r2, [pc, #372]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	e00b      	b.n	8003a86 <HAL_RCC_OscConfig+0x36e>
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4a5a      	ldr	r2, [pc, #360]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	6213      	str	r3, [r2, #32]
 8003a7a:	4b58      	ldr	r3, [pc, #352]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4a57      	ldr	r2, [pc, #348]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d015      	beq.n	8003aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fd53 	bl	8001538 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fd fd4f 	bl	8001538 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e0b1      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	4b4b      	ldr	r3, [pc, #300]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ee      	beq.n	8003a96 <HAL_RCC_OscConfig+0x37e>
 8003ab8:	e014      	b.n	8003ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fd fd3d 	bl	8001538 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fd39 	bl	8001538 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e09b      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad8:	4b40      	ldr	r3, [pc, #256]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ee      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d105      	bne.n	8003af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aea:	4b3c      	ldr	r3, [pc, #240]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4a3b      	ldr	r2, [pc, #236]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8087 	beq.w	8003c0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b00:	4b36      	ldr	r3, [pc, #216]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d061      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d146      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b14:	4b33      	ldr	r3, [pc, #204]	@ (8003be4 <HAL_RCC_OscConfig+0x4cc>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fd fd0d 	bl	8001538 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fd fd09 	bl	8001538 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e06d      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b34:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f0      	bne.n	8003b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b48:	d108      	bne.n	8003b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b4a:	4b24      	ldr	r3, [pc, #144]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4921      	ldr	r1, [pc, #132]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a19      	ldr	r1, [r3, #32]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	491b      	ldr	r1, [pc, #108]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <HAL_RCC_OscConfig+0x4cc>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fcdd 	bl	8001538 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fd fcd9 	bl	8001538 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e03d      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b94:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x46a>
 8003ba0:	e035      	b.n	8003c0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <HAL_RCC_OscConfig+0x4cc>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fcc6 	bl	8001538 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fd fcc2 	bl	8001538 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e026      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x498>
 8003bce:	e01e      	b.n	8003c0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e019      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40007000 	.word	0x40007000
 8003be4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_RCC_OscConfig+0x500>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d106      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0d0      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b6a      	ldr	r3, [pc, #424]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b67      	ldr	r3, [pc, #412]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 0207 	bic.w	r2, r3, #7
 8003c46:	4965      	ldr	r1, [pc, #404]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b63      	ldr	r3, [pc, #396]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0b8      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c78:	4b59      	ldr	r3, [pc, #356]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a58      	ldr	r2, [pc, #352]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c90:	4b53      	ldr	r3, [pc, #332]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4a52      	ldr	r2, [pc, #328]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c9c:	4b50      	ldr	r3, [pc, #320]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	494d      	ldr	r1, [pc, #308]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d040      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	4b47      	ldr	r3, [pc, #284]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d115      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e07f      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b41      	ldr	r3, [pc, #260]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e073      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3d      	ldr	r3, [pc, #244]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06b      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4936      	ldr	r1, [pc, #216]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fc14 	bl	8001538 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd fc10 	bl	8001538 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e053      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d210      	bcs.n	8003d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b24      	ldr	r3, [pc, #144]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 0207 	bic.w	r2, r3, #7
 8003d52:	4922      	ldr	r1, [pc, #136]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b20      	ldr	r3, [pc, #128]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e032      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d78:	4b19      	ldr	r3, [pc, #100]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4916      	ldr	r1, [pc, #88]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d96:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	490e      	ldr	r1, [pc, #56]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003daa:	f000 f821 	bl	8003df0 <HAL_RCC_GetSysClockFreq>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	490a      	ldr	r1, [pc, #40]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbc:	5ccb      	ldrb	r3, [r1, r3]
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	4a09      	ldr	r2, [pc, #36]	@ (8003de8 <HAL_RCC_ClockConfig+0x1cc>)
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dc6:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <HAL_RCC_ClockConfig+0x1d0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd fb72 	bl	80014b4 <HAL_InitTick>

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40022000 	.word	0x40022000
 8003de0:	40021000 	.word	0x40021000
 8003de4:	08003f80 	.word	0x08003f80
 8003de8:	20000000 	.word	0x20000000
 8003dec:	20000004 	.word	0x20000004

08003df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d002      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x30>
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x36>
 8003e1e:	e027      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e20:	4b19      	ldr	r3, [pc, #100]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e22:	613b      	str	r3, [r7, #16]
      break;
 8003e24:	e027      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	0c9b      	lsrs	r3, r3, #18
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e30:	5cd3      	ldrb	r3, [r2, r3]
 8003e32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d010      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e3e:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0c5b      	lsrs	r3, r3, #17
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	4a11      	ldr	r2, [pc, #68]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a0d      	ldr	r2, [pc, #52]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e52:	fb03 f202 	mul.w	r2, r3, r2
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e004      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a0c      	ldr	r2, [pc, #48]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	613b      	str	r3, [r7, #16]
      break;
 8003e6e:	e002      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e72:	613b      	str	r3, [r7, #16]
      break;
 8003e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e76:	693b      	ldr	r3, [r7, #16]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	007a1200 	.word	0x007a1200
 8003e8c:	08003f98 	.word	0x08003f98
 8003e90:	08003fa8 	.word	0x08003fa8
 8003e94:	003d0900 	.word	0x003d0900

08003e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e9c:	4b02      	ldr	r3, [pc, #8]	@ (8003ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	20000000 	.word	0x20000000

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb0:	f7ff fff2 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08003f90 	.word	0x08003f90

08003ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003edc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f08 <RCC_Delay+0x34>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8003f0c <RCC_Delay+0x38>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0a5b      	lsrs	r3, r3, #9
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ef0:	bf00      	nop
  }
  while (Delay --);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f9      	bne.n	8003ef0 <RCC_Delay+0x1c>
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	10624dd3 	.word	0x10624dd3

08003f10 <memset>:
 8003f10:	4603      	mov	r3, r0
 8003f12:	4402      	add	r2, r0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d100      	bne.n	8003f1a <memset+0xa>
 8003f18:	4770      	bx	lr
 8003f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1e:	e7f9      	b.n	8003f14 <memset+0x4>

08003f20 <__libc_init_array>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	2600      	movs	r6, #0
 8003f24:	4d0c      	ldr	r5, [pc, #48]	@ (8003f58 <__libc_init_array+0x38>)
 8003f26:	4c0d      	ldr	r4, [pc, #52]	@ (8003f5c <__libc_init_array+0x3c>)
 8003f28:	1b64      	subs	r4, r4, r5
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	42a6      	cmp	r6, r4
 8003f2e:	d109      	bne.n	8003f44 <__libc_init_array+0x24>
 8003f30:	f000 f81a 	bl	8003f68 <_init>
 8003f34:	2600      	movs	r6, #0
 8003f36:	4d0a      	ldr	r5, [pc, #40]	@ (8003f60 <__libc_init_array+0x40>)
 8003f38:	4c0a      	ldr	r4, [pc, #40]	@ (8003f64 <__libc_init_array+0x44>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	42a6      	cmp	r6, r4
 8003f40:	d105      	bne.n	8003f4e <__libc_init_array+0x2e>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f48:	4798      	blx	r3
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7ee      	b.n	8003f2c <__libc_init_array+0xc>
 8003f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f52:	4798      	blx	r3
 8003f54:	3601      	adds	r6, #1
 8003f56:	e7f2      	b.n	8003f3e <__libc_init_array+0x1e>
 8003f58:	08003fac 	.word	0x08003fac
 8003f5c:	08003fac 	.word	0x08003fac
 8003f60:	08003fac 	.word	0x08003fac
 8003f64:	08003fb0 	.word	0x08003fb0

08003f68 <_init>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	bf00      	nop
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr

08003f74 <_fini>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	bf00      	nop
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr
