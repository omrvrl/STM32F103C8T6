
043_I2C_Mpu6050_Hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002544  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002650  08002650  00003650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800267c  0800267c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800267c  0800267c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800267c  0800267c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800267c  0800267c  0000367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002680  08002680  00003680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002684  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002690  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002690  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059e4  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001252  00000000  00000000  00009a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  0000ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051f  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015dd7  00000000  00000000  0000b83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000870a  00000000  00000000  00021616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e4e3  00000000  00000000  00029d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a98  00000000  00000000  000a8248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000a9ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002638 	.word	0x08002638

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002638 	.word	0x08002638

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9e4 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80a 	bl	800016c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f878 	bl	800024c <MX_GPIO_Init>
  MX_I2C2_Init();
 800015c:	f000 f848 	bl	80001f0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  Mpu6050_Init();
 8000160:	f000 f8b8 	bl	80002d4 <Mpu6050_Init>
  Scan_Slave_Address();
 8000164:	f000 f894 	bl	8000290 <Scan_Slave_Address>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000168:	bf00      	nop
 800016a:	e7fd      	b.n	8000168 <main+0x1c>

0800016c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b090      	sub	sp, #64	@ 0x40
 8000170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000172:	f107 0318 	add.w	r3, r7, #24
 8000176:	2228      	movs	r2, #40	@ 0x28
 8000178:	2100      	movs	r1, #0
 800017a:	4618      	mov	r0, r3
 800017c:	f002 fa30 	bl	80025e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000180:	1d3b      	adds	r3, r7, #4
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]
 8000186:	605a      	str	r2, [r3, #4]
 8000188:	609a      	str	r2, [r3, #8]
 800018a:	60da      	str	r2, [r3, #12]
 800018c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800018e:	2302      	movs	r3, #2
 8000190:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000192:	2301      	movs	r3, #1
 8000194:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000196:	2310      	movs	r3, #16
 8000198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2302      	movs	r3, #2
 800019c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800019e:	2300      	movs	r3, #0
 80001a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001a2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a8:	f107 0318 	add.w	r3, r7, #24
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 fe1b 	bl	8001de8 <HAL_RCC_OscConfig>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001b8:	f000 f8e0 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001bc:	230f      	movs	r3, #15
 80001be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c0:	2302      	movs	r3, #2
 80001c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2102      	movs	r1, #2
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 f888 	bl	80022ec <HAL_RCC_ClockConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001e2:	f000 f8cb 	bl	800037c <Error_Handler>
  }
}
 80001e6:	bf00      	nop
 80001e8:	3740      	adds	r7, #64	@ 0x40
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80001f4:	4b12      	ldr	r3, [pc, #72]	@ (8000240 <MX_I2C2_Init+0x50>)
 80001f6:	4a13      	ldr	r2, [pc, #76]	@ (8000244 <MX_I2C2_Init+0x54>)
 80001f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80001fa:	4b11      	ldr	r3, [pc, #68]	@ (8000240 <MX_I2C2_Init+0x50>)
 80001fc:	4a12      	ldr	r2, [pc, #72]	@ (8000248 <MX_I2C2_Init+0x58>)
 80001fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000200:	4b0f      	ldr	r3, [pc, #60]	@ (8000240 <MX_I2C2_Init+0x50>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <MX_I2C2_Init+0x50>)
 8000208:	2200      	movs	r2, #0
 800020a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800020c:	4b0c      	ldr	r3, [pc, #48]	@ (8000240 <MX_I2C2_Init+0x50>)
 800020e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000212:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000214:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <MX_I2C2_Init+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800021a:	4b09      	ldr	r3, [pc, #36]	@ (8000240 <MX_I2C2_Init+0x50>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000220:	4b07      	ldr	r3, [pc, #28]	@ (8000240 <MX_I2C2_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000226:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <MX_I2C2_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800022c:	4804      	ldr	r0, [pc, #16]	@ (8000240 <MX_I2C2_Init+0x50>)
 800022e:	f000 fc63 	bl	8000af8 <HAL_I2C_Init>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000238:	f000 f8a0 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000028 	.word	0x20000028
 8000244:	40005800 	.word	0x40005800
 8000248:	00061a80 	.word	0x00061a80

0800024c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000252:	4b0e      	ldr	r3, [pc, #56]	@ (800028c <MX_GPIO_Init+0x40>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	4a0d      	ldr	r2, [pc, #52]	@ (800028c <MX_GPIO_Init+0x40>)
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	6193      	str	r3, [r2, #24]
 800025e:	4b0b      	ldr	r3, [pc, #44]	@ (800028c <MX_GPIO_Init+0x40>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	f003 0308 	and.w	r3, r3, #8
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b08      	ldr	r3, [pc, #32]	@ (800028c <MX_GPIO_Init+0x40>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	4a07      	ldr	r2, [pc, #28]	@ (800028c <MX_GPIO_Init+0x40>)
 8000270:	f043 0304 	orr.w	r3, r3, #4
 8000274:	6193      	str	r3, [r2, #24]
 8000276:	4b05      	ldr	r3, [pc, #20]	@ (800028c <MX_GPIO_Init+0x40>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	f003 0304 	and.w	r3, r3, #4
 800027e:	603b      	str	r3, [r7, #0]
 8000280:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40021000 	.word	0x40021000

08000290 <Scan_Slave_Address>:
/*
 * @brief Scan slave address of connected devices to the master and find slave address
 * @param None
 * retval None
 */
void Scan_Slave_Address(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	for(i=0; i <= 255 ; i++){
 8000294:	4b0d      	ldr	r3, [pc, #52]	@ (80002cc <Scan_Slave_Address+0x3c>)
 8000296:	2200      	movs	r2, #0
 8000298:	801a      	strh	r2, [r3, #0]
 800029a:	e00f      	b.n	80002bc <Scan_Slave_Address+0x2c>
		if(HAL_I2C_IsDeviceReady(&hi2c2, i, 1, 100) == HAL_OK)
 800029c:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <Scan_Slave_Address+0x3c>)
 800029e:	8819      	ldrh	r1, [r3, #0]
 80002a0:	2364      	movs	r3, #100	@ 0x64
 80002a2:	2201      	movs	r2, #1
 80002a4:	480a      	ldr	r0, [pc, #40]	@ (80002d0 <Scan_Slave_Address+0x40>)
 80002a6:	f001 f8d1 	bl	800144c <HAL_I2C_IsDeviceReady>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d00a      	beq.n	80002c6 <Scan_Slave_Address+0x36>
	for(i=0; i <= 255 ; i++){
 80002b0:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <Scan_Slave_Address+0x3c>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <Scan_Slave_Address+0x3c>)
 80002ba:	801a      	strh	r2, [r3, #0]
 80002bc:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <Scan_Slave_Address+0x3c>)
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	2bff      	cmp	r3, #255	@ 0xff
 80002c2:	d9eb      	bls.n	800029c <Scan_Slave_Address+0xc>
			break;
	}
}
 80002c4:	e000      	b.n	80002c8 <Scan_Slave_Address+0x38>
			break;
 80002c6:	bf00      	nop
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000088 	.word	0x20000088
 80002d0:	20000028 	.word	0x20000028

080002d4 <Mpu6050_Init>:
/*
 * @brief Mpu6050 sensor Initialization Function
 * @param None
 * @retval None
 */
void Mpu6050_Init(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

	Mpu6050_Read(117, 1); 													// Read whoamI register
 80002d8:	2101      	movs	r1, #1
 80002da:	2075      	movs	r0, #117	@ 0x75
 80002dc:	f000 f812 	bl	8000304 <Mpu6050_Read>

	Mpu6050_Write(0x6b, 0x8);												// power management: reset all register of sensor
 80002e0:	2108      	movs	r1, #8
 80002e2:	206b      	movs	r0, #107	@ 0x6b
 80002e4:	f000 f82c 	bl	8000340 <Mpu6050_Write>
	HAL_Delay(100);
 80002e8:	2064      	movs	r0, #100	@ 0x64
 80002ea:	f000 f979 	bl	80005e0 <HAL_Delay>
	Mpu6050_Write(0x6b, 0x18); 												// power management: temprature disabled, sleep disabled, clock 8 mhz
 80002ee:	2118      	movs	r1, #24
 80002f0:	206b      	movs	r0, #107	@ 0x6b
 80002f2:	f000 f825 	bl	8000340 <Mpu6050_Write>

	Mpu6050_Read(0x6b, 2);
 80002f6:	2102      	movs	r1, #2
 80002f8:	206b      	movs	r0, #107	@ 0x6b
 80002fa:	f000 f803 	bl	8000304 <Mpu6050_Read>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <Mpu6050_Read>:
 * @param uint8_t rRegister: register to be read,
 * 		  uint8_t sizeofdata: number of byte of register to be read
 * @retval uint8_t
 */

void Mpu6050_Read(uint8_t rRegister, uint8_t sizeofdata){
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af04      	add	r7, sp, #16
 800030a:	4603      	mov	r3, r0
 800030c:	460a      	mov	r2, r1
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	4613      	mov	r3, r2
 8000312:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_SLAVE_ADDRESS, rRegister, 1, Buffer, sizeofdata, 100);
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	b29a      	uxth	r2, r3
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	b29b      	uxth	r3, r3
 800031c:	2164      	movs	r1, #100	@ 0x64
 800031e:	9102      	str	r1, [sp, #8]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <Mpu6050_Read+0x34>)
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2301      	movs	r3, #1
 8000328:	2168      	movs	r1, #104	@ 0x68
 800032a:	4804      	ldr	r0, [pc, #16]	@ (800033c <Mpu6050_Read+0x38>)
 800032c:	f000 fe26 	bl	8000f7c <HAL_I2C_Mem_Read>

}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000007c 	.word	0x2000007c
 800033c:	20000028 	.word	0x20000028

08000340 <Mpu6050_Write>:
 * @brief Mpu6050 sensor Write function: Write data which we declare to the register to be written on the sensor
 * @param uint8_t wRegister: Register of the sensor wanted to be changed
 * 		  uimt8_t sizeofdata: number of byte of data wanted to write
 * @retval None
 */
void Mpu6050_Write(uint8_t wRegister, uint8_t wData){
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af02      	add	r7, sp, #8
 8000346:	4603      	mov	r3, r0
 8000348:	460a      	mov	r2, r1
 800034a:	71fb      	strb	r3, [r7, #7]
 800034c:	4613      	mov	r3, r2
 800034e:	71bb      	strb	r3, [r7, #6]

	uint8_t data[2] = {0};
 8000350:	2300      	movs	r3, #0
 8000352:	81bb      	strh	r3, [r7, #12]
	data[0] = wRegister;
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	733b      	strb	r3, [r7, #12]
	data[1] = wData;
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c2, MPU6050_SLAVE_ADDRESS, data, 2, 100);
 800035c:	f107 020c 	add.w	r2, r7, #12
 8000360:	2364      	movs	r3, #100	@ 0x64
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2302      	movs	r3, #2
 8000366:	2168      	movs	r1, #104	@ 0x68
 8000368:	4803      	ldr	r0, [pc, #12]	@ (8000378 <Mpu6050_Write+0x38>)
 800036a:	f000 fd09 	bl	8000d80 <HAL_I2C_Master_Transmit>

}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000028 	.word	0x20000028

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <Error_Handler+0x8>

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038e:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <HAL_MspInit+0x5c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a14      	ldr	r2, [pc, #80]	@ (80003e4 <HAL_MspInit+0x5c>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <HAL_MspInit+0x5c>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <HAL_MspInit+0x5c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <HAL_MspInit+0x5c>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <HAL_MspInit+0x5c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003be:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <HAL_MspInit+0x60>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	4a04      	ldr	r2, [pc, #16]	@ (80003e8 <HAL_MspInit+0x60>)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010000 	.word	0x40010000

080003ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a16      	ldr	r2, [pc, #88]	@ (8000460 <HAL_I2C_MspInit+0x74>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d124      	bne.n	8000456 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800040c:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <HAL_I2C_MspInit+0x78>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a14      	ldr	r2, [pc, #80]	@ (8000464 <HAL_I2C_MspInit+0x78>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <HAL_I2C_MspInit+0x78>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000424:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800042a:	2312      	movs	r3, #18
 800042c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800042e:	2303      	movs	r3, #3
 8000430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	480b      	ldr	r0, [pc, #44]	@ (8000468 <HAL_I2C_MspInit+0x7c>)
 800043a:	f000 f9d9 	bl	80007f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <HAL_I2C_MspInit+0x78>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <HAL_I2C_MspInit+0x78>)
 8000444:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <HAL_I2C_MspInit+0x78>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000456:	bf00      	nop
 8000458:	3720      	adds	r7, #32
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40005800 	.word	0x40005800
 8000464:	40021000 	.word	0x40021000
 8000468:	40010c00 	.word	0x40010c00

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <NMI_Handler+0x4>

08000474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <MemManage_Handler+0x4>

08000484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <BusFault_Handler+0x4>

0800048c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <UsageFault_Handler+0x4>

08000494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004bc:	f000 f874 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d0:	f7ff fff8 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004d6:	490c      	ldr	r1, [pc, #48]	@ (8000508 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <LoopFillZerobss+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a09      	ldr	r2, [pc, #36]	@ (8000510 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004ec:	4c09      	ldr	r4, [pc, #36]	@ (8000514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004fa:	f002 f879 	bl	80025f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fe:	f7ff fe25 	bl	800014c <main>
  bx lr
 8000502:	4770      	bx	lr
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800050c:	08002684 	.word	0x08002684
  ldr r2, =_sbss
 8000510:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000514:	20000090 	.word	0x20000090

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <HAL_Init+0x28>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <HAL_Init+0x28>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f92b 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	200f      	movs	r0, #15
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f7ff ff26 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f935 	bl	80007d6 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f90b 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000008 	.word	0x20000008
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <HAL_IncTick+0x1c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <HAL_IncTick+0x20>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <HAL_IncTick+0x20>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	20000008 	.word	0x20000008
 80005c8:	2000008c 	.word	0x2000008c

080005cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b02      	ldr	r3, [pc, #8]	@ (80005dc <HAL_GetTick+0x10>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	2000008c 	.word	0x2000008c

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff fff0 	bl	80005cc <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_Delay+0x44>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffe0 	bl	80005cc <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8f7      	bhi.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000008 	.word	0x20000008

08000628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	@ (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <__NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	@ (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	@ 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	@ 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff90 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff49 	bl	8000628 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff5e 	bl	8000670 <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff90 	bl	80006e0 <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5f 	bl	800068c <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffb0 	bl	8000744 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b08b      	sub	sp, #44	@ 0x2c
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000802:	e169      	b.n	8000ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000804:	2201      	movs	r2, #1
 8000806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	69fa      	ldr	r2, [r7, #28]
 8000814:	4013      	ands	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	429a      	cmp	r2, r3
 800081e:	f040 8158 	bne.w	8000ad2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	4a9a      	ldr	r2, [pc, #616]	@ (8000a90 <HAL_GPIO_Init+0x2a0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d05e      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 800082c:	4a98      	ldr	r2, [pc, #608]	@ (8000a90 <HAL_GPIO_Init+0x2a0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d875      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 8000832:	4a98      	ldr	r2, [pc, #608]	@ (8000a94 <HAL_GPIO_Init+0x2a4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d058      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 8000838:	4a96      	ldr	r2, [pc, #600]	@ (8000a94 <HAL_GPIO_Init+0x2a4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d86f      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 800083e:	4a96      	ldr	r2, [pc, #600]	@ (8000a98 <HAL_GPIO_Init+0x2a8>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d052      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 8000844:	4a94      	ldr	r2, [pc, #592]	@ (8000a98 <HAL_GPIO_Init+0x2a8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d869      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 800084a:	4a94      	ldr	r2, [pc, #592]	@ (8000a9c <HAL_GPIO_Init+0x2ac>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d04c      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 8000850:	4a92      	ldr	r2, [pc, #584]	@ (8000a9c <HAL_GPIO_Init+0x2ac>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d863      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 8000856:	4a92      	ldr	r2, [pc, #584]	@ (8000aa0 <HAL_GPIO_Init+0x2b0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d046      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 800085c:	4a90      	ldr	r2, [pc, #576]	@ (8000aa0 <HAL_GPIO_Init+0x2b0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d85d      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 8000862:	2b12      	cmp	r3, #18
 8000864:	d82a      	bhi.n	80008bc <HAL_GPIO_Init+0xcc>
 8000866:	2b12      	cmp	r3, #18
 8000868:	d859      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 800086a:	a201      	add	r2, pc, #4	@ (adr r2, 8000870 <HAL_GPIO_Init+0x80>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	080008eb 	.word	0x080008eb
 8000874:	080008c5 	.word	0x080008c5
 8000878:	080008d7 	.word	0x080008d7
 800087c:	08000919 	.word	0x08000919
 8000880:	0800091f 	.word	0x0800091f
 8000884:	0800091f 	.word	0x0800091f
 8000888:	0800091f 	.word	0x0800091f
 800088c:	0800091f 	.word	0x0800091f
 8000890:	0800091f 	.word	0x0800091f
 8000894:	0800091f 	.word	0x0800091f
 8000898:	0800091f 	.word	0x0800091f
 800089c:	0800091f 	.word	0x0800091f
 80008a0:	0800091f 	.word	0x0800091f
 80008a4:	0800091f 	.word	0x0800091f
 80008a8:	0800091f 	.word	0x0800091f
 80008ac:	0800091f 	.word	0x0800091f
 80008b0:	0800091f 	.word	0x0800091f
 80008b4:	080008cd 	.word	0x080008cd
 80008b8:	080008e1 	.word	0x080008e1
 80008bc:	4a79      	ldr	r2, [pc, #484]	@ (8000aa4 <HAL_GPIO_Init+0x2b4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d013      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008c2:	e02c      	b.n	800091e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	623b      	str	r3, [r7, #32]
          break;
 80008ca:	e029      	b.n	8000920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	3304      	adds	r3, #4
 80008d2:	623b      	str	r3, [r7, #32]
          break;
 80008d4:	e024      	b.n	8000920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	3308      	adds	r3, #8
 80008dc:	623b      	str	r3, [r7, #32]
          break;
 80008de:	e01f      	b.n	8000920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	330c      	adds	r3, #12
 80008e6:	623b      	str	r3, [r7, #32]
          break;
 80008e8:	e01a      	b.n	8000920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008f2:	2304      	movs	r3, #4
 80008f4:	623b      	str	r3, [r7, #32]
          break;
 80008f6:	e013      	b.n	8000920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d105      	bne.n	800090c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000900:	2308      	movs	r3, #8
 8000902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	611a      	str	r2, [r3, #16]
          break;
 800090a:	e009      	b.n	8000920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800090c:	2308      	movs	r3, #8
 800090e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	615a      	str	r2, [r3, #20]
          break;
 8000916:	e003      	b.n	8000920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
          break;
 800091c:	e000      	b.n	8000920 <HAL_GPIO_Init+0x130>
          break;
 800091e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d801      	bhi.n	800092a <HAL_GPIO_Init+0x13a>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	e001      	b.n	800092e <HAL_GPIO_Init+0x13e>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3304      	adds	r3, #4
 800092e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2bff      	cmp	r3, #255	@ 0xff
 8000934:	d802      	bhi.n	800093c <HAL_GPIO_Init+0x14c>
 8000936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	e002      	b.n	8000942 <HAL_GPIO_Init+0x152>
 800093c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093e:	3b08      	subs	r3, #8
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	210f      	movs	r1, #15
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	401a      	ands	r2, r3
 8000954:	6a39      	ldr	r1, [r7, #32]
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	431a      	orrs	r2, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 80b1 	beq.w	8000ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000970:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa8 <HAL_GPIO_Init+0x2b8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a4c      	ldr	r2, [pc, #304]	@ (8000aa8 <HAL_GPIO_Init+0x2b8>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa8 <HAL_GPIO_Init+0x2b8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000988:	4a48      	ldr	r2, [pc, #288]	@ (8000aac <HAL_GPIO_Init+0x2bc>)
 800098a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	3302      	adds	r3, #2
 8000990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	220f      	movs	r2, #15
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a40      	ldr	r2, [pc, #256]	@ (8000ab0 <HAL_GPIO_Init+0x2c0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d013      	beq.n	80009dc <HAL_GPIO_Init+0x1ec>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ab4 <HAL_GPIO_Init+0x2c4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d00d      	beq.n	80009d8 <HAL_GPIO_Init+0x1e8>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a3e      	ldr	r2, [pc, #248]	@ (8000ab8 <HAL_GPIO_Init+0x2c8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d007      	beq.n	80009d4 <HAL_GPIO_Init+0x1e4>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a3d      	ldr	r2, [pc, #244]	@ (8000abc <HAL_GPIO_Init+0x2cc>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d101      	bne.n	80009d0 <HAL_GPIO_Init+0x1e0>
 80009cc:	2303      	movs	r3, #3
 80009ce:	e006      	b.n	80009de <HAL_GPIO_Init+0x1ee>
 80009d0:	2304      	movs	r3, #4
 80009d2:	e004      	b.n	80009de <HAL_GPIO_Init+0x1ee>
 80009d4:	2302      	movs	r3, #2
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0x1ee>
 80009d8:	2301      	movs	r3, #1
 80009da:	e000      	b.n	80009de <HAL_GPIO_Init+0x1ee>
 80009dc:	2300      	movs	r3, #0
 80009de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009e0:	f002 0203 	and.w	r2, r2, #3
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	4093      	lsls	r3, r2
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ee:	492f      	ldr	r1, [pc, #188]	@ (8000aac <HAL_GPIO_Init+0x2bc>)
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3302      	adds	r3, #2
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d006      	beq.n	8000a16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	492c      	ldr	r1, [pc, #176]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	608b      	str	r3, [r1, #8]
 8000a14:	e006      	b.n	8000a24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	4928      	ldr	r1, [pc, #160]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a20:	4013      	ands	r3, r2
 8000a22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d006      	beq.n	8000a3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	4922      	ldr	r1, [pc, #136]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	60cb      	str	r3, [r1, #12]
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	491e      	ldr	r1, [pc, #120]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a58:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	4918      	ldr	r1, [pc, #96]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	4914      	ldr	r1, [pc, #80]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d021      	beq.n	8000ac4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	490e      	ldr	r1, [pc, #56]	@ (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	600b      	str	r3, [r1, #0]
 8000a8c:	e021      	b.n	8000ad2 <HAL_GPIO_Init+0x2e2>
 8000a8e:	bf00      	nop
 8000a90:	10320000 	.word	0x10320000
 8000a94:	10310000 	.word	0x10310000
 8000a98:	10220000 	.word	0x10220000
 8000a9c:	10210000 	.word	0x10210000
 8000aa0:	10120000 	.word	0x10120000
 8000aa4:	10110000 	.word	0x10110000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	40011400 	.word	0x40011400
 8000ac0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <HAL_GPIO_Init+0x304>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	4909      	ldr	r1, [pc, #36]	@ (8000af4 <HAL_GPIO_Init+0x304>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ade:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f47f ae8e 	bne.w	8000804 <HAL_GPIO_Init+0x14>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	372c      	adds	r7, #44	@ 0x2c
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40010400 	.word	0x40010400

08000af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e12b      	b.n	8000d62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d106      	bne.n	8000b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fc64 	bl	80003ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2224      	movs	r2, #36	@ 0x24
 8000b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 0201 	bic.w	r2, r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b5c:	f001 fd0e 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8000b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	4a81      	ldr	r2, [pc, #516]	@ (8000d6c <HAL_I2C_Init+0x274>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d807      	bhi.n	8000b7c <HAL_I2C_Init+0x84>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4a80      	ldr	r2, [pc, #512]	@ (8000d70 <HAL_I2C_Init+0x278>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	bf94      	ite	ls
 8000b74:	2301      	movls	r3, #1
 8000b76:	2300      	movhi	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	e006      	b.n	8000b8a <HAL_I2C_Init+0x92>
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4a7d      	ldr	r2, [pc, #500]	@ (8000d74 <HAL_I2C_Init+0x27c>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	bf94      	ite	ls
 8000b84:	2301      	movls	r3, #1
 8000b86:	2300      	movhi	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e0e7      	b.n	8000d62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4a78      	ldr	r2, [pc, #480]	@ (8000d78 <HAL_I2C_Init+0x280>)
 8000b96:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9a:	0c9b      	lsrs	r3, r3, #18
 8000b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6a1b      	ldr	r3, [r3, #32]
 8000bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8000d6c <HAL_I2C_Init+0x274>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d802      	bhi.n	8000bcc <HAL_I2C_Init+0xd4>
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	e009      	b.n	8000be0 <HAL_I2C_Init+0xe8>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	4a69      	ldr	r2, [pc, #420]	@ (8000d7c <HAL_I2C_Init+0x284>)
 8000bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bdc:	099b      	lsrs	r3, r3, #6
 8000bde:	3301      	adds	r3, #1
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000bf2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	495c      	ldr	r1, [pc, #368]	@ (8000d6c <HAL_I2C_Init+0x274>)
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d819      	bhi.n	8000c34 <HAL_I2C_Init+0x13c>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	1e59      	subs	r1, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c0e:	1c59      	adds	r1, r3, #1
 8000c10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000c14:	400b      	ands	r3, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00a      	beq.n	8000c30 <HAL_I2C_Init+0x138>
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	1e59      	subs	r1, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c28:	3301      	adds	r3, #1
 8000c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c2e:	e051      	b.n	8000cd4 <HAL_I2C_Init+0x1dc>
 8000c30:	2304      	movs	r3, #4
 8000c32:	e04f      	b.n	8000cd4 <HAL_I2C_Init+0x1dc>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d111      	bne.n	8000c60 <HAL_I2C_Init+0x168>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	1e58      	subs	r0, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6859      	ldr	r1, [r3, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	440b      	add	r3, r1
 8000c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf0c      	ite	eq
 8000c58:	2301      	moveq	r3, #1
 8000c5a:	2300      	movne	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	e012      	b.n	8000c86 <HAL_I2C_Init+0x18e>
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	1e58      	subs	r0, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6859      	ldr	r1, [r3, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	0099      	lsls	r1, r3, #2
 8000c70:	440b      	add	r3, r1
 8000c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf0c      	ite	eq
 8000c80:	2301      	moveq	r3, #1
 8000c82:	2300      	movne	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_I2C_Init+0x196>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e022      	b.n	8000cd4 <HAL_I2C_Init+0x1dc>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10e      	bne.n	8000cb4 <HAL_I2C_Init+0x1bc>
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1e58      	subs	r0, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6859      	ldr	r1, [r3, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cb2:	e00f      	b.n	8000cd4 <HAL_I2C_Init+0x1dc>
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	1e58      	subs	r0, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6859      	ldr	r1, [r3, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	0099      	lsls	r1, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cca:	3301      	adds	r3, #1
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	6809      	ldr	r1, [r1, #0]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69da      	ldr	r2, [r3, #28]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000d02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6911      	ldr	r1, [r2, #16]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68d2      	ldr	r2, [r2, #12]
 8000d0e:	4311      	orrs	r1, r2
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	695a      	ldr	r2, [r3, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	000186a0 	.word	0x000186a0
 8000d70:	001e847f 	.word	0x001e847f
 8000d74:	003d08ff 	.word	0x003d08ff
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	10624dd3 	.word	0x10624dd3

08000d80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	817b      	strh	r3, [r7, #10]
 8000d90:	4613      	mov	r3, r2
 8000d92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff fc1a 	bl	80005cc <HAL_GetTick>
 8000d98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b20      	cmp	r3, #32
 8000da4:	f040 80e0 	bne.w	8000f68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2319      	movs	r3, #25
 8000dae:	2201      	movs	r2, #1
 8000db0:	4970      	ldr	r1, [pc, #448]	@ (8000f74 <HAL_I2C_Master_Transmit+0x1f4>)
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 fde2 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e0d3      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <HAL_I2C_Master_Transmit+0x50>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e0cc      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ea>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d007      	beq.n	8000df6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0201 	orr.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2221      	movs	r2, #33	@ 0x21
 8000e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2210      	movs	r2, #16
 8000e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	893a      	ldrh	r2, [r7, #8]
 8000e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4a50      	ldr	r2, [pc, #320]	@ (8000f78 <HAL_I2C_Master_Transmit+0x1f8>)
 8000e36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e38:	8979      	ldrh	r1, [r7, #10]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	6a3a      	ldr	r2, [r7, #32]
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f000 fc32 	bl	80016a8 <I2C_MasterRequestWrite>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e08d      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e64:	e066      	b.n	8000f34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	6a39      	ldr	r1, [r7, #32]
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f000 fea0 	bl	8001bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00d      	beq.n	8000e92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d107      	bne.n	8000e8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e06b      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d11b      	bne.n	8000f08 <HAL_I2C_Master_Transmit+0x188>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d017      	beq.n	8000f08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	6a39      	ldr	r1, [r7, #32]
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 fe97 	bl	8001c40 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00d      	beq.n	8000f34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d107      	bne.n	8000f30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e01a      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d194      	bne.n	8000e66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2220      	movs	r2, #32
 8000f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e000      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f68:	2302      	movs	r3, #2
  }
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	00100002 	.word	0x00100002
 8000f78:	ffff0000 	.word	0xffff0000

08000f7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	@ 0x30
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	4608      	mov	r0, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	817b      	strh	r3, [r7, #10]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	813b      	strh	r3, [r7, #8]
 8000f92:	4613      	mov	r3, r2
 8000f94:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f9a:	f7ff fb17 	bl	80005cc <HAL_GetTick>
 8000f9e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	f040 8244 	bne.w	8001436 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2319      	movs	r3, #25
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4982      	ldr	r1, [pc, #520]	@ (80011c0 <HAL_I2C_Mem_Read+0x244>)
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 fcdf 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e237      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_I2C_Mem_Read+0x5a>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e230      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d007      	beq.n	8000ffc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800100a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2222      	movs	r2, #34	@ 0x22
 8001010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2240      	movs	r2, #64	@ 0x40
 8001018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800102c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001032:	b29a      	uxth	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4a62      	ldr	r2, [pc, #392]	@ (80011c4 <HAL_I2C_Mem_Read+0x248>)
 800103c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800103e:	88f8      	ldrh	r0, [r7, #6]
 8001040:	893a      	ldrh	r2, [r7, #8]
 8001042:	8979      	ldrh	r1, [r7, #10]
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4603      	mov	r3, r0
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 fbac 	bl	80017ac <I2C_RequestMemoryRead>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e1ec      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001062:	2b00      	cmp	r3, #0
 8001064:	d113      	bne.n	800108e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e1c0      	b.n	8001410 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001092:	2b01      	cmp	r3, #1
 8001094:	d11e      	bne.n	80010d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010a6:	b672      	cpsid	i
}
 80010a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	61bb      	str	r3, [r7, #24]
 80010be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010d0:	b662      	cpsie	i
}
 80010d2:	e035      	b.n	8001140 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d11e      	bne.n	800111a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001114:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001116:	b662      	cpsie	i
}
 8001118:	e012      	b.n	8001140 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001128:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001140:	e166      	b.n	8001410 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001146:	2b03      	cmp	r3, #3
 8001148:	f200 811f 	bhi.w	800138a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001150:	2b01      	cmp	r3, #1
 8001152:	d123      	bne.n	800119c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001156:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 fdb9 	bl	8001cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e167      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001184:	3b01      	subs	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001190:	b29b      	uxth	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800119a:	e139      	b.n	8001410 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d152      	bne.n	800124a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011aa:	2200      	movs	r2, #0
 80011ac:	4906      	ldr	r1, [pc, #24]	@ (80011c8 <HAL_I2C_Mem_Read+0x24c>)
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fbe4 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e13c      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
 80011be:	bf00      	nop
 80011c0:	00100002 	.word	0x00100002
 80011c4:	ffff0000 	.word	0xffff0000
 80011c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	691a      	ldr	r2, [r3, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b29a      	uxth	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001208:	b29b      	uxth	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b29a      	uxth	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001212:	b662      	cpsie	i
}
 8001214:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001232:	3b01      	subs	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800123e:	b29b      	uxth	r3, r3
 8001240:	3b01      	subs	r3, #1
 8001242:	b29a      	uxth	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001248:	e0e2      	b.n	8001410 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001250:	2200      	movs	r2, #0
 8001252:	497b      	ldr	r1, [pc, #492]	@ (8001440 <HAL_I2C_Mem_Read+0x4c4>)
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 fb91 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0e9      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001272:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001294:	3b01      	subs	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80012aa:	4b66      	ldr	r3, [pc, #408]	@ (8001444 <HAL_I2C_Mem_Read+0x4c8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	4a65      	ldr	r2, [pc, #404]	@ (8001448 <HAL_I2C_Mem_Read+0x4cc>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0a1a      	lsrs	r2, r3, #8
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	00da      	lsls	r2, r3, #3
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d118      	bne.n	8001302 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2220      	movs	r2, #32
 80012da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f043 0220 	orr.w	r2, r3, #32
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80012f2:	b662      	cpsie	i
}
 80012f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e09a      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b04      	cmp	r3, #4
 800130e:	d1d9      	bne.n	80012c4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800131e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800133c:	3b01      	subs	r3, #1
 800133e:	b29a      	uxth	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001348:	b29b      	uxth	r3, r3
 800134a:	3b01      	subs	r3, #1
 800134c:	b29a      	uxth	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001352:	b662      	cpsie	i
}
 8001354:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001372:	3b01      	subs	r3, #1
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001388:	e042      	b.n	8001410 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800138a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800138c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 fc9e 	bl	8001cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e04c      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d118      	bne.n	8001410 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001414:	2b00      	cmp	r3, #0
 8001416:	f47f ae94 	bne.w	8001142 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001436:	2302      	movs	r3, #2
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	3728      	adds	r7, #40	@ 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	00010004 	.word	0x00010004
 8001444:	20000000 	.word	0x20000000
 8001448:	14f8b589 	.word	0x14f8b589

0800144c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	460b      	mov	r3, r1
 800145a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff f8b6 	bl	80005cc <HAL_GetTick>
 8001460:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	f040 8111 	bne.w	8001696 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2319      	movs	r3, #25
 800147a:	2201      	movs	r2, #1
 800147c:	4988      	ldr	r1, [pc, #544]	@ (80016a0 <HAL_I2C_IsDeviceReady+0x254>)
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 fa7c 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800148a:	2302      	movs	r3, #2
 800148c:	e104      	b.n	8001698 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_I2C_IsDeviceReady+0x50>
 8001498:	2302      	movs	r3, #2
 800149a:	e0fd      	b.n	8001698 <HAL_I2C_IsDeviceReady+0x24c>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d007      	beq.n	80014c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2224      	movs	r2, #36	@ 0x24
 80014d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4a70      	ldr	r2, [pc, #448]	@ (80016a4 <HAL_I2C_IsDeviceReady+0x258>)
 80014e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 fa3a 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00d      	beq.n	800152a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800151c:	d103      	bne.n	8001526 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0b6      	b.n	8001698 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800152a:	897b      	ldrh	r3, [r7, #10]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001538:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff f847 	bl	80005cc <HAL_GetTick>
 800153e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b02      	cmp	r3, #2
 800154c:	bf0c      	ite	eq
 800154e:	2301      	moveq	r3, #1
 8001550:	2300      	movne	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001564:	bf0c      	ite	eq
 8001566:	2301      	moveq	r3, #1
 8001568:	2300      	movne	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800156e:	e025      	b.n	80015bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001570:	f7ff f82c 	bl	80005cc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d302      	bcc.n	8001586 <HAL_I2C_IsDeviceReady+0x13a>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	22a0      	movs	r2, #160	@ 0xa0
 800158a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b02      	cmp	r3, #2
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2ba0      	cmp	r3, #160	@ 0xa0
 80015c6:	d005      	beq.n	80015d4 <HAL_I2C_IsDeviceReady+0x188>
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_I2C_IsDeviceReady+0x188>
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0cd      	beq.n	8001570 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d129      	bne.n	800163e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2319      	movs	r3, #25
 8001616:	2201      	movs	r2, #1
 8001618:	4921      	ldr	r1, [pc, #132]	@ (80016a0 <HAL_I2C_IsDeviceReady+0x254>)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f9ae 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e036      	b.n	8001698 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2220      	movs	r2, #32
 800162e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e02c      	b.n	8001698 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800164c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001656:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2319      	movs	r3, #25
 800165e:	2201      	movs	r2, #1
 8001660:	490f      	ldr	r1, [pc, #60]	@ (80016a0 <HAL_I2C_IsDeviceReady+0x254>)
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f98a 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e012      	b.n	8001698 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	3301      	adds	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	f4ff af32 	bcc.w	80014e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	00100002 	.word	0x00100002
 80016a4:	ffff0000 	.word	0xffff0000

080016a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	460b      	mov	r3, r1
 80016b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d006      	beq.n	80016d2 <I2C_MasterRequestWrite+0x2a>
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d003      	beq.n	80016d2 <I2C_MasterRequestWrite+0x2a>
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016d0:	d108      	bne.n	80016e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e00b      	b.n	80016fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	d107      	bne.n	80016fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f937 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00d      	beq.n	8001730 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001722:	d103      	bne.n	800172c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800172a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e035      	b.n	800179c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001738:	d108      	bne.n	800174c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800173a:	897b      	ldrh	r3, [r7, #10]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	e01b      	b.n	8001784 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800174c:	897b      	ldrh	r3, [r7, #10]
 800174e:	11db      	asrs	r3, r3, #7
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f003 0306 	and.w	r3, r3, #6
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f063 030f 	orn	r3, r3, #15
 800175c:	b2da      	uxtb	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	490e      	ldr	r1, [pc, #56]	@ (80017a4 <I2C_MasterRequestWrite+0xfc>)
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f980 	bl	8001a70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e010      	b.n	800179c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800177a:	897b      	ldrh	r3, [r7, #10]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4907      	ldr	r1, [pc, #28]	@ (80017a8 <I2C_MasterRequestWrite+0x100>)
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f970 	bl	8001a70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	00010008 	.word	0x00010008
 80017a8:	00010002 	.word	0x00010002

080017ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	4608      	mov	r0, r1
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	817b      	strh	r3, [r7, #10]
 80017be:	460b      	mov	r3, r1
 80017c0:	813b      	strh	r3, [r7, #8]
 80017c2:	4613      	mov	r3, r2
 80017c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f8c2 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800180c:	d103      	bne.n	8001816 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0aa      	b.n	8001970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800181a:	897b      	ldrh	r3, [r7, #10]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	4952      	ldr	r1, [pc, #328]	@ (8001978 <I2C_RequestMemoryRead+0x1cc>)
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f91d 	bl	8001a70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e097      	b.n	8001970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f9a8 	bl	8001bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b04      	cmp	r3, #4
 800186c:	d107      	bne.n	800187e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e076      	b.n	8001970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001888:	893b      	ldrh	r3, [r7, #8]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	e021      	b.n	80018d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001894:	893b      	ldrh	r3, [r7, #8]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	b29b      	uxth	r3, r3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f982 	bl	8001bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d107      	bne.n	80018ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e050      	b.n	8001970 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018ce:	893b      	ldrh	r3, [r7, #8]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018da:	6a39      	ldr	r1, [r7, #32]
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f967 	bl	8001bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d107      	bne.n	8001900 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e035      	b.n	8001970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001912:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	2200      	movs	r2, #0
 800191c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f82b 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00d      	beq.n	8001948 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800193a:	d103      	bne.n	8001944 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001942:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e013      	b.n	8001970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001948:	897b      	ldrh	r3, [r7, #10]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	6a3a      	ldr	r2, [r7, #32]
 800195c:	4906      	ldr	r1, [pc, #24]	@ (8001978 <I2C_RequestMemoryRead+0x1cc>)
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f886 	bl	8001a70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	00010002 	.word	0x00010002

0800197c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800198c:	e048      	b.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d044      	beq.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001996:	f7fe fe19 	bl	80005cc <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d302      	bcc.n	80019ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d139      	bne.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d10d      	bne.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	43da      	mvns	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4013      	ands	r3, r2
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	e00c      	b.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	43da      	mvns	r2, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	4013      	ands	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d116      	bne.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f043 0220 	orr.w	r2, r3, #32
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e023      	b.n	8001a68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d10d      	bne.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	43da      	mvns	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	4013      	ands	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	e00c      	b.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4013      	ands	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d093      	beq.n	800198e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a7e:	e071      	b.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a8e:	d123      	bne.n	8001ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001aa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f043 0204 	orr.w	r2, r3, #4
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e067      	b.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ade:	d041      	beq.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae0:	f7fe fd74 	bl	80005cc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d302      	bcc.n	8001af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d136      	bne.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10c      	bne.n	8001b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	e00b      	b.n	8001b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	43da      	mvns	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	4013      	ands	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f043 0220 	orr.w	r2, r3, #32
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e021      	b.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	0c1b      	lsrs	r3, r3, #16
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d10c      	bne.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	43da      	mvns	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	e00b      	b.n	8001ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4013      	ands	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f47f af6d 	bne.w	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bbc:	e034      	b.n	8001c28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f8e3 	bl	8001d8a <I2C_IsAcknowledgeFailed>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e034      	b.n	8001c38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d028      	beq.n	8001c28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd6:	f7fe fcf9 	bl	80005cc <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d302      	bcc.n	8001bec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d11d      	bne.n	8001c28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf6:	2b80      	cmp	r3, #128	@ 0x80
 8001bf8:	d016      	beq.n	8001c28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e007      	b.n	8001c38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c32:	2b80      	cmp	r3, #128	@ 0x80
 8001c34:	d1c3      	bne.n	8001bbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c4c:	e034      	b.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f89b 	bl	8001d8a <I2C_IsAcknowledgeFailed>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e034      	b.n	8001cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d028      	beq.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c66:	f7fe fcb1 	bl	80005cc <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d11d      	bne.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d016      	beq.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f043 0220 	orr.w	r2, r3, #32
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e007      	b.n	8001cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d1c3      	bne.n	8001c4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cdc:	e049      	b.n	8001d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d119      	bne.n	8001d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0210 	mvn.w	r2, #16
 8001cf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e030      	b.n	8001d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7fe fc54 	bl	80005cc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d302      	bcc.n	8001d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11d      	bne.n	8001d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d40:	2b40      	cmp	r3, #64	@ 0x40
 8001d42:	d016      	beq.n	8001d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f043 0220 	orr.w	r2, r3, #32
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e007      	b.n	8001d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7c:	2b40      	cmp	r3, #64	@ 0x40
 8001d7e:	d1ae      	bne.n	8001cde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da0:	d11b      	bne.n	8001dda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001daa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e272      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8087 	beq.w	8001f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e08:	4b92      	ldr	r3, [pc, #584]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d00c      	beq.n	8001e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e14:	4b8f      	ldr	r3, [pc, #572]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d112      	bne.n	8001e46 <HAL_RCC_OscConfig+0x5e>
 8001e20:	4b8c      	ldr	r3, [pc, #560]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e2c:	d10b      	bne.n	8001e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2e:	4b89      	ldr	r3, [pc, #548]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d06c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x12c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d168      	bne.n	8001f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e24c      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x76>
 8001e50:	4b80      	ldr	r3, [pc, #512]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a7f      	ldr	r2, [pc, #508]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	e02e      	b.n	8001ebc <HAL_RCC_OscConfig+0xd4>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x98>
 8001e66:	4b7b      	ldr	r3, [pc, #492]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7a      	ldr	r2, [pc, #488]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b78      	ldr	r3, [pc, #480]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a77      	ldr	r2, [pc, #476]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xd4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xbc>
 8001e8a:	4b72      	ldr	r3, [pc, #456]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a71      	ldr	r2, [pc, #452]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b6f      	ldr	r3, [pc, #444]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xd4>
 8001ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b68      	ldr	r3, [pc, #416]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a67      	ldr	r2, [pc, #412]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fb82 	bl	80005cc <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe fb7e 	bl	80005cc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e200      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b5d      	ldr	r3, [pc, #372]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xe4>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7fe fb6e 	bl	80005cc <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fb6a 	bl	80005cc <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1ec      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	4b53      	ldr	r3, [pc, #332]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x10c>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f22:	4b4c      	ldr	r3, [pc, #304]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f2e:	4b49      	ldr	r3, [pc, #292]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x18c>
 8001f3a:	4b46      	ldr	r3, [pc, #280]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b43      	ldr	r3, [pc, #268]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x176>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1c0      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4939      	ldr	r1, [pc, #228]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b36      	ldr	r3, [pc, #216]	@ (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe fb23 	bl	80005cc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7fe fb1f 	bl	80005cc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1a1      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4927      	ldr	r1, [pc, #156]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fb02 	bl	80005cc <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fafe 	bl	80005cc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e180      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d03a      	beq.n	800206c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d019      	beq.n	8002032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b17      	ldr	r3, [pc, #92]	@ (800205c <HAL_RCC_OscConfig+0x274>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002004:	f7fe fae2 	bl	80005cc <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe fade 	bl	80005cc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e160      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_RCC_OscConfig+0x26c>)
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800202a:	2001      	movs	r0, #1
 800202c:	f000 faba 	bl	80025a4 <RCC_Delay>
 8002030:	e01c      	b.n	800206c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_RCC_OscConfig+0x274>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7fe fac8 	bl	80005cc <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203e:	e00f      	b.n	8002060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe fac4 	bl	80005cc <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d908      	bls.n	8002060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e146      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	42420000 	.word	0x42420000
 800205c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002060:	4b92      	ldr	r3, [pc, #584]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1e9      	bne.n	8002040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80a6 	beq.w	80021c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b8b      	ldr	r3, [pc, #556]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10d      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b88      	ldr	r3, [pc, #544]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a87      	ldr	r2, [pc, #540]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b85      	ldr	r3, [pc, #532]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b82      	ldr	r3, [pc, #520]	@ (80022b0 <HAL_RCC_OscConfig+0x4c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d118      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b2:	4b7f      	ldr	r3, [pc, #508]	@ (80022b0 <HAL_RCC_OscConfig+0x4c8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7e      	ldr	r2, [pc, #504]	@ (80022b0 <HAL_RCC_OscConfig+0x4c8>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020be:	f7fe fa85 	bl	80005cc <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c6:	f7fe fa81 	bl	80005cc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	@ 0x64
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e103      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	4b75      	ldr	r3, [pc, #468]	@ (80022b0 <HAL_RCC_OscConfig+0x4c8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x312>
 80020ec:	4b6f      	ldr	r3, [pc, #444]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a6e      	ldr	r2, [pc, #440]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	e02d      	b.n	8002156 <HAL_RCC_OscConfig+0x36e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x334>
 8002102:	4b6a      	ldr	r3, [pc, #424]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a69      	ldr	r2, [pc, #420]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a66      	ldr	r2, [pc, #408]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	e01c      	b.n	8002156 <HAL_RCC_OscConfig+0x36e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x356>
 8002124:	4b61      	ldr	r3, [pc, #388]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a60      	ldr	r2, [pc, #384]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	4b5e      	ldr	r3, [pc, #376]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a5d      	ldr	r2, [pc, #372]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	e00b      	b.n	8002156 <HAL_RCC_OscConfig+0x36e>
 800213e:	4b5b      	ldr	r3, [pc, #364]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a5a      	ldr	r2, [pc, #360]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	4b58      	ldr	r3, [pc, #352]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a57      	ldr	r2, [pc, #348]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d015      	beq.n	800218a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7fe fa35 	bl	80005cc <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fa31 	bl	80005cc <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0b1      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	4b4b      	ldr	r3, [pc, #300]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ee      	beq.n	8002166 <HAL_RCC_OscConfig+0x37e>
 8002188:	e014      	b.n	80021b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7fe fa1f 	bl	80005cc <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fa1b 	bl	80005cc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e09b      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	4b40      	ldr	r3, [pc, #256]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b3c      	ldr	r3, [pc, #240]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a3b      	ldr	r2, [pc, #236]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8087 	beq.w	80022de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d0:	4b36      	ldr	r3, [pc, #216]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d061      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d146      	bne.n	8002272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b33      	ldr	r3, [pc, #204]	@ (80022b4 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe f9ef 	bl	80005cc <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe f9eb 	bl	80005cc <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e06d      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002204:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002218:	d108      	bne.n	800222c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4921      	ldr	r1, [pc, #132]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a19      	ldr	r1, [r3, #32]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	430b      	orrs	r3, r1
 800223e:	491b      	ldr	r1, [pc, #108]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_RCC_OscConfig+0x4cc>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe f9bf 	bl	80005cc <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002252:	f7fe f9bb 	bl	80005cc <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e03d      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x46a>
 8002270:	e035      	b.n	80022de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_RCC_OscConfig+0x4cc>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe f9a8 	bl	80005cc <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe f9a4 	bl	80005cc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e026      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_RCC_OscConfig+0x4c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x498>
 800229e:	e01e      	b.n	80022de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e019      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40007000 	.word	0x40007000
 80022b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_RCC_OscConfig+0x500>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000

080022ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0d0      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b6a      	ldr	r3, [pc, #424]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b67      	ldr	r3, [pc, #412]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4965      	ldr	r1, [pc, #404]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b63      	ldr	r3, [pc, #396]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b8      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002348:	4b59      	ldr	r3, [pc, #356]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a58      	ldr	r2, [pc, #352]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002360:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a52      	ldr	r2, [pc, #328]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800236a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236c:	4b50      	ldr	r3, [pc, #320]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	494d      	ldr	r1, [pc, #308]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d040      	beq.n	800240c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b47      	ldr	r3, [pc, #284]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d115      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b41      	ldr	r3, [pc, #260]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e073      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06b      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b39      	ldr	r3, [pc, #228]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4936      	ldr	r1, [pc, #216]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023dc:	f7fe f8f6 	bl	80005cc <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe f8f2 	bl	80005cc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e053      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d210      	bcs.n	800243c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4922      	ldr	r1, [pc, #136]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e032      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4916      	ldr	r1, [pc, #88]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002466:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	490e      	ldr	r1, [pc, #56]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800247a:	f000 f821 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800247e:	4602      	mov	r2, r0
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	490a      	ldr	r1, [pc, #40]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	4a09      	ldr	r2, [pc, #36]	@ (80024b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002496:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <HAL_RCC_ClockConfig+0x1d0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f854 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	08002650 	.word	0x08002650
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024da:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x94>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ee:	e027      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x98>)
 80024f2:	613b      	str	r3, [r7, #16]
      break;
 80024f4:	e027      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	0c9b      	lsrs	r3, r3, #18
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	4a17      	ldr	r2, [pc, #92]	@ (800255c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x94>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	0c5b      	lsrs	r3, r3, #17
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x98>)
 8002522:	fb03 f202 	mul.w	r2, r3, r2
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e004      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0c      	ldr	r2, [pc, #48]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	613b      	str	r3, [r7, #16]
      break;
 800253e:	e002      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	613b      	str	r3, [r7, #16]
      break;
 8002544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002546:	693b      	ldr	r3, [r7, #16]
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	007a1200 	.word	0x007a1200
 800255c:	08002668 	.word	0x08002668
 8002560:	08002678 	.word	0x08002678
 8002564:	003d0900 	.word	0x003d0900

08002568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b02      	ldr	r3, [pc, #8]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x10>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000000 	.word	0x20000000

0800257c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002580:	f7ff fff2 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	@ (80025a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08002660 	.word	0x08002660

080025a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025ac:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <RCC_Delay+0x34>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <RCC_Delay+0x38>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0a5b      	lsrs	r3, r3, #9
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c0:	bf00      	nop
  }
  while (Delay --);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	60fa      	str	r2, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f9      	bne.n	80025c0 <RCC_Delay+0x1c>
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000000 	.word	0x20000000
 80025dc:	10624dd3 	.word	0x10624dd3

080025e0 <memset>:
 80025e0:	4603      	mov	r3, r0
 80025e2:	4402      	add	r2, r0
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <memset+0xa>
 80025e8:	4770      	bx	lr
 80025ea:	f803 1b01 	strb.w	r1, [r3], #1
 80025ee:	e7f9      	b.n	80025e4 <memset+0x4>

080025f0 <__libc_init_array>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	2600      	movs	r6, #0
 80025f4:	4d0c      	ldr	r5, [pc, #48]	@ (8002628 <__libc_init_array+0x38>)
 80025f6:	4c0d      	ldr	r4, [pc, #52]	@ (800262c <__libc_init_array+0x3c>)
 80025f8:	1b64      	subs	r4, r4, r5
 80025fa:	10a4      	asrs	r4, r4, #2
 80025fc:	42a6      	cmp	r6, r4
 80025fe:	d109      	bne.n	8002614 <__libc_init_array+0x24>
 8002600:	f000 f81a 	bl	8002638 <_init>
 8002604:	2600      	movs	r6, #0
 8002606:	4d0a      	ldr	r5, [pc, #40]	@ (8002630 <__libc_init_array+0x40>)
 8002608:	4c0a      	ldr	r4, [pc, #40]	@ (8002634 <__libc_init_array+0x44>)
 800260a:	1b64      	subs	r4, r4, r5
 800260c:	10a4      	asrs	r4, r4, #2
 800260e:	42a6      	cmp	r6, r4
 8002610:	d105      	bne.n	800261e <__libc_init_array+0x2e>
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	f855 3b04 	ldr.w	r3, [r5], #4
 8002618:	4798      	blx	r3
 800261a:	3601      	adds	r6, #1
 800261c:	e7ee      	b.n	80025fc <__libc_init_array+0xc>
 800261e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002622:	4798      	blx	r3
 8002624:	3601      	adds	r6, #1
 8002626:	e7f2      	b.n	800260e <__libc_init_array+0x1e>
 8002628:	0800267c 	.word	0x0800267c
 800262c:	0800267c 	.word	0x0800267c
 8002630:	0800267c 	.word	0x0800267c
 8002634:	08002680 	.word	0x08002680

08002638 <_init>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	bf00      	nop
 800263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263e:	bc08      	pop	{r3}
 8002640:	469e      	mov	lr, r3
 8002642:	4770      	bx	lr

08002644 <_fini>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	bf00      	nop
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr
