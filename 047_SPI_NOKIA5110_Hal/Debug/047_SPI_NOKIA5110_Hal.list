
047_SPI_NOKIA5110_Hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a10  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003b20  08003b20  00004b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d20  08003d20  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d20  08003d20  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d20  08003d20  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d20  08003d20  00004d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d24  08003d24  00004d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d28  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000000c  08003d34  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003d34  000052c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d76  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d7  00000000  00000000  0000adab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  0000c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e5  00000000  00000000  0000cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a89  00000000  00000000  0000d105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008031  00000000  00000000  00023b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008155f  00000000  00000000  0002bbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad11e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d00  00000000  00000000  000ad164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000aee64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b08 	.word	0x08003b08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003b08 	.word	0x08003b08

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <Nokia_5110_Init>:
uint8_t framebuffer[504];
uint8_t Bi;
uint16_t By;
uint8_t last;

bool Nokia_5110_Init(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	Nokia_5110_Reset();
 8000a90:	f000 f84c 	bl	8000b2c <Nokia_5110_Reset>

	if(!Nokia_5110_Write(0x21, 0))
 8000a94:	2100      	movs	r1, #0
 8000a96:	2021      	movs	r0, #33	@ 0x21
 8000a98:	f000 f85e 	bl	8000b58 <Nokia_5110_Write>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f083 0301 	eor.w	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <Nokia_5110_Init+0x20>
		return false;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e03c      	b.n	8000b26 <Nokia_5110_Init+0x9a>
	if(!Nokia_5110_Write(0x84, 0))
 8000aac:	2100      	movs	r1, #0
 8000aae:	2084      	movs	r0, #132	@ 0x84
 8000ab0:	f000 f852 	bl	8000b58 <Nokia_5110_Write>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f083 0301 	eor.w	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <Nokia_5110_Init+0x38>
		return false;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e030      	b.n	8000b26 <Nokia_5110_Init+0x9a>
	if(!Nokia_5110_Write(0x04, 0))		// TEMPRATURE CO = 0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2004      	movs	r0, #4
 8000ac8:	f000 f846 	bl	8000b58 <Nokia_5110_Write>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f083 0301 	eor.w	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <Nokia_5110_Init+0x50>
		return false;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e024      	b.n	8000b26 <Nokia_5110_Init+0x9a>
	if(!Nokia_5110_Write(0x13, 0))
 8000adc:	2100      	movs	r1, #0
 8000ade:	2013      	movs	r0, #19
 8000ae0:	f000 f83a 	bl	8000b58 <Nokia_5110_Write>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f083 0301 	eor.w	r3, r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <Nokia_5110_Init+0x68>
		return false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	e018      	b.n	8000b26 <Nokia_5110_Init+0x9a>
	if(!Nokia_5110_Write(0x20, 0))		// LCD BASIC COMMAND
 8000af4:	2100      	movs	r1, #0
 8000af6:	2020      	movs	r0, #32
 8000af8:	f000 f82e 	bl	8000b58 <Nokia_5110_Write>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f083 0301 	eor.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <Nokia_5110_Init+0x80>
		return false;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e00c      	b.n	8000b26 <Nokia_5110_Init+0x9a>
	if(!Nokia_5110_Write(0x0C, 0))		// DISPLAY_NORMAL
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	200c      	movs	r0, #12
 8000b10:	f000 f822 	bl	8000b58 <Nokia_5110_Write>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f083 0301 	eor.w	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <Nokia_5110_Init+0x98>
		return false;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e000      	b.n	8000b26 <Nokia_5110_Init+0x9a>

	return true;
 8000b24:	2301      	movs	r3, #1


}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <Nokia_5110_Reset>:


void Nokia_5110_Reset(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b36:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <Nokia_5110_Reset+0x28>)
 8000b38:	f001 f930 	bl	8001d9c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b3c:	2064      	movs	r0, #100	@ 0x64
 8000b3e:	f000 fc89 	bl	8001454 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <Nokia_5110_Reset+0x28>)
 8000b4a:	f001 f927 	bl	8001d9c <HAL_GPIO_WritePin>

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40010800 	.word	0x40010800

08000b58 <Nokia_5110_Write>:

bool Nokia_5110_Write(uint8_t data, uint8_t mode){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]


	if(mode == 0){
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10c      	bne.n	8000b88 <Nokia_5110_Write+0x30>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);							// DC PIN LOW for command send
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b74:	4819      	ldr	r0, [pc, #100]	@ (8000bdc <Nokia_5110_Write+0x84>)
 8000b76:	f001 f911 	bl	8001d9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);								// CE PIN RESET (çip seçim pini low oldğunda bu cihaz seçili)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b80:	4816      	ldr	r0, [pc, #88]	@ (8000bdc <Nokia_5110_Write+0x84>)
 8000b82:	f001 f90b 	bl	8001d9c <HAL_GPIO_WritePin>
 8000b86:	e017      	b.n	8000bb8 <Nokia_5110_Write+0x60>
	}
	else if(mode == 1){
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10c      	bne.n	8000ba8 <Nokia_5110_Write+0x50>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);								// DC PIN HIGH for data send
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b94:	4811      	ldr	r0, [pc, #68]	@ (8000bdc <Nokia_5110_Write+0x84>)
 8000b96:	f001 f901 	bl	8001d9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);								// CE PIN RESET
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ba0:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <Nokia_5110_Write+0x84>)
 8000ba2:	f001 f8fb 	bl	8001d9c <HAL_GPIO_WritePin>
 8000ba6:	e007      	b.n	8000bb8 <Nokia_5110_Write+0x60>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);								// CE PIN HIGH
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bae:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <Nokia_5110_Write+0x84>)
 8000bb0:	f001 f8f4 	bl	8001d9c <HAL_GPIO_WritePin>
		return false;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e00c      	b.n	8000bd2 <Nokia_5110_Write+0x7a>
	}

	HAL_SPI_Transmit_DMA(&hspi2, &data , 1);
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <Nokia_5110_Write+0x88>)
 8000bc0:	f001 fd66 	bl	8002690 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);									// CE PIN HIGH
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bca:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <Nokia_5110_Write+0x84>)
 8000bcc:	f001 f8e6 	bl	8001d9c <HAL_GPIO_WritePin>

	return true;
 8000bd0:	2301      	movs	r3, #1

}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	20000224 	.word	0x20000224

08000be4 <Nokia_5110_Update>:
		framebuffer[i] = 0x00;
	}
}


bool Nokia_5110_Update(void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

	// move to x = 0 pixel				imlec kaydırma
	if(!Nokia_5110_Write(0x80,0))
 8000be8:	2100      	movs	r1, #0
 8000bea:	2080      	movs	r0, #128	@ 0x80
 8000bec:	f7ff ffb4 	bl	8000b58 <Nokia_5110_Write>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f083 0301 	eor.w	r3, r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <Nokia_5110_Update+0x1c>
		return false;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e011      	b.n	8000c24 <Nokia_5110_Update+0x40>
	// move to y = 0 pixel
	if(!Nokia_5110_Write(0x40,0))
 8000c00:	2100      	movs	r1, #0
 8000c02:	2040      	movs	r0, #64	@ 0x40
 8000c04:	f7ff ffa8 	bl	8000b58 <Nokia_5110_Write>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f083 0301 	eor.w	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <Nokia_5110_Update+0x34>
		return false;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e005      	b.n	8000c24 <Nokia_5110_Update+0x40>

	Nokia_5110_BufferWrite(framebuffer , 504);
 8000c18:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <Nokia_5110_Update+0x44>)
 8000c1e:	f000 f805 	bl	8000c2c <Nokia_5110_BufferWrite>

	return true;
 8000c22:	2301      	movs	r3, #1

}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000028 	.word	0x20000028

08000c2c <Nokia_5110_BufferWrite>:

void Nokia_5110_BufferWrite(uint8_t *data, uint16_t length){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);					// CE PIN LOW FOR SEND DATA
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3e:	4809      	ldr	r0, [pc, #36]	@ (8000c64 <Nokia_5110_BufferWrite+0x38>)
 8000c40:	f001 f8ac 	bl	8001d9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);						// DC PIN HIGH FOR SEND COMAND
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c4a:	4806      	ldr	r0, [pc, #24]	@ (8000c64 <Nokia_5110_BufferWrite+0x38>)
 8000c4c:	f001 f8a6 	bl	8001d9c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, data, length);								// stm32 memory den spi slave cihazına veri gönder.
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	461a      	mov	r2, r3
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <Nokia_5110_BufferWrite+0x3c>)
 8000c58:	f001 fd1a 	bl	8002690 <HAL_SPI_Transmit_DMA>

}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40010800 	.word	0x40010800
 8000c68:	20000224 	.word	0x20000224

08000c6c <NOkia5110_SetPixel>:

void NOkia5110_SetPixel(uint8_t x, uint8_t y, bool set){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	460b      	mov	r3, r1
 8000c78:	71bb      	strb	r3, [r7, #6]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	717b      	strb	r3, [r7, #5]


	if (x < 0 || x >= 84 || y < 0 || y >= 84)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b53      	cmp	r3, #83	@ 0x53
 8000c82:	d848      	bhi.n	8000d16 <NOkia5110_SetPixel+0xaa>
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	2b53      	cmp	r3, #83	@ 0x53
 8000c88:	d845      	bhi.n	8000d16 <NOkia5110_SetPixel+0xaa>
		return;

	By = (y/8) * 84 + x;
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	08db      	lsrs	r3, r3, #3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	0052      	lsls	r2, r2, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	461a      	mov	r2, r3
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <NOkia5110_SetPixel+0xb4>)
 8000caa:	801a      	strh	r2, [r3, #0]
	Bi = y % 8;
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <NOkia5110_SetPixel+0xb8>)
 8000cb6:	701a      	strb	r2, [r3, #0]

//	if(Bi == 8)
//		Bi = Bi -1;


	if(set){
 8000cb8:	797b      	ldrb	r3, [r7, #5]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d014      	beq.n	8000ce8 <NOkia5110_SetPixel+0x7c>
		framebuffer[By] |= (1 << Bi);
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <NOkia5110_SetPixel+0xb4>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <NOkia5110_SetPixel+0xbc>)
 8000cc6:	5c9b      	ldrb	r3, [r3, r2]
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <NOkia5110_SetPixel+0xb8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	408b      	lsls	r3, r1
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b259      	sxtb	r1, r3
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <NOkia5110_SetPixel+0xb4>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	b2c9      	uxtb	r1, r1
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <NOkia5110_SetPixel+0xbc>)
 8000ce4:	5499      	strb	r1, [r3, r2]
 8000ce6:	e017      	b.n	8000d18 <NOkia5110_SetPixel+0xac>
	}
	else{
		framebuffer[By] &= ~(1 << Bi);
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <NOkia5110_SetPixel+0xb4>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <NOkia5110_SetPixel+0xbc>)
 8000cf0:	5c9b      	ldrb	r3, [r3, r2]
 8000cf2:	b25a      	sxtb	r2, r3
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <NOkia5110_SetPixel+0xb8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	4013      	ands	r3, r2
 8000d06:	b259      	sxtb	r1, r3
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <NOkia5110_SetPixel+0xb4>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	b2c9      	uxtb	r1, r1
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <NOkia5110_SetPixel+0xbc>)
 8000d12:	5499      	strb	r1, [r3, r2]
 8000d14:	e000      	b.n	8000d18 <NOkia5110_SetPixel+0xac>
		return;
 8000d16:	bf00      	nop
	}

}
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	20000222 	.word	0x20000222
 8000d24:	20000220 	.word	0x20000220
 8000d28:	20000028 	.word	0x20000028
 8000d2c:	00000000 	.word	0x00000000

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d34:	b08a      	sub	sp, #40	@ 0x28
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d38:	f000 fb2a 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3c:	f000 f94e 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d40:	f000 f9e2 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d44:	f000 f9c2 	bl	80010cc <MX_DMA_Init>
  MX_SPI2_Init();
 8000d48:	f000 f98a 	bl	8001060 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  Nokia_5110_Init();
 8000d4c:	f7ff fe9e 	bl	8000a8c <Nokia_5110_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t j = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  uint8_t k = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	  for( k=0, j=0; (k < 84 || j < 48);k++,j++){
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d68:	e030      	b.n	8000dcc <main+0x9c>
		  NOkia5110_SetPixel(0, j, 1);
 8000d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4619      	mov	r1, r3
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff ff7a 	bl	8000c6c <NOkia5110_SetPixel>
		  NOkia5110_SetPixel(k, 0, 1);
 8000d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff73 	bl	8000c6c <NOkia5110_SetPixel>
		  NOkia5110_SetPixel(83, (47-j), 1);
 8000d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d8a:	f1c3 032f 	rsb	r3, r3, #47	@ 0x2f
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	2053      	movs	r0, #83	@ 0x53
 8000d96:	f7ff ff69 	bl	8000c6c <NOkia5110_SetPixel>
		  NOkia5110_SetPixel((83 -k) , 47, 1);
 8000d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d9e:	f1c3 0353 	rsb	r3, r3, #83	@ 0x53
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2201      	movs	r2, #1
 8000da6:	212f      	movs	r1, #47	@ 0x2f
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5f 	bl	8000c6c <NOkia5110_SetPixel>
		  HAL_Delay(50);
 8000dae:	2032      	movs	r0, #50	@ 0x32
 8000db0:	f000 fb50 	bl	8001454 <HAL_Delay>
		  Nokia_5110_Update();
 8000db4:	f7ff ff16 	bl	8000be4 <Nokia_5110_Update>
	  for( k=0, j=0; (k < 84 || j < 48);k++,j++){
 8000db8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dd0:	2b53      	cmp	r3, #83	@ 0x53
 8000dd2:	d9ca      	bls.n	8000d6a <main+0x3a>
 8000dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dda:	d9c6      	bls.n	8000d6a <main+0x3a>
		  }

	  // Orta nokta (x,y)
	  int x = 42;
 8000ddc:	232a      	movs	r3, #42	@ 0x2a
 8000dde:	613b      	str	r3, [r7, #16]
	  int y = 24;
 8000de0:	2318      	movs	r3, #24
 8000de2:	60fb      	str	r3, [r7, #12]

	  // Çemberin yarıçapı
	  int r = 15;
 8000de4:	230f      	movs	r3, #15
 8000de6:	60bb      	str	r3, [r7, #8]

	  // Çemberin çevresini tarayarak pikselleri belirleme
	  for (int p = 0; p < 360; p++) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	e077      	b.n	8000ede <main+0x1ae>

		  HAL_Delay(50);
 8000dee:	2032      	movs	r0, #50	@ 0x32
 8000df0:	f000 fb30 	bl	8001454 <HAL_Delay>
		  uint8_t x1 = x + r * cos(p * 3.14159 / 180);
 8000df4:	6938      	ldr	r0, [r7, #16]
 8000df6:	f7ff fafd 	bl	80003f4 <__aeabi_i2d>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	460d      	mov	r5, r1
 8000dfe:	68b8      	ldr	r0, [r7, #8]
 8000e00:	f7ff faf8 	bl	80003f4 <__aeabi_i2d>
 8000e04:	4680      	mov	r8, r0
 8000e06:	4689      	mov	r9, r1
 8000e08:	6a38      	ldr	r0, [r7, #32]
 8000e0a:	f7ff faf3 	bl	80003f4 <__aeabi_i2d>
 8000e0e:	a370      	add	r3, pc, #448	@ (adr r3, 8000fd0 <main+0x2a0>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f7ff fb58 	bl	80004c8 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b6c      	ldr	r3, [pc, #432]	@ (8000fd8 <main+0x2a8>)
 8000e26:	f7ff fc79 	bl	800071c <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	f001 fe4d 	bl	8002ad0 <cos>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	f7ff fb43 	bl	80004c8 <__aeabi_dmul>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4620      	mov	r0, r4
 8000e48:	4629      	mov	r1, r5
 8000e4a:	f7ff f987 	bl	800015c <__adddf3>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff fdf9 	bl	8000a4c <__aeabi_d2uiz>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
		  uint8_t y1 = y + r * sin(p * 3.14159 / 180);
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff fac8 	bl	80003f4 <__aeabi_i2d>
 8000e64:	4604      	mov	r4, r0
 8000e66:	460d      	mov	r5, r1
 8000e68:	68b8      	ldr	r0, [r7, #8]
 8000e6a:	f7ff fac3 	bl	80003f4 <__aeabi_i2d>
 8000e6e:	4680      	mov	r8, r0
 8000e70:	4689      	mov	r9, r1
 8000e72:	6a38      	ldr	r0, [r7, #32]
 8000e74:	f7ff fabe 	bl	80003f4 <__aeabi_i2d>
 8000e78:	a355      	add	r3, pc, #340	@ (adr r3, 8000fd0 <main+0x2a0>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fb23 	bl	80004c8 <__aeabi_dmul>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	4b52      	ldr	r3, [pc, #328]	@ (8000fd8 <main+0x2a8>)
 8000e90:	f7ff fc44 	bl	800071c <__aeabi_ddiv>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f001 fe5e 	bl	8002b5c <sin>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	f7ff fb0e 	bl	80004c8 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	f7ff f952 	bl	800015c <__adddf3>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fdc4 	bl	8000a4c <__aeabi_d2uiz>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71bb      	strb	r3, [r7, #6]
		  NOkia5110_SetPixel(x1, y1, 1);
 8000ec8:	79b9      	ldrb	r1, [r7, #6]
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fecc 	bl	8000c6c <NOkia5110_SetPixel>
		  Nokia_5110_Update();
 8000ed4:	f7ff fe86 	bl	8000be4 <Nokia_5110_Update>
	  for (int p = 0; p < 360; p++) {
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	3301      	adds	r3, #1
 8000edc:	623b      	str	r3, [r7, #32]
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000ee4:	db83      	blt.n	8000dee <main+0xbe>
	  }
	  // Gözler
	  for (int i = -1; i <= 1; i++) {
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	e04d      	b.n	8000f8a <main+0x25a>
	    for (int j = -1; j <= 1; j++) {
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	e043      	b.n	8000f7e <main+0x24e>
	      NOkia5110_SetPixel(x - r/2 + i, y - r/4 + j, 1);
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	0fda      	lsrs	r2, r3, #31
 8000efa:	4413      	add	r3, r2
 8000efc:	105b      	asrs	r3, r3, #1
 8000efe:	425b      	negs	r3, r3
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	b2d8      	uxtb	r0, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da00      	bge.n	8000f1a <main+0x1ea>
 8000f18:	3303      	adds	r3, #3
 8000f1a:	109b      	asrs	r3, r3, #2
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4413      	add	r3, r2
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fe9a 	bl	8000c6c <NOkia5110_SetPixel>
	      NOkia5110_SetPixel(x + r/2 + i, y - r/4 + j, 1);
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	0fda      	lsrs	r2, r3, #31
 8000f3c:	4413      	add	r3, r2
 8000f3e:	105b      	asrs	r3, r3, #1
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4413      	add	r3, r2
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2d8      	uxtb	r0, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da00      	bge.n	8000f5a <main+0x22a>
 8000f58:	3303      	adds	r3, #3
 8000f5a:	109b      	asrs	r3, r3, #2
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2201      	movs	r2, #1
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fe7a 	bl	8000c6c <NOkia5110_SetPixel>
	    for (int j = -1; j <= 1; j++) {
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	ddb8      	ble.n	8000ef6 <main+0x1c6>
	  for (int i = -1; i <= 1; i++) {
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	3301      	adds	r3, #1
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	ddae      	ble.n	8000eee <main+0x1be>
	    }
	  }

	  // Ağız
	  for (int i = 0; i <= 3; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e016      	b.n	8000fc4 <main+0x294>
	    NOkia5110_SetPixel(x + i, y + r/4, 1);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2d8      	uxtb	r0, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	da00      	bge.n	8000faa <main+0x27a>
 8000fa8:	3303      	adds	r3, #3
 8000faa:	109b      	asrs	r3, r3, #2
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fe57 	bl	8000c6c <NOkia5110_SetPixel>
	  for (int i = 0; i <= 3; i++) {
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	dde5      	ble.n	8000f96 <main+0x266>
  {
 8000fca:	e6c1      	b.n	8000d50 <main+0x20>
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	f01b866e 	.word	0xf01b866e
 8000fd4:	400921f9 	.word	0x400921f9
 8000fd8:	40668000 	.word	0x40668000

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b090      	sub	sp, #64	@ 0x40
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2228      	movs	r2, #40	@ 0x28
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fd44 	bl	8002a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001006:	2310      	movs	r3, #16
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800100e:	2300      	movs	r3, #0
 8001010:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001012:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fed5 	bl	8001dcc <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001028:	f000 f8ae 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2102      	movs	r1, #2
 8001046:	4618      	mov	r0, r3
 8001048:	f001 f942 	bl	80022d0 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001052:	f000 f899 	bl	8001188 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3740      	adds	r7, #64	@ 0x40
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <MX_SPI2_Init+0x64>)
 8001066:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <MX_SPI2_Init+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <MX_SPI2_Init+0x64>)
 800106c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001070:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_SPI2_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_SPI2_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_SPI2_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_SPI2_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_SPI2_Init+0x64>)
 800108c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001090:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_SPI2_Init+0x64>)
 8001094:	2208      	movs	r2, #8
 8001096:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <MX_SPI2_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_SPI2_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <MX_SPI2_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_SPI2_Init+0x64>)
 80010ac:	220a      	movs	r2, #10
 80010ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <MX_SPI2_Init+0x64>)
 80010b2:	f001 fa69 	bl	8002588 <HAL_SPI_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010bc:	f000 f864 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000224 	.word	0x20000224
 80010c8:	40003800 	.word	0x40003800

080010cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_DMA_Init+0x38>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <MX_DMA_Init+0x38>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_DMA_Init+0x38>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 faab 	bl	800164a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010f4:	200f      	movs	r0, #15
 80010f6:	f000 fac4 	bl	8001682 <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_GPIO_Init+0x78>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <MX_GPIO_Init+0x78>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_GPIO_Init+0x78>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_GPIO_Init+0x78>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <MX_GPIO_Init+0x78>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_GPIO_Init+0x78>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DC_Pin|CE_Pin|RST_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
 8001152:	480c      	ldr	r0, [pc, #48]	@ (8001184 <MX_GPIO_Init+0x7c>)
 8001154:	f000 fe22 	bl	8001d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin DC_Pin CE_Pin RST_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DC_Pin|CE_Pin|RST_Pin;
 8001158:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 800115c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2302      	movs	r3, #2
 8001168:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_GPIO_Init+0x7c>)
 8001172:	f000 fc8f 	bl	8001a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	40010800 	.word	0x40010800

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_MspInit+0x5c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <HAL_MspInit+0x5c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_MspInit+0x5c>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <HAL_MspInit+0x5c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <HAL_MspInit+0x5c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <HAL_MspInit+0x5c>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_MspInit+0x60>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_MspInit+0x60>)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000

080011f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a29      	ldr	r2, [pc, #164]	@ (80012b8 <HAL_SPI_MspInit+0xc0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d14a      	bne.n	80012ae <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001218:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HAL_SPI_MspInit+0xc4>)
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	4a27      	ldr	r2, [pc, #156]	@ (80012bc <HAL_SPI_MspInit+0xc4>)
 800121e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001222:	61d3      	str	r3, [r2, #28]
 8001224:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <HAL_SPI_MspInit+0xc4>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <HAL_SPI_MspInit+0xc4>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a21      	ldr	r2, [pc, #132]	@ (80012bc <HAL_SPI_MspInit+0xc4>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <HAL_SPI_MspInit+0xc4>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001248:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800124c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	4818      	ldr	r0, [pc, #96]	@ (80012c0 <HAL_SPI_MspInit+0xc8>)
 800125e:	f000 fc19 	bl	8001a94 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 8001264:	4a18      	ldr	r2, [pc, #96]	@ (80012c8 <HAL_SPI_MspInit+0xd0>)
 8001266:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 800126a:	2210      	movs	r2, #16
 800126c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 8001276:	2280      	movs	r2, #128	@ 0x80
 8001278:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001292:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 8001294:	f000 fa10 	bl	80016b8 <HAL_DMA_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 800129e:	f7ff ff73 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 80012a6:	649a      	str	r2, [r3, #72]	@ 0x48
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_SPI_MspInit+0xcc>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40003800 	.word	0x40003800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	2000027c 	.word	0x2000027c
 80012c8:	40020058 	.word	0x40020058

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 f87e 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <DMA1_Channel5_IRQHandler+0x10>)
 800132a:	f000 fa7f 	bl	800182c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000027c 	.word	0x2000027c

08001338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff fff8 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480b      	ldr	r0, [pc, #44]	@ (8001378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800134a:	490c      	ldr	r1, [pc, #48]	@ (800137c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800134c:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001360:	4c09      	ldr	r4, [pc, #36]	@ (8001388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f001 fb8b 	bl	8002a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001372:	f7ff fcdd 	bl	8000d30 <main>
  bx lr
 8001376:	4770      	bx	lr
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001380:	08003d28 	.word	0x08003d28
  ldr r2, =_sbss
 8001384:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001388:	200002c4 	.word	0x200002c4

0800138c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_2_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_Init+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_Init+0x28>)
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f947 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a6:	200f      	movs	r0, #15
 80013a8:	f000 f808 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ac:	f7ff fef2 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f95f 	bl	800169e <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f927 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	@ (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	20000008 	.word	0x20000008
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a03      	ldr	r2, [pc, #12]	@ (800143c <HAL_IncTick+0x20>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	20000008 	.word	0x20000008
 800143c:	200002c0 	.word	0x200002c0

08001440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200002c0 	.word	0x200002c0

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fff0 	bl	8001440 <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffe0 	bl	8001440 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4906      	ldr	r1, [pc, #24]	@ (8001534 <__NVIC_EnableIRQ+0x34>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	@ (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	@ (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	@ 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff90 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff2d 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff42 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff90 	bl	800158c <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5f 	bl	8001538 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff35 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e043      	b.n	8001756 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <HAL_DMA_Init+0xa8>)
 80016d6:	4413      	add	r3, r2
 80016d8:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <HAL_DMA_Init+0xac>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	009a      	lsls	r2, r3, #2
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <HAL_DMA_Init+0xb0>)
 80016ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001702:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001706:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	bffdfff8 	.word	0xbffdfff8
 8001764:	cccccccd 	.word	0xcccccccd
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_DMA_Start_IT+0x20>
 8001788:	2302      	movs	r3, #2
 800178a:	e04b      	b.n	8001824 <HAL_DMA_Start_IT+0xb8>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d13a      	bne.n	8001816 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2202      	movs	r2, #2
 80017a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f937 	bl	8001a38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 020e 	orr.w	r2, r2, #14
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e00f      	b.n	8001804 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 020a 	orr.w	r2, r2, #10
 8001802:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e005      	b.n	8001822 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800181e:	2302      	movs	r3, #2
 8001820:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001822:	7dfb      	ldrb	r3, [r7, #23]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	2204      	movs	r2, #4
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d04f      	beq.n	80018f4 <HAL_DMA_IRQHandler+0xc8>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d04a      	beq.n	80018f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0204 	bic.w	r2, r2, #4
 800187a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a66      	ldr	r2, [pc, #408]	@ (8001a1c <HAL_DMA_IRQHandler+0x1f0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d029      	beq.n	80018da <HAL_DMA_IRQHandler+0xae>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a65      	ldr	r2, [pc, #404]	@ (8001a20 <HAL_DMA_IRQHandler+0x1f4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d022      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xaa>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a63      	ldr	r2, [pc, #396]	@ (8001a24 <HAL_DMA_IRQHandler+0x1f8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01a      	beq.n	80018d0 <HAL_DMA_IRQHandler+0xa4>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a62      	ldr	r2, [pc, #392]	@ (8001a28 <HAL_DMA_IRQHandler+0x1fc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d012      	beq.n	80018ca <HAL_DMA_IRQHandler+0x9e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a60      	ldr	r2, [pc, #384]	@ (8001a2c <HAL_DMA_IRQHandler+0x200>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00a      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x98>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a30 <HAL_DMA_IRQHandler+0x204>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <HAL_DMA_IRQHandler+0x92>
 80018b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018bc:	e00e      	b.n	80018dc <HAL_DMA_IRQHandler+0xb0>
 80018be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018c2:	e00b      	b.n	80018dc <HAL_DMA_IRQHandler+0xb0>
 80018c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018c8:	e008      	b.n	80018dc <HAL_DMA_IRQHandler+0xb0>
 80018ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018ce:	e005      	b.n	80018dc <HAL_DMA_IRQHandler+0xb0>
 80018d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d4:	e002      	b.n	80018dc <HAL_DMA_IRQHandler+0xb0>
 80018d6:	2340      	movs	r3, #64	@ 0x40
 80018d8:	e000      	b.n	80018dc <HAL_DMA_IRQHandler+0xb0>
 80018da:	2304      	movs	r3, #4
 80018dc:	4a55      	ldr	r2, [pc, #340]	@ (8001a34 <HAL_DMA_IRQHandler+0x208>)
 80018de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8094 	beq.w	8001a12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018f2:	e08e      	b.n	8001a12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	2202      	movs	r2, #2
 80018fa:	409a      	lsls	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d056      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x186>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d051      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 020a 	bic.w	r2, r2, #10
 800192a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a38      	ldr	r2, [pc, #224]	@ (8001a1c <HAL_DMA_IRQHandler+0x1f0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d029      	beq.n	8001992 <HAL_DMA_IRQHandler+0x166>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a37      	ldr	r2, [pc, #220]	@ (8001a20 <HAL_DMA_IRQHandler+0x1f4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d022      	beq.n	800198e <HAL_DMA_IRQHandler+0x162>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a35      	ldr	r2, [pc, #212]	@ (8001a24 <HAL_DMA_IRQHandler+0x1f8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01a      	beq.n	8001988 <HAL_DMA_IRQHandler+0x15c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a34      	ldr	r2, [pc, #208]	@ (8001a28 <HAL_DMA_IRQHandler+0x1fc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d012      	beq.n	8001982 <HAL_DMA_IRQHandler+0x156>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a32      	ldr	r2, [pc, #200]	@ (8001a2c <HAL_DMA_IRQHandler+0x200>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00a      	beq.n	800197c <HAL_DMA_IRQHandler+0x150>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a31      	ldr	r2, [pc, #196]	@ (8001a30 <HAL_DMA_IRQHandler+0x204>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d102      	bne.n	8001976 <HAL_DMA_IRQHandler+0x14a>
 8001970:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001974:	e00e      	b.n	8001994 <HAL_DMA_IRQHandler+0x168>
 8001976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800197a:	e00b      	b.n	8001994 <HAL_DMA_IRQHandler+0x168>
 800197c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001980:	e008      	b.n	8001994 <HAL_DMA_IRQHandler+0x168>
 8001982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001986:	e005      	b.n	8001994 <HAL_DMA_IRQHandler+0x168>
 8001988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800198c:	e002      	b.n	8001994 <HAL_DMA_IRQHandler+0x168>
 800198e:	2320      	movs	r3, #32
 8001990:	e000      	b.n	8001994 <HAL_DMA_IRQHandler+0x168>
 8001992:	2302      	movs	r3, #2
 8001994:	4a27      	ldr	r2, [pc, #156]	@ (8001a34 <HAL_DMA_IRQHandler+0x208>)
 8001996:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d034      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019b0:	e02f      	b.n	8001a12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	2208      	movs	r2, #8
 80019b8:	409a      	lsls	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d028      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x1e8>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d023      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 020e 	bic.w	r2, r2, #14
 80019da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
    }
  }
  return;
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
}
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40020008 	.word	0x40020008
 8001a20:	4002001c 	.word	0x4002001c
 8001a24:	40020030 	.word	0x40020030
 8001a28:	40020044 	.word	0x40020044
 8001a2c:	40020058 	.word	0x40020058
 8001a30:	4002006c 	.word	0x4002006c
 8001a34:	40020000 	.word	0x40020000

08001a38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d108      	bne.n	8001a78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a76:	e007      	b.n	8001a88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b08b      	sub	sp, #44	@ 0x2c
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa6:	e169      	b.n	8001d7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8158 	bne.w	8001d76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a9a      	ldr	r2, [pc, #616]	@ (8001d34 <HAL_GPIO_Init+0x2a0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d05e      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001ad0:	4a98      	ldr	r2, [pc, #608]	@ (8001d34 <HAL_GPIO_Init+0x2a0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d875      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001ad6:	4a98      	ldr	r2, [pc, #608]	@ (8001d38 <HAL_GPIO_Init+0x2a4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d058      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001adc:	4a96      	ldr	r2, [pc, #600]	@ (8001d38 <HAL_GPIO_Init+0x2a4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d86f      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001ae2:	4a96      	ldr	r2, [pc, #600]	@ (8001d3c <HAL_GPIO_Init+0x2a8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d052      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001ae8:	4a94      	ldr	r2, [pc, #592]	@ (8001d3c <HAL_GPIO_Init+0x2a8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d869      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001aee:	4a94      	ldr	r2, [pc, #592]	@ (8001d40 <HAL_GPIO_Init+0x2ac>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d04c      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001af4:	4a92      	ldr	r2, [pc, #584]	@ (8001d40 <HAL_GPIO_Init+0x2ac>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d863      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001afa:	4a92      	ldr	r2, [pc, #584]	@ (8001d44 <HAL_GPIO_Init+0x2b0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d046      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001b00:	4a90      	ldr	r2, [pc, #576]	@ (8001d44 <HAL_GPIO_Init+0x2b0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d85d      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d82a      	bhi.n	8001b60 <HAL_GPIO_Init+0xcc>
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d859      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b14 <HAL_GPIO_Init+0x80>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b8f 	.word	0x08001b8f
 8001b18:	08001b69 	.word	0x08001b69
 8001b1c:	08001b7b 	.word	0x08001b7b
 8001b20:	08001bbd 	.word	0x08001bbd
 8001b24:	08001bc3 	.word	0x08001bc3
 8001b28:	08001bc3 	.word	0x08001bc3
 8001b2c:	08001bc3 	.word	0x08001bc3
 8001b30:	08001bc3 	.word	0x08001bc3
 8001b34:	08001bc3 	.word	0x08001bc3
 8001b38:	08001bc3 	.word	0x08001bc3
 8001b3c:	08001bc3 	.word	0x08001bc3
 8001b40:	08001bc3 	.word	0x08001bc3
 8001b44:	08001bc3 	.word	0x08001bc3
 8001b48:	08001bc3 	.word	0x08001bc3
 8001b4c:	08001bc3 	.word	0x08001bc3
 8001b50:	08001bc3 	.word	0x08001bc3
 8001b54:	08001bc3 	.word	0x08001bc3
 8001b58:	08001b71 	.word	0x08001b71
 8001b5c:	08001b85 	.word	0x08001b85
 8001b60:	4a79      	ldr	r2, [pc, #484]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b66:	e02c      	b.n	8001bc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e029      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	3304      	adds	r3, #4
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e024      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e01f      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	330c      	adds	r3, #12
 8001b8a:	623b      	str	r3, [r7, #32]
          break;
 8001b8c:	e01a      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b96:	2304      	movs	r3, #4
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e013      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	611a      	str	r2, [r3, #16]
          break;
 8001bae:	e009      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	615a      	str	r2, [r3, #20]
          break;
 8001bba:	e003      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          break;
 8001bc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2bff      	cmp	r3, #255	@ 0xff
 8001bc8:	d801      	bhi.n	8001bce <HAL_GPIO_Init+0x13a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	e001      	b.n	8001bd2 <HAL_GPIO_Init+0x13e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2bff      	cmp	r3, #255	@ 0xff
 8001bd8:	d802      	bhi.n	8001be0 <HAL_GPIO_Init+0x14c>
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	e002      	b.n	8001be6 <HAL_GPIO_Init+0x152>
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	3b08      	subs	r3, #8
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	210f      	movs	r1, #15
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	6a39      	ldr	r1, [r7, #32]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	431a      	orrs	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80b1 	beq.w	8001d76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c14:	4b4d      	ldr	r3, [pc, #308]	@ (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a4c      	ldr	r2, [pc, #304]	@ (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b4a      	ldr	r3, [pc, #296]	@ (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c2c:	4a48      	ldr	r2, [pc, #288]	@ (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a40      	ldr	r2, [pc, #256]	@ (8001d54 <HAL_GPIO_Init+0x2c0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d013      	beq.n	8001c80 <HAL_GPIO_Init+0x1ec>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d58 <HAL_GPIO_Init+0x2c4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00d      	beq.n	8001c7c <HAL_GPIO_Init+0x1e8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a3e      	ldr	r2, [pc, #248]	@ (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <HAL_GPIO_Init+0x1e4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d60 <HAL_GPIO_Init+0x2cc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_GPIO_Init+0x1e0>
 8001c70:	2303      	movs	r3, #3
 8001c72:	e006      	b.n	8001c82 <HAL_GPIO_Init+0x1ee>
 8001c74:	2304      	movs	r3, #4
 8001c76:	e004      	b.n	8001c82 <HAL_GPIO_Init+0x1ee>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x1ee>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_Init+0x1ee>
 8001c80:	2300      	movs	r3, #0
 8001c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c92:	492f      	ldr	r1, [pc, #188]	@ (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cac:	4b2d      	ldr	r3, [pc, #180]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	492c      	ldr	r1, [pc, #176]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cba:	4b2a      	ldr	r3, [pc, #168]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4928      	ldr	r1, [pc, #160]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd4:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	4922      	ldr	r1, [pc, #136]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ce2:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	491e      	ldr	r1, [pc, #120]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4918      	ldr	r1, [pc, #96]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4914      	ldr	r1, [pc, #80]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d021      	beq.n	8001d68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d24:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	490e      	ldr	r1, [pc, #56]	@ (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e021      	b.n	8001d76 <HAL_GPIO_Init+0x2e2>
 8001d32:	bf00      	nop
 8001d34:	10320000 	.word	0x10320000
 8001d38:	10310000 	.word	0x10310000
 8001d3c:	10220000 	.word	0x10220000
 8001d40:	10210000 	.word	0x10210000
 8001d44:	10120000 	.word	0x10120000
 8001d48:	10110000 	.word	0x10110000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40010c00 	.word	0x40010c00
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40011400 	.word	0x40011400
 8001d64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4909      	ldr	r1, [pc, #36]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	3301      	adds	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f47f ae8e 	bne.w	8001aa8 <HAL_GPIO_Init+0x14>
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	372c      	adds	r7, #44	@ 0x2c
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40010400 	.word	0x40010400

08001d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
 8001da8:	4613      	mov	r3, r2
 8001daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dac:	787b      	ldrb	r3, [r7, #1]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db8:	e003      	b.n	8001dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	041a      	lsls	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e272      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8087 	beq.w	8001efa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dec:	4b92      	ldr	r3, [pc, #584]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d00c      	beq.n	8001e12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df8:	4b8f      	ldr	r3, [pc, #572]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d112      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5e>
 8001e04:	4b8c      	ldr	r3, [pc, #560]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e10:	d10b      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e12:	4b89      	ldr	r3, [pc, #548]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d06c      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x12c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d168      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e24c      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x76>
 8001e34:	4b80      	ldr	r3, [pc, #512]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a7f      	ldr	r2, [pc, #508]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e02e      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7a      	ldr	r2, [pc, #488]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b78      	ldr	r3, [pc, #480]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a77      	ldr	r2, [pc, #476]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e01d      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0xbc>
 8001e6e:	4b72      	ldr	r3, [pc, #456]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a71      	ldr	r2, [pc, #452]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e88:	4b6b      	ldr	r3, [pc, #428]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b68      	ldr	r3, [pc, #416]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a67      	ldr	r2, [pc, #412]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff faca 	bl	8001440 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fac6 	bl	8001440 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	@ 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e200      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xe4>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fab6 	bl	8001440 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fab2 	bl	8001440 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	@ 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1ec      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x10c>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d063      	beq.n	8001fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f06:	4b4c      	ldr	r3, [pc, #304]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f12:	4b49      	ldr	r3, [pc, #292]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x18c>
 8001f1e:	4b46      	ldr	r3, [pc, #280]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x176>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1c0      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b3d      	ldr	r3, [pc, #244]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4939      	ldr	r1, [pc, #228]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b36      	ldr	r3, [pc, #216]	@ (800203c <HAL_RCC_OscConfig+0x270>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fa6b 	bl	8001440 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fa67 	bl	8001440 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1a1      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b2d      	ldr	r3, [pc, #180]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4927      	ldr	r1, [pc, #156]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <HAL_RCC_OscConfig+0x270>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fa4a 	bl	8001440 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fa46 	bl	8001440 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e180      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03a      	beq.n	8002050 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d019      	beq.n	8002016 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7ff fa2a 	bl	8001440 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7ff fa26 	bl	8001440 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e160      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_RCC_OscConfig+0x26c>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800200e:	2001      	movs	r0, #1
 8002010:	f000 fa9c 	bl	800254c <RCC_Delay>
 8002014:	e01c      	b.n	8002050 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_RCC_OscConfig+0x274>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7ff fa10 	bl	8001440 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002022:	e00f      	b.n	8002044 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fa0c 	bl	8001440 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d908      	bls.n	8002044 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e146      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	42420000 	.word	0x42420000
 8002040:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	4b92      	ldr	r3, [pc, #584]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e9      	bne.n	8002024 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a6 	beq.w	80021aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b8b      	ldr	r3, [pc, #556]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b88      	ldr	r3, [pc, #544]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a87      	ldr	r2, [pc, #540]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b85      	ldr	r3, [pc, #532]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b82      	ldr	r3, [pc, #520]	@ (8002294 <HAL_RCC_OscConfig+0x4c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002096:	4b7f      	ldr	r3, [pc, #508]	@ (8002294 <HAL_RCC_OscConfig+0x4c8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7e      	ldr	r2, [pc, #504]	@ (8002294 <HAL_RCC_OscConfig+0x4c8>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7ff f9cd 	bl	8001440 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7ff f9c9 	bl	8001440 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	@ 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e103      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b75      	ldr	r3, [pc, #468]	@ (8002294 <HAL_RCC_OscConfig+0x4c8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x312>
 80020d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e02d      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x334>
 80020e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a69      	ldr	r2, [pc, #420]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6213      	str	r3, [r2, #32]
 80020f2:	4b67      	ldr	r3, [pc, #412]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a66      	ldr	r2, [pc, #408]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	f023 0304 	bic.w	r3, r3, #4
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	e01c      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x356>
 8002108:	4b61      	ldr	r3, [pc, #388]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4a60      	ldr	r2, [pc, #384]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	4b5e      	ldr	r3, [pc, #376]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a5d      	ldr	r2, [pc, #372]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 8002122:	4b5b      	ldr	r3, [pc, #364]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a5a      	ldr	r2, [pc, #360]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b58      	ldr	r3, [pc, #352]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a57      	ldr	r2, [pc, #348]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7ff f97d 	bl	8001440 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7ff f979 	bl	8001440 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0b1      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4b4b      	ldr	r3, [pc, #300]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <HAL_RCC_OscConfig+0x37e>
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff f967 	bl	8001440 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff f963 	bl	8001440 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e09b      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	4b40      	ldr	r3, [pc, #256]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ee      	bne.n	8002176 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b3c      	ldr	r3, [pc, #240]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8087 	beq.w	80022c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b4:	4b36      	ldr	r3, [pc, #216]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d061      	beq.n	8002284 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d146      	bne.n	8002256 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b33      	ldr	r3, [pc, #204]	@ (8002298 <HAL_RCC_OscConfig+0x4cc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff f937 	bl	8001440 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff f933 	bl	8001440 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e06d      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e8:	4b29      	ldr	r3, [pc, #164]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021fc:	d108      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021fe:	4b24      	ldr	r3, [pc, #144]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4921      	ldr	r1, [pc, #132]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002210:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a19      	ldr	r1, [r3, #32]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	430b      	orrs	r3, r1
 8002222:	491b      	ldr	r1, [pc, #108]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_RCC_OscConfig+0x4cc>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff f907 	bl	8001440 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff f903 	bl	8001440 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e03d      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x46a>
 8002254:	e035      	b.n	80022c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_RCC_OscConfig+0x4cc>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff f8f0 	bl	8001440 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f8ec 	bl	8001440 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e026      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x498>
 8002282:	e01e      	b.n	80022c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d107      	bne.n	800229c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e019      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
 8002298:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800229c:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <HAL_RCC_OscConfig+0x500>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000

080022d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0d0      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b67      	ldr	r3, [pc, #412]	@ (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4965      	ldr	r1, [pc, #404]	@ (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	@ (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a58      	ldr	r2, [pc, #352]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002336:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800234e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d040      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d115      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e073      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b3d      	ldr	r3, [pc, #244]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06b      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ae:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4936      	ldr	r1, [pc, #216]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c0:	f7ff f83e 	bl	8001440 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	e00a      	b.n	80023de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c8:	f7ff f83a 	bl	8001440 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e053      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 020c 	and.w	r2, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1eb      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d210      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4922      	ldr	r1, [pc, #136]	@ (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244a:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245e:	f000 f821 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002462:	4602      	mov	r2, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	490a      	ldr	r1, [pc, #40]	@ (8002498 <HAL_RCC_ClockConfig+0x1c8>)
 8002470:	5ccb      	ldrb	r3, [r1, r3]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1cc>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_ClockConfig+0x1d0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ff9c 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000
 8002494:	40021000 	.word	0x40021000
 8002498:	08003b20 	.word	0x08003b20
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024be:	4b1e      	ldr	r3, [pc, #120]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x30>
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x36>
 80024d2:	e027      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d4:	4b19      	ldr	r3, [pc, #100]	@ (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 80024d6:	613b      	str	r3, [r7, #16]
      break;
 80024d8:	e027      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	0c9b      	lsrs	r3, r3, #18
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	4a17      	ldr	r2, [pc, #92]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e4:	5cd3      	ldrb	r3, [r2, r3]
 80024e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024f2:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0c5b      	lsrs	r3, r3, #17
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a0d      	ldr	r2, [pc, #52]	@ (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 8002506:	fb03 f202 	mul.w	r2, r3, r2
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e004      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a0c      	ldr	r2, [pc, #48]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	613b      	str	r3, [r7, #16]
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 8002526:	613b      	str	r3, [r7, #16]
      break;
 8002528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252a:	693b      	ldr	r3, [r7, #16]
}
 800252c:	4618      	mov	r0, r3
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	007a1200 	.word	0x007a1200
 8002540:	08003b30 	.word	0x08003b30
 8002544:	08003b40 	.word	0x08003b40
 8002548:	003d0900 	.word	0x003d0900

0800254c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002554:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <RCC_Delay+0x34>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <RCC_Delay+0x38>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a5b      	lsrs	r3, r3, #9
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002568:	bf00      	nop
  }
  while (Delay --);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e5a      	subs	r2, r3, #1
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <RCC_Delay+0x1c>
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	20000000 	.word	0x20000000
 8002584:	10624dd3 	.word	0x10624dd3

08002588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e076      	b.n	8002688 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025aa:	d009      	beq.n	80025c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
 80025b2:	e005      	b.n	80025c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fe0c 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002644:	ea42 0103 	orr.w	r1, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	0c1a      	lsrs	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f002 0204 	and.w	r2, r2, #4
 8002666:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002676:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_SPI_Transmit_DMA+0x20>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e097      	b.n	80027e0 <HAL_SPI_Transmit_DMA+0x150>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
 80026c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026c8:	e085      	b.n	80027d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_SPI_Transmit_DMA+0x46>
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026da:	e07c      	b.n	80027d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2203      	movs	r2, #3
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002722:	d10f      	bne.n	8002744 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002732:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002742:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	4a27      	ldr	r2, [pc, #156]	@ (80027e8 <HAL_SPI_Transmit_DMA+0x158>)
 800274a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	4a26      	ldr	r2, [pc, #152]	@ (80027ec <HAL_SPI_Transmit_DMA+0x15c>)
 8002752:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	4a25      	ldr	r2, [pc, #148]	@ (80027f0 <HAL_SPI_Transmit_DMA+0x160>)
 800275a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	2200      	movs	r2, #0
 8002762:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	4619      	mov	r1, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800277a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800277c:	f7fe fff6 	bl	800176c <HAL_DMA_Start_IT>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	f043 0210 	orr.w	r2, r3, #16
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002796:	e01e      	b.n	80027d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a2:	2b40      	cmp	r3, #64	@ 0x40
 80027a4:	d007      	beq.n	80027b6 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0202 	orr.w	r2, r2, #2
 80027d4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80027de:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	080028d1 	.word	0x080028d1
 80027ec:	0800282b 	.word	0x0800282b
 80027f0:	080028ed 	.word	0x080028ed

080027f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002838:	f7fe fe02 	bl	8001440 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b20      	cmp	r3, #32
 800284a:	d03b      	beq.n	80028c4 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0220 	bic.w	r2, r2, #32
 800285a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0202 	bic.w	r2, r2, #2
 800286a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	2164      	movs	r1, #100	@ 0x64
 8002870:	6978      	ldr	r0, [r7, #20]
 8002872:	f000 f8e3 	bl	8002a3c <SPI_EndRxTxTransaction>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80028bc:	6978      	ldr	r0, [r7, #20]
 80028be:	f7ff ffab 	bl	8002818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80028c2:	e002      	b.n	80028ca <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80028c4:	6978      	ldr	r0, [r7, #20]
 80028c6:	f7ff ff95 	bl	80027f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff ff91 	bl	8002806 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0203 	bic.w	r2, r2, #3
 8002908:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290e:	f043 0210 	orr.w	r2, r3, #16
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff ff7a 	bl	8002818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800293c:	f7fe fd80 	bl	8001440 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4413      	add	r3, r2
 800294a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800294c:	f7fe fd78 	bl	8001440 <HAL_GetTick>
 8002950:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002952:	4b39      	ldr	r3, [pc, #228]	@ (8002a38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	015b      	lsls	r3, r3, #5
 8002958:	0d1b      	lsrs	r3, r3, #20
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002962:	e054      	b.n	8002a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d050      	beq.n	8002a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800296c:	f7fe fd68 	bl	8001440 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	429a      	cmp	r2, r3
 800297a:	d902      	bls.n	8002982 <SPI_WaitFlagStateUntilTimeout+0x56>
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d13d      	bne.n	80029fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800299a:	d111      	bne.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a4:	d004      	beq.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ae:	d107      	bne.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c8:	d10f      	bne.n	80029ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e017      	b.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4013      	ands	r3, r2
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	bf0c      	ite	eq
 8002a1e:	2301      	moveq	r3, #1
 8002a20:	2300      	movne	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d19b      	bne.n	8002964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000000 	.word	0x20000000

08002a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2180      	movs	r1, #128	@ 0x80
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f7ff ff6a 	bl	800292c <SPI_WaitFlagStateUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e000      	b.n	8002a70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <memset>:
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4402      	add	r2, r0
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	f803 1b01 	strb.w	r1, [r3], #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <__libc_init_array>:
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	4d0c      	ldr	r5, [pc, #48]	@ (8002ac0 <__libc_init_array+0x38>)
 8002a8e:	4c0d      	ldr	r4, [pc, #52]	@ (8002ac4 <__libc_init_array+0x3c>)
 8002a90:	1b64      	subs	r4, r4, r5
 8002a92:	10a4      	asrs	r4, r4, #2
 8002a94:	42a6      	cmp	r6, r4
 8002a96:	d109      	bne.n	8002aac <__libc_init_array+0x24>
 8002a98:	f001 f836 	bl	8003b08 <_init>
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	4d0a      	ldr	r5, [pc, #40]	@ (8002ac8 <__libc_init_array+0x40>)
 8002aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8002acc <__libc_init_array+0x44>)
 8002aa2:	1b64      	subs	r4, r4, r5
 8002aa4:	10a4      	asrs	r4, r4, #2
 8002aa6:	42a6      	cmp	r6, r4
 8002aa8:	d105      	bne.n	8002ab6 <__libc_init_array+0x2e>
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
 8002aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab0:	4798      	blx	r3
 8002ab2:	3601      	adds	r6, #1
 8002ab4:	e7ee      	b.n	8002a94 <__libc_init_array+0xc>
 8002ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aba:	4798      	blx	r3
 8002abc:	3601      	adds	r6, #1
 8002abe:	e7f2      	b.n	8002aa6 <__libc_init_array+0x1e>
 8002ac0:	08003d20 	.word	0x08003d20
 8002ac4:	08003d20 	.word	0x08003d20
 8002ac8:	08003d20 	.word	0x08003d20
 8002acc:	08003d24 	.word	0x08003d24

08002ad0 <cos>:
 8002ad0:	b530      	push	{r4, r5, lr}
 8002ad2:	4d20      	ldr	r5, [pc, #128]	@ (8002b54 <cos+0x84>)
 8002ad4:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8002ad8:	42ac      	cmp	r4, r5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	b087      	sub	sp, #28
 8002ae0:	d806      	bhi.n	8002af0 <cos+0x20>
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	b007      	add	sp, #28
 8002ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002aec:	f000 b87c 	b.w	8002be8 <__kernel_cos>
 8002af0:	4d19      	ldr	r5, [pc, #100]	@ (8002b58 <cos+0x88>)
 8002af2:	42ac      	cmp	r4, r5
 8002af4:	d903      	bls.n	8002afe <cos+0x2e>
 8002af6:	f7fd fb2f 	bl	8000158 <__aeabi_dsub>
 8002afa:	b007      	add	sp, #28
 8002afc:	bd30      	pop	{r4, r5, pc}
 8002afe:	aa02      	add	r2, sp, #8
 8002b00:	f000 f9ea 	bl	8002ed8 <__ieee754_rem_pio2>
 8002b04:	f000 0003 	and.w	r0, r0, #3
 8002b08:	2801      	cmp	r0, #1
 8002b0a:	d009      	beq.n	8002b20 <cos+0x50>
 8002b0c:	2802      	cmp	r0, #2
 8002b0e:	d011      	beq.n	8002b34 <cos+0x64>
 8002b10:	b9b8      	cbnz	r0, 8002b42 <cos+0x72>
 8002b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b1a:	f000 f865 	bl	8002be8 <__kernel_cos>
 8002b1e:	e7ec      	b.n	8002afa <cos+0x2a>
 8002b20:	9000      	str	r0, [sp, #0]
 8002b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b2a:	f000 f91d 	bl	8002d68 <__kernel_sin>
 8002b2e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8002b32:	e7e2      	b.n	8002afa <cos+0x2a>
 8002b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b3c:	f000 f854 	bl	8002be8 <__kernel_cos>
 8002b40:	e7f5      	b.n	8002b2e <cos+0x5e>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b4e:	f000 f90b 	bl	8002d68 <__kernel_sin>
 8002b52:	e7d2      	b.n	8002afa <cos+0x2a>
 8002b54:	3fe921fb 	.word	0x3fe921fb
 8002b58:	7fefffff 	.word	0x7fefffff

08002b5c <sin>:
 8002b5c:	b530      	push	{r4, r5, lr}
 8002b5e:	4d20      	ldr	r5, [pc, #128]	@ (8002be0 <sin+0x84>)
 8002b60:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8002b64:	42ac      	cmp	r4, r5
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	d806      	bhi.n	8002b7c <sin+0x20>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2200      	movs	r2, #0
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	f000 f8f7 	bl	8002d68 <__kernel_sin>
 8002b7a:	e004      	b.n	8002b86 <sin+0x2a>
 8002b7c:	4d19      	ldr	r5, [pc, #100]	@ (8002be4 <sin+0x88>)
 8002b7e:	42ac      	cmp	r4, r5
 8002b80:	d903      	bls.n	8002b8a <sin+0x2e>
 8002b82:	f7fd fae9 	bl	8000158 <__aeabi_dsub>
 8002b86:	b007      	add	sp, #28
 8002b88:	bd30      	pop	{r4, r5, pc}
 8002b8a:	aa02      	add	r2, sp, #8
 8002b8c:	f000 f9a4 	bl	8002ed8 <__ieee754_rem_pio2>
 8002b90:	f000 0003 	and.w	r0, r0, #3
 8002b94:	2801      	cmp	r0, #1
 8002b96:	d009      	beq.n	8002bac <sin+0x50>
 8002b98:	2802      	cmp	r0, #2
 8002b9a:	d00e      	beq.n	8002bba <sin+0x5e>
 8002b9c:	b9c0      	cbnz	r0, 8002bd0 <sin+0x74>
 8002b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002baa:	e7e4      	b.n	8002b76 <sin+0x1a>
 8002bac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bb4:	f000 f818 	bl	8002be8 <__kernel_cos>
 8002bb8:	e7e5      	b.n	8002b86 <sin+0x2a>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bc6:	f000 f8cf 	bl	8002d68 <__kernel_sin>
 8002bca:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8002bce:	e7da      	b.n	8002b86 <sin+0x2a>
 8002bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bd8:	f000 f806 	bl	8002be8 <__kernel_cos>
 8002bdc:	e7f5      	b.n	8002bca <sin+0x6e>
 8002bde:	bf00      	nop
 8002be0:	3fe921fb 	.word	0x3fe921fb
 8002be4:	7fefffff 	.word	0x7fefffff

08002be8 <__kernel_cos>:
 8002be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bec:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8002bf0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	4689      	mov	r9, r1
 8002bf8:	e9cd 2300 	strd	r2, r3, [sp]
 8002bfc:	d204      	bcs.n	8002c08 <__kernel_cos+0x20>
 8002bfe:	f7fd fefd 	bl	80009fc <__aeabi_d2iz>
 8002c02:	2800      	cmp	r0, #0
 8002c04:	f000 8086 	beq.w	8002d14 <__kernel_cos+0x12c>
 8002c08:	4642      	mov	r2, r8
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	4640      	mov	r0, r8
 8002c0e:	4649      	mov	r1, r9
 8002c10:	f7fd fc5a 	bl	80004c8 <__aeabi_dmul>
 8002c14:	2200      	movs	r2, #0
 8002c16:	4b4e      	ldr	r3, [pc, #312]	@ (8002d50 <__kernel_cos+0x168>)
 8002c18:	4604      	mov	r4, r0
 8002c1a:	460d      	mov	r5, r1
 8002c1c:	f7fd fc54 	bl	80004c8 <__aeabi_dmul>
 8002c20:	a33f      	add	r3, pc, #252	@ (adr r3, 8002d20 <__kernel_cos+0x138>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	4682      	mov	sl, r0
 8002c28:	468b      	mov	fp, r1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fd fc4b 	bl	80004c8 <__aeabi_dmul>
 8002c32:	a33d      	add	r3, pc, #244	@ (adr r3, 8002d28 <__kernel_cos+0x140>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fa90 	bl	800015c <__adddf3>
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	462b      	mov	r3, r5
 8002c40:	f7fd fc42 	bl	80004c8 <__aeabi_dmul>
 8002c44:	a33a      	add	r3, pc, #232	@ (adr r3, 8002d30 <__kernel_cos+0x148>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fa85 	bl	8000158 <__aeabi_dsub>
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
 8002c52:	f7fd fc39 	bl	80004c8 <__aeabi_dmul>
 8002c56:	a338      	add	r3, pc, #224	@ (adr r3, 8002d38 <__kernel_cos+0x150>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fa7e 	bl	800015c <__adddf3>
 8002c60:	4622      	mov	r2, r4
 8002c62:	462b      	mov	r3, r5
 8002c64:	f7fd fc30 	bl	80004c8 <__aeabi_dmul>
 8002c68:	a335      	add	r3, pc, #212	@ (adr r3, 8002d40 <__kernel_cos+0x158>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fa73 	bl	8000158 <__aeabi_dsub>
 8002c72:	4622      	mov	r2, r4
 8002c74:	462b      	mov	r3, r5
 8002c76:	f7fd fc27 	bl	80004c8 <__aeabi_dmul>
 8002c7a:	a333      	add	r3, pc, #204	@ (adr r3, 8002d48 <__kernel_cos+0x160>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fa6c 	bl	800015c <__adddf3>
 8002c84:	4622      	mov	r2, r4
 8002c86:	462b      	mov	r3, r5
 8002c88:	f7fd fc1e 	bl	80004c8 <__aeabi_dmul>
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	462b      	mov	r3, r5
 8002c90:	f7fd fc1a 	bl	80004c8 <__aeabi_dmul>
 8002c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c98:	4604      	mov	r4, r0
 8002c9a:	460d      	mov	r5, r1
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	f7fd fc12 	bl	80004c8 <__aeabi_dmul>
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4629      	mov	r1, r5
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7fd fa54 	bl	8000158 <__aeabi_dsub>
 8002cb0:	4b28      	ldr	r3, [pc, #160]	@ (8002d54 <__kernel_cos+0x16c>)
 8002cb2:	4680      	mov	r8, r0
 8002cb4:	429e      	cmp	r6, r3
 8002cb6:	4689      	mov	r9, r1
 8002cb8:	d80e      	bhi.n	8002cd8 <__kernel_cos+0xf0>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4650      	mov	r0, sl
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	f7fd fa49 	bl	8000158 <__aeabi_dsub>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	2000      	movs	r0, #0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4922      	ldr	r1, [pc, #136]	@ (8002d58 <__kernel_cos+0x170>)
 8002cce:	f7fd fa43 	bl	8000158 <__aeabi_dsub>
 8002cd2:	b003      	add	sp, #12
 8002cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd8:	2400      	movs	r4, #0
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <__kernel_cos+0x174>)
 8002cdc:	4622      	mov	r2, r4
 8002cde:	429e      	cmp	r6, r3
 8002ce0:	bf8c      	ite	hi
 8002ce2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8002d60 <__kernel_cos+0x178>)
 8002ce4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8002ce8:	462b      	mov	r3, r5
 8002cea:	2000      	movs	r0, #0
 8002cec:	491a      	ldr	r1, [pc, #104]	@ (8002d58 <__kernel_cos+0x170>)
 8002cee:	f7fd fa33 	bl	8000158 <__aeabi_dsub>
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	4606      	mov	r6, r0
 8002cf6:	460f      	mov	r7, r1
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	4650      	mov	r0, sl
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	f7fd fa2b 	bl	8000158 <__aeabi_dsub>
 8002d02:	4642      	mov	r2, r8
 8002d04:	464b      	mov	r3, r9
 8002d06:	f7fd fa27 	bl	8000158 <__aeabi_dsub>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4630      	mov	r0, r6
 8002d10:	4639      	mov	r1, r7
 8002d12:	e7dc      	b.n	8002cce <__kernel_cos+0xe6>
 8002d14:	2000      	movs	r0, #0
 8002d16:	4910      	ldr	r1, [pc, #64]	@ (8002d58 <__kernel_cos+0x170>)
 8002d18:	e7db      	b.n	8002cd2 <__kernel_cos+0xea>
 8002d1a:	bf00      	nop
 8002d1c:	f3af 8000 	nop.w
 8002d20:	be8838d4 	.word	0xbe8838d4
 8002d24:	bda8fae9 	.word	0xbda8fae9
 8002d28:	bdb4b1c4 	.word	0xbdb4b1c4
 8002d2c:	3e21ee9e 	.word	0x3e21ee9e
 8002d30:	809c52ad 	.word	0x809c52ad
 8002d34:	3e927e4f 	.word	0x3e927e4f
 8002d38:	19cb1590 	.word	0x19cb1590
 8002d3c:	3efa01a0 	.word	0x3efa01a0
 8002d40:	16c15177 	.word	0x16c15177
 8002d44:	3f56c16c 	.word	0x3f56c16c
 8002d48:	5555554c 	.word	0x5555554c
 8002d4c:	3fa55555 	.word	0x3fa55555
 8002d50:	3fe00000 	.word	0x3fe00000
 8002d54:	3fd33332 	.word	0x3fd33332
 8002d58:	3ff00000 	.word	0x3ff00000
 8002d5c:	3fe90000 	.word	0x3fe90000
 8002d60:	3fd20000 	.word	0x3fd20000
 8002d64:	00000000 	.word	0x00000000

08002d68 <__kernel_sin>:
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	461f      	mov	r7, r3
 8002d6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002d72:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8002d76:	4604      	mov	r4, r0
 8002d78:	460d      	mov	r5, r1
 8002d7a:	4616      	mov	r6, r2
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	d203      	bcs.n	8002d88 <__kernel_sin+0x20>
 8002d80:	f7fd fe3c 	bl	80009fc <__aeabi_d2iz>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d051      	beq.n	8002e2c <__kernel_sin+0xc4>
 8002d88:	4622      	mov	r2, r4
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fd fb9a 	bl	80004c8 <__aeabi_dmul>
 8002d94:	4682      	mov	sl, r0
 8002d96:	468b      	mov	fp, r1
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd fb92 	bl	80004c8 <__aeabi_dmul>
 8002da4:	a33e      	add	r3, pc, #248	@ (adr r3, 8002ea0 <__kernel_sin+0x138>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	4680      	mov	r8, r0
 8002dac:	4689      	mov	r9, r1
 8002dae:	4650      	mov	r0, sl
 8002db0:	4659      	mov	r1, fp
 8002db2:	f7fd fb89 	bl	80004c8 <__aeabi_dmul>
 8002db6:	a33c      	add	r3, pc, #240	@ (adr r3, 8002ea8 <__kernel_sin+0x140>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd f9cc 	bl	8000158 <__aeabi_dsub>
 8002dc0:	4652      	mov	r2, sl
 8002dc2:	465b      	mov	r3, fp
 8002dc4:	f7fd fb80 	bl	80004c8 <__aeabi_dmul>
 8002dc8:	a339      	add	r3, pc, #228	@ (adr r3, 8002eb0 <__kernel_sin+0x148>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd f9c5 	bl	800015c <__adddf3>
 8002dd2:	4652      	mov	r2, sl
 8002dd4:	465b      	mov	r3, fp
 8002dd6:	f7fd fb77 	bl	80004c8 <__aeabi_dmul>
 8002dda:	a337      	add	r3, pc, #220	@ (adr r3, 8002eb8 <__kernel_sin+0x150>)
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f7fd f9ba 	bl	8000158 <__aeabi_dsub>
 8002de4:	4652      	mov	r2, sl
 8002de6:	465b      	mov	r3, fp
 8002de8:	f7fd fb6e 	bl	80004c8 <__aeabi_dmul>
 8002dec:	a334      	add	r3, pc, #208	@ (adr r3, 8002ec0 <__kernel_sin+0x158>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	f7fd f9b3 	bl	800015c <__adddf3>
 8002df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002df8:	e9cd 0100 	strd	r0, r1, [sp]
 8002dfc:	b9db      	cbnz	r3, 8002e36 <__kernel_sin+0xce>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4650      	mov	r0, sl
 8002e04:	4659      	mov	r1, fp
 8002e06:	f7fd fb5f 	bl	80004c8 <__aeabi_dmul>
 8002e0a:	a32f      	add	r3, pc, #188	@ (adr r3, 8002ec8 <__kernel_sin+0x160>)
 8002e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e10:	f7fd f9a2 	bl	8000158 <__aeabi_dsub>
 8002e14:	4642      	mov	r2, r8
 8002e16:	464b      	mov	r3, r9
 8002e18:	f7fd fb56 	bl	80004c8 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4620      	mov	r0, r4
 8002e22:	4629      	mov	r1, r5
 8002e24:	f7fd f99a 	bl	800015c <__adddf3>
 8002e28:	4604      	mov	r4, r0
 8002e2a:	460d      	mov	r5, r1
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	4629      	mov	r1, r5
 8002e30:	b005      	add	sp, #20
 8002e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e36:	2200      	movs	r2, #0
 8002e38:	4630      	mov	r0, r6
 8002e3a:	4639      	mov	r1, r7
 8002e3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <__kernel_sin+0x168>)
 8002e3e:	f7fd fb43 	bl	80004c8 <__aeabi_dmul>
 8002e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	f7fd fb3b 	bl	80004c8 <__aeabi_dmul>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e5a:	f7fd f97d 	bl	8000158 <__aeabi_dsub>
 8002e5e:	4652      	mov	r2, sl
 8002e60:	465b      	mov	r3, fp
 8002e62:	f7fd fb31 	bl	80004c8 <__aeabi_dmul>
 8002e66:	4632      	mov	r2, r6
 8002e68:	463b      	mov	r3, r7
 8002e6a:	f7fd f975 	bl	8000158 <__aeabi_dsub>
 8002e6e:	a316      	add	r3, pc, #88	@ (adr r3, 8002ec8 <__kernel_sin+0x160>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	4606      	mov	r6, r0
 8002e76:	460f      	mov	r7, r1
 8002e78:	4640      	mov	r0, r8
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	f7fd fb24 	bl	80004c8 <__aeabi_dmul>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4630      	mov	r0, r6
 8002e86:	4639      	mov	r1, r7
 8002e88:	f7fd f968 	bl	800015c <__adddf3>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd f960 	bl	8000158 <__aeabi_dsub>
 8002e98:	e7c6      	b.n	8002e28 <__kernel_sin+0xc0>
 8002e9a:	bf00      	nop
 8002e9c:	f3af 8000 	nop.w
 8002ea0:	5acfd57c 	.word	0x5acfd57c
 8002ea4:	3de5d93a 	.word	0x3de5d93a
 8002ea8:	8a2b9ceb 	.word	0x8a2b9ceb
 8002eac:	3e5ae5e6 	.word	0x3e5ae5e6
 8002eb0:	57b1fe7d 	.word	0x57b1fe7d
 8002eb4:	3ec71de3 	.word	0x3ec71de3
 8002eb8:	19c161d5 	.word	0x19c161d5
 8002ebc:	3f2a01a0 	.word	0x3f2a01a0
 8002ec0:	1110f8a6 	.word	0x1110f8a6
 8002ec4:	3f811111 	.word	0x3f811111
 8002ec8:	55555549 	.word	0x55555549
 8002ecc:	3fc55555 	.word	0x3fc55555
 8002ed0:	3fe00000 	.word	0x3fe00000
 8002ed4:	00000000 	.word	0x00000000

08002ed8 <__ieee754_rem_pio2>:
 8002ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002edc:	4bc4      	ldr	r3, [pc, #784]	@ (80031f0 <__ieee754_rem_pio2+0x318>)
 8002ede:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8002ee2:	b08d      	sub	sp, #52	@ 0x34
 8002ee4:	4598      	cmp	r8, r3
 8002ee6:	4606      	mov	r6, r0
 8002ee8:	460f      	mov	r7, r1
 8002eea:	4614      	mov	r4, r2
 8002eec:	9104      	str	r1, [sp, #16]
 8002eee:	d807      	bhi.n	8002f00 <__ieee754_rem_pio2+0x28>
 8002ef0:	e9c2 6700 	strd	r6, r7, [r2]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002efc:	2500      	movs	r5, #0
 8002efe:	e026      	b.n	8002f4e <__ieee754_rem_pio2+0x76>
 8002f00:	4bbc      	ldr	r3, [pc, #752]	@ (80031f4 <__ieee754_rem_pio2+0x31c>)
 8002f02:	4598      	cmp	r8, r3
 8002f04:	d876      	bhi.n	8002ff4 <__ieee754_rem_pio2+0x11c>
 8002f06:	9b04      	ldr	r3, [sp, #16]
 8002f08:	4dbb      	ldr	r5, [pc, #748]	@ (80031f8 <__ieee754_rem_pio2+0x320>)
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	a3aa      	add	r3, pc, #680	@ (adr r3, 80031b8 <__ieee754_rem_pio2+0x2e0>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	dd38      	ble.n	8002f86 <__ieee754_rem_pio2+0xae>
 8002f14:	f7fd f920 	bl	8000158 <__aeabi_dsub>
 8002f18:	45a8      	cmp	r8, r5
 8002f1a:	4606      	mov	r6, r0
 8002f1c:	460f      	mov	r7, r1
 8002f1e:	d01a      	beq.n	8002f56 <__ieee754_rem_pio2+0x7e>
 8002f20:	a3a7      	add	r3, pc, #668	@ (adr r3, 80031c0 <__ieee754_rem_pio2+0x2e8>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f7fd f917 	bl	8000158 <__aeabi_dsub>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4680      	mov	r8, r0
 8002f30:	4689      	mov	r9, r1
 8002f32:	4630      	mov	r0, r6
 8002f34:	4639      	mov	r1, r7
 8002f36:	f7fd f90f 	bl	8000158 <__aeabi_dsub>
 8002f3a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80031c0 <__ieee754_rem_pio2+0x2e8>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd f90a 	bl	8000158 <__aeabi_dsub>
 8002f44:	2501      	movs	r5, #1
 8002f46:	e9c4 8900 	strd	r8, r9, [r4]
 8002f4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002f4e:	4628      	mov	r0, r5
 8002f50:	b00d      	add	sp, #52	@ 0x34
 8002f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f56:	a39c      	add	r3, pc, #624	@ (adr r3, 80031c8 <__ieee754_rem_pio2+0x2f0>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd f8fc 	bl	8000158 <__aeabi_dsub>
 8002f60:	a39b      	add	r3, pc, #620	@ (adr r3, 80031d0 <__ieee754_rem_pio2+0x2f8>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	4606      	mov	r6, r0
 8002f68:	460f      	mov	r7, r1
 8002f6a:	f7fd f8f5 	bl	8000158 <__aeabi_dsub>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4680      	mov	r8, r0
 8002f74:	4689      	mov	r9, r1
 8002f76:	4630      	mov	r0, r6
 8002f78:	4639      	mov	r1, r7
 8002f7a:	f7fd f8ed 	bl	8000158 <__aeabi_dsub>
 8002f7e:	a394      	add	r3, pc, #592	@ (adr r3, 80031d0 <__ieee754_rem_pio2+0x2f8>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	e7dc      	b.n	8002f40 <__ieee754_rem_pio2+0x68>
 8002f86:	f7fd f8e9 	bl	800015c <__adddf3>
 8002f8a:	45a8      	cmp	r8, r5
 8002f8c:	4606      	mov	r6, r0
 8002f8e:	460f      	mov	r7, r1
 8002f90:	d018      	beq.n	8002fc4 <__ieee754_rem_pio2+0xec>
 8002f92:	a38b      	add	r3, pc, #556	@ (adr r3, 80031c0 <__ieee754_rem_pio2+0x2e8>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd f8e0 	bl	800015c <__adddf3>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4680      	mov	r8, r0
 8002fa2:	4689      	mov	r9, r1
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	4639      	mov	r1, r7
 8002fa8:	f7fd f8d6 	bl	8000158 <__aeabi_dsub>
 8002fac:	a384      	add	r3, pc, #528	@ (adr r3, 80031c0 <__ieee754_rem_pio2+0x2e8>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd f8d3 	bl	800015c <__adddf3>
 8002fb6:	f04f 35ff 	mov.w	r5, #4294967295
 8002fba:	e9c4 8900 	strd	r8, r9, [r4]
 8002fbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002fc2:	e7c4      	b.n	8002f4e <__ieee754_rem_pio2+0x76>
 8002fc4:	a380      	add	r3, pc, #512	@ (adr r3, 80031c8 <__ieee754_rem_pio2+0x2f0>)
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	f7fd f8c7 	bl	800015c <__adddf3>
 8002fce:	a380      	add	r3, pc, #512	@ (adr r3, 80031d0 <__ieee754_rem_pio2+0x2f8>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	4606      	mov	r6, r0
 8002fd6:	460f      	mov	r7, r1
 8002fd8:	f7fd f8c0 	bl	800015c <__adddf3>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4680      	mov	r8, r0
 8002fe2:	4689      	mov	r9, r1
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	4639      	mov	r1, r7
 8002fe8:	f7fd f8b6 	bl	8000158 <__aeabi_dsub>
 8002fec:	a378      	add	r3, pc, #480	@ (adr r3, 80031d0 <__ieee754_rem_pio2+0x2f8>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	e7de      	b.n	8002fb2 <__ieee754_rem_pio2+0xda>
 8002ff4:	4b81      	ldr	r3, [pc, #516]	@ (80031fc <__ieee754_rem_pio2+0x324>)
 8002ff6:	4598      	cmp	r8, r3
 8002ff8:	f200 80cf 	bhi.w	800319a <__ieee754_rem_pio2+0x2c2>
 8002ffc:	f000 f962 	bl	80032c4 <fabs>
 8003000:	a375      	add	r3, pc, #468	@ (adr r3, 80031d8 <__ieee754_rem_pio2+0x300>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	4606      	mov	r6, r0
 8003008:	460f      	mov	r7, r1
 800300a:	f7fd fa5d 	bl	80004c8 <__aeabi_dmul>
 800300e:	2200      	movs	r2, #0
 8003010:	4b7b      	ldr	r3, [pc, #492]	@ (8003200 <__ieee754_rem_pio2+0x328>)
 8003012:	f7fd f8a3 	bl	800015c <__adddf3>
 8003016:	f7fd fcf1 	bl	80009fc <__aeabi_d2iz>
 800301a:	4605      	mov	r5, r0
 800301c:	f7fd f9ea 	bl	80003f4 <__aeabi_i2d>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003028:	a363      	add	r3, pc, #396	@ (adr r3, 80031b8 <__ieee754_rem_pio2+0x2e0>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd fa4b 	bl	80004c8 <__aeabi_dmul>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4630      	mov	r0, r6
 8003038:	4639      	mov	r1, r7
 800303a:	f7fd f88d 	bl	8000158 <__aeabi_dsub>
 800303e:	a360      	add	r3, pc, #384	@ (adr r3, 80031c0 <__ieee754_rem_pio2+0x2e8>)
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	4682      	mov	sl, r0
 8003046:	468b      	mov	fp, r1
 8003048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800304c:	f7fd fa3c 	bl	80004c8 <__aeabi_dmul>
 8003050:	2d1f      	cmp	r5, #31
 8003052:	4606      	mov	r6, r0
 8003054:	460f      	mov	r7, r1
 8003056:	dc0c      	bgt.n	8003072 <__ieee754_rem_pio2+0x19a>
 8003058:	4b6a      	ldr	r3, [pc, #424]	@ (8003204 <__ieee754_rem_pio2+0x32c>)
 800305a:	1e6a      	subs	r2, r5, #1
 800305c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003060:	4543      	cmp	r3, r8
 8003062:	d006      	beq.n	8003072 <__ieee754_rem_pio2+0x19a>
 8003064:	4632      	mov	r2, r6
 8003066:	463b      	mov	r3, r7
 8003068:	4650      	mov	r0, sl
 800306a:	4659      	mov	r1, fp
 800306c:	f7fd f874 	bl	8000158 <__aeabi_dsub>
 8003070:	e00e      	b.n	8003090 <__ieee754_rem_pio2+0x1b8>
 8003072:	463b      	mov	r3, r7
 8003074:	4632      	mov	r2, r6
 8003076:	4650      	mov	r0, sl
 8003078:	4659      	mov	r1, fp
 800307a:	f7fd f86d 	bl	8000158 <__aeabi_dsub>
 800307e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003082:	9305      	str	r3, [sp, #20]
 8003084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003088:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800308c:	2b10      	cmp	r3, #16
 800308e:	dc02      	bgt.n	8003096 <__ieee754_rem_pio2+0x1be>
 8003090:	e9c4 0100 	strd	r0, r1, [r4]
 8003094:	e039      	b.n	800310a <__ieee754_rem_pio2+0x232>
 8003096:	a34c      	add	r3, pc, #304	@ (adr r3, 80031c8 <__ieee754_rem_pio2+0x2f0>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030a0:	f7fd fa12 	bl	80004c8 <__aeabi_dmul>
 80030a4:	4606      	mov	r6, r0
 80030a6:	460f      	mov	r7, r1
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4650      	mov	r0, sl
 80030ae:	4659      	mov	r1, fp
 80030b0:	f7fd f852 	bl	8000158 <__aeabi_dsub>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4680      	mov	r8, r0
 80030ba:	4689      	mov	r9, r1
 80030bc:	4650      	mov	r0, sl
 80030be:	4659      	mov	r1, fp
 80030c0:	f7fd f84a 	bl	8000158 <__aeabi_dsub>
 80030c4:	4632      	mov	r2, r6
 80030c6:	463b      	mov	r3, r7
 80030c8:	f7fd f846 	bl	8000158 <__aeabi_dsub>
 80030cc:	a340      	add	r3, pc, #256	@ (adr r3, 80031d0 <__ieee754_rem_pio2+0x2f8>)
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	4606      	mov	r6, r0
 80030d4:	460f      	mov	r7, r1
 80030d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030da:	f7fd f9f5 	bl	80004c8 <__aeabi_dmul>
 80030de:	4632      	mov	r2, r6
 80030e0:	463b      	mov	r3, r7
 80030e2:	f7fd f839 	bl	8000158 <__aeabi_dsub>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4606      	mov	r6, r0
 80030ec:	460f      	mov	r7, r1
 80030ee:	4640      	mov	r0, r8
 80030f0:	4649      	mov	r1, r9
 80030f2:	f7fd f831 	bl	8000158 <__aeabi_dsub>
 80030f6:	9a05      	ldr	r2, [sp, #20]
 80030f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b31      	cmp	r3, #49	@ 0x31
 8003100:	dc20      	bgt.n	8003144 <__ieee754_rem_pio2+0x26c>
 8003102:	46c2      	mov	sl, r8
 8003104:	46cb      	mov	fp, r9
 8003106:	e9c4 0100 	strd	r0, r1, [r4]
 800310a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800310e:	4650      	mov	r0, sl
 8003110:	4642      	mov	r2, r8
 8003112:	464b      	mov	r3, r9
 8003114:	4659      	mov	r1, fp
 8003116:	f7fd f81f 	bl	8000158 <__aeabi_dsub>
 800311a:	463b      	mov	r3, r7
 800311c:	4632      	mov	r2, r6
 800311e:	f7fd f81b 	bl	8000158 <__aeabi_dsub>
 8003122:	9b04      	ldr	r3, [sp, #16]
 8003124:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f6bf af10 	bge.w	8002f4e <__ieee754_rem_pio2+0x76>
 800312e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003132:	6063      	str	r3, [r4, #4]
 8003134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003138:	f8c4 8000 	str.w	r8, [r4]
 800313c:	60a0      	str	r0, [r4, #8]
 800313e:	60e3      	str	r3, [r4, #12]
 8003140:	426d      	negs	r5, r5
 8003142:	e704      	b.n	8002f4e <__ieee754_rem_pio2+0x76>
 8003144:	a326      	add	r3, pc, #152	@ (adr r3, 80031e0 <__ieee754_rem_pio2+0x308>)
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800314e:	f7fd f9bb 	bl	80004c8 <__aeabi_dmul>
 8003152:	4606      	mov	r6, r0
 8003154:	460f      	mov	r7, r1
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4640      	mov	r0, r8
 800315c:	4649      	mov	r1, r9
 800315e:	f7fc fffb 	bl	8000158 <__aeabi_dsub>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4682      	mov	sl, r0
 8003168:	468b      	mov	fp, r1
 800316a:	4640      	mov	r0, r8
 800316c:	4649      	mov	r1, r9
 800316e:	f7fc fff3 	bl	8000158 <__aeabi_dsub>
 8003172:	4632      	mov	r2, r6
 8003174:	463b      	mov	r3, r7
 8003176:	f7fc ffef 	bl	8000158 <__aeabi_dsub>
 800317a:	a31b      	add	r3, pc, #108	@ (adr r3, 80031e8 <__ieee754_rem_pio2+0x310>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	4606      	mov	r6, r0
 8003182:	460f      	mov	r7, r1
 8003184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003188:	f7fd f99e 	bl	80004c8 <__aeabi_dmul>
 800318c:	4632      	mov	r2, r6
 800318e:	463b      	mov	r3, r7
 8003190:	f7fc ffe2 	bl	8000158 <__aeabi_dsub>
 8003194:	4606      	mov	r6, r0
 8003196:	460f      	mov	r7, r1
 8003198:	e764      	b.n	8003064 <__ieee754_rem_pio2+0x18c>
 800319a:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <__ieee754_rem_pio2+0x330>)
 800319c:	4598      	cmp	r8, r3
 800319e:	d935      	bls.n	800320c <__ieee754_rem_pio2+0x334>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	f7fc ffd8 	bl	8000158 <__aeabi_dsub>
 80031a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80031ac:	e9c4 0100 	strd	r0, r1, [r4]
 80031b0:	e6a4      	b.n	8002efc <__ieee754_rem_pio2+0x24>
 80031b2:	bf00      	nop
 80031b4:	f3af 8000 	nop.w
 80031b8:	54400000 	.word	0x54400000
 80031bc:	3ff921fb 	.word	0x3ff921fb
 80031c0:	1a626331 	.word	0x1a626331
 80031c4:	3dd0b461 	.word	0x3dd0b461
 80031c8:	1a600000 	.word	0x1a600000
 80031cc:	3dd0b461 	.word	0x3dd0b461
 80031d0:	2e037073 	.word	0x2e037073
 80031d4:	3ba3198a 	.word	0x3ba3198a
 80031d8:	6dc9c883 	.word	0x6dc9c883
 80031dc:	3fe45f30 	.word	0x3fe45f30
 80031e0:	2e000000 	.word	0x2e000000
 80031e4:	3ba3198a 	.word	0x3ba3198a
 80031e8:	252049c1 	.word	0x252049c1
 80031ec:	397b839a 	.word	0x397b839a
 80031f0:	3fe921fb 	.word	0x3fe921fb
 80031f4:	4002d97b 	.word	0x4002d97b
 80031f8:	3ff921fb 	.word	0x3ff921fb
 80031fc:	413921fb 	.word	0x413921fb
 8003200:	3fe00000 	.word	0x3fe00000
 8003204:	08003b44 	.word	0x08003b44
 8003208:	7fefffff 	.word	0x7fefffff
 800320c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003210:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003214:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003218:	460f      	mov	r7, r1
 800321a:	f7fd fbef 	bl	80009fc <__aeabi_d2iz>
 800321e:	f7fd f8e9 	bl	80003f4 <__aeabi_i2d>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4630      	mov	r0, r6
 8003228:	4639      	mov	r1, r7
 800322a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800322e:	f7fc ff93 	bl	8000158 <__aeabi_dsub>
 8003232:	2200      	movs	r2, #0
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <__ieee754_rem_pio2+0x3e4>)
 8003236:	f7fd f947 	bl	80004c8 <__aeabi_dmul>
 800323a:	460f      	mov	r7, r1
 800323c:	4606      	mov	r6, r0
 800323e:	f7fd fbdd 	bl	80009fc <__aeabi_d2iz>
 8003242:	f7fd f8d7 	bl	80003f4 <__aeabi_i2d>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4630      	mov	r0, r6
 800324c:	4639      	mov	r1, r7
 800324e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003252:	f7fc ff81 	bl	8000158 <__aeabi_dsub>
 8003256:	2200      	movs	r2, #0
 8003258:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <__ieee754_rem_pio2+0x3e4>)
 800325a:	f7fd f935 	bl	80004c8 <__aeabi_dmul>
 800325e:	f04f 0803 	mov.w	r8, #3
 8003262:	2600      	movs	r6, #0
 8003264:	2700      	movs	r7, #0
 8003266:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800326a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800326e:	4632      	mov	r2, r6
 8003270:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003274:	463b      	mov	r3, r7
 8003276:	46c2      	mov	sl, r8
 8003278:	f108 38ff 	add.w	r8, r8, #4294967295
 800327c:	f7fd fb8c 	bl	8000998 <__aeabi_dcmpeq>
 8003280:	2800      	cmp	r0, #0
 8003282:	d1f4      	bne.n	800326e <__ieee754_rem_pio2+0x396>
 8003284:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <__ieee754_rem_pio2+0x3e8>)
 8003286:	462a      	mov	r2, r5
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2302      	movs	r3, #2
 800328c:	4621      	mov	r1, r4
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	a806      	add	r0, sp, #24
 8003292:	4653      	mov	r3, sl
 8003294:	f000 f81a 	bl	80032cc <__kernel_rem_pio2>
 8003298:	9b04      	ldr	r3, [sp, #16]
 800329a:	4605      	mov	r5, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f6bf ae56 	bge.w	8002f4e <__ieee754_rem_pio2+0x76>
 80032a2:	e9d4 2100 	ldrd	r2, r1, [r4]
 80032a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80032aa:	e9c4 2300 	strd	r2, r3, [r4]
 80032ae:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80032b2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80032b6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80032ba:	e741      	b.n	8003140 <__ieee754_rem_pio2+0x268>
 80032bc:	41700000 	.word	0x41700000
 80032c0:	08003bc4 	.word	0x08003bc4

080032c4 <fabs>:
 80032c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80032c8:	4619      	mov	r1, r3
 80032ca:	4770      	bx	lr

080032cc <__kernel_rem_pio2>:
 80032cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80032d4:	9308      	str	r3, [sp, #32]
 80032d6:	9104      	str	r1, [sp, #16]
 80032d8:	4bb6      	ldr	r3, [pc, #728]	@ (80035b4 <__kernel_rem_pio2+0x2e8>)
 80032da:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80032dc:	f112 0f14 	cmn.w	r2, #20
 80032e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032e4:	bfa8      	it	ge
 80032e6:	1ed4      	subge	r4, r2, #3
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	9b08      	ldr	r3, [sp, #32]
 80032ec:	bfb8      	it	lt
 80032ee:	2400      	movlt	r4, #0
 80032f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80032f4:	9306      	str	r3, [sp, #24]
 80032f6:	bfa4      	itt	ge
 80032f8:	2318      	movge	r3, #24
 80032fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80032fe:	f06f 0317 	mvn.w	r3, #23
 8003302:	fb04 3303 	mla	r3, r4, r3, r3
 8003306:	eb03 0a02 	add.w	sl, r3, r2
 800330a:	9a06      	ldr	r2, [sp, #24]
 800330c:	9b02      	ldr	r3, [sp, #8]
 800330e:	1aa7      	subs	r7, r4, r2
 8003310:	eb03 0802 	add.w	r8, r3, r2
 8003314:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8003316:	2500      	movs	r5, #0
 8003318:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800331c:	2200      	movs	r2, #0
 800331e:	2300      	movs	r3, #0
 8003320:	9009      	str	r0, [sp, #36]	@ 0x24
 8003322:	ae20      	add	r6, sp, #128	@ 0x80
 8003324:	4545      	cmp	r5, r8
 8003326:	dd14      	ble.n	8003352 <__kernel_rem_pio2+0x86>
 8003328:	f04f 0800 	mov.w	r8, #0
 800332c:	9a08      	ldr	r2, [sp, #32]
 800332e:	ab20      	add	r3, sp, #128	@ 0x80
 8003330:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003334:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8003338:	9b02      	ldr	r3, [sp, #8]
 800333a:	4598      	cmp	r8, r3
 800333c:	dc35      	bgt.n	80033aa <__kernel_rem_pio2+0xde>
 800333e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003340:	2200      	movs	r2, #0
 8003342:	f1a3 0908 	sub.w	r9, r3, #8
 8003346:	2300      	movs	r3, #0
 8003348:	462f      	mov	r7, r5
 800334a:	2600      	movs	r6, #0
 800334c:	e9cd 2300 	strd	r2, r3, [sp]
 8003350:	e01f      	b.n	8003392 <__kernel_rem_pio2+0xc6>
 8003352:	42ef      	cmn	r7, r5
 8003354:	d40b      	bmi.n	800336e <__kernel_rem_pio2+0xa2>
 8003356:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800335a:	e9cd 2300 	strd	r2, r3, [sp]
 800335e:	f7fd f849 	bl	80003f4 <__aeabi_i2d>
 8003362:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003366:	e8e6 0102 	strd	r0, r1, [r6], #8
 800336a:	3501      	adds	r5, #1
 800336c:	e7da      	b.n	8003324 <__kernel_rem_pio2+0x58>
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	e7f8      	b.n	8003366 <__kernel_rem_pio2+0x9a>
 8003374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003378:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800337c:	f7fd f8a4 	bl	80004c8 <__aeabi_dmul>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003388:	f7fc fee8 	bl	800015c <__adddf3>
 800338c:	e9cd 0100 	strd	r0, r1, [sp]
 8003390:	3601      	adds	r6, #1
 8003392:	9b06      	ldr	r3, [sp, #24]
 8003394:	3f08      	subs	r7, #8
 8003396:	429e      	cmp	r6, r3
 8003398:	ddec      	ble.n	8003374 <__kernel_rem_pio2+0xa8>
 800339a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800339e:	f108 0801 	add.w	r8, r8, #1
 80033a2:	e8eb 2302 	strd	r2, r3, [fp], #8
 80033a6:	3508      	adds	r5, #8
 80033a8:	e7c6      	b.n	8003338 <__kernel_rem_pio2+0x6c>
 80033aa:	9b02      	ldr	r3, [sp, #8]
 80033ac:	aa0c      	add	r2, sp, #48	@ 0x30
 80033ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80033b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80033b4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80033b6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80033ba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80033be:	930a      	str	r3, [sp, #40]	@ 0x28
 80033c0:	ab98      	add	r3, sp, #608	@ 0x260
 80033c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80033c6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80033ca:	ab70      	add	r3, sp, #448	@ 0x1c0
 80033cc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80033d0:	ae0c      	add	r6, sp, #48	@ 0x30
 80033d2:	4698      	mov	r8, r3
 80033d4:	46b1      	mov	r9, r6
 80033d6:	465f      	mov	r7, fp
 80033d8:	9307      	str	r3, [sp, #28]
 80033da:	2f00      	cmp	r7, #0
 80033dc:	f1a8 0808 	sub.w	r8, r8, #8
 80033e0:	dc71      	bgt.n	80034c6 <__kernel_rem_pio2+0x1fa>
 80033e2:	4652      	mov	r2, sl
 80033e4:	4620      	mov	r0, r4
 80033e6:	4629      	mov	r1, r5
 80033e8:	f000 fa96 	bl	8003918 <scalbn>
 80033ec:	2200      	movs	r2, #0
 80033ee:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80033f2:	4604      	mov	r4, r0
 80033f4:	460d      	mov	r5, r1
 80033f6:	f7fd f867 	bl	80004c8 <__aeabi_dmul>
 80033fa:	f000 fb05 	bl	8003a08 <floor>
 80033fe:	2200      	movs	r2, #0
 8003400:	4b6d      	ldr	r3, [pc, #436]	@ (80035b8 <__kernel_rem_pio2+0x2ec>)
 8003402:	f7fd f861 	bl	80004c8 <__aeabi_dmul>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4620      	mov	r0, r4
 800340c:	4629      	mov	r1, r5
 800340e:	f7fc fea3 	bl	8000158 <__aeabi_dsub>
 8003412:	460d      	mov	r5, r1
 8003414:	4604      	mov	r4, r0
 8003416:	f7fd faf1 	bl	80009fc <__aeabi_d2iz>
 800341a:	9005      	str	r0, [sp, #20]
 800341c:	f7fc ffea 	bl	80003f4 <__aeabi_i2d>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4620      	mov	r0, r4
 8003426:	4629      	mov	r1, r5
 8003428:	f7fc fe96 	bl	8000158 <__aeabi_dsub>
 800342c:	f1ba 0f00 	cmp.w	sl, #0
 8003430:	4680      	mov	r8, r0
 8003432:	4689      	mov	r9, r1
 8003434:	dd6d      	ble.n	8003512 <__kernel_rem_pio2+0x246>
 8003436:	f10b 31ff 	add.w	r1, fp, #4294967295
 800343a:	ab0c      	add	r3, sp, #48	@ 0x30
 800343c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003440:	9c05      	ldr	r4, [sp, #20]
 8003442:	f1ca 0018 	rsb	r0, sl, #24
 8003446:	fa43 f200 	asr.w	r2, r3, r0
 800344a:	4414      	add	r4, r2
 800344c:	4082      	lsls	r2, r0
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	aa0c      	add	r2, sp, #48	@ 0x30
 8003452:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003456:	f1ca 0217 	rsb	r2, sl, #23
 800345a:	9405      	str	r4, [sp, #20]
 800345c:	4113      	asrs	r3, r2
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	9b00      	ldr	r3, [sp, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	dd64      	ble.n	8003530 <__kernel_rem_pio2+0x264>
 8003466:	2200      	movs	r2, #0
 8003468:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800346c:	4614      	mov	r4, r2
 800346e:	9b05      	ldr	r3, [sp, #20]
 8003470:	3301      	adds	r3, #1
 8003472:	9305      	str	r3, [sp, #20]
 8003474:	4593      	cmp	fp, r2
 8003476:	f300 80ab 	bgt.w	80035d0 <__kernel_rem_pio2+0x304>
 800347a:	f1ba 0f00 	cmp.w	sl, #0
 800347e:	dd07      	ble.n	8003490 <__kernel_rem_pio2+0x1c4>
 8003480:	f1ba 0f01 	cmp.w	sl, #1
 8003484:	f000 80b2 	beq.w	80035ec <__kernel_rem_pio2+0x320>
 8003488:	f1ba 0f02 	cmp.w	sl, #2
 800348c:	f000 80b9 	beq.w	8003602 <__kernel_rem_pio2+0x336>
 8003490:	9b00      	ldr	r3, [sp, #0]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d14c      	bne.n	8003530 <__kernel_rem_pio2+0x264>
 8003496:	4642      	mov	r2, r8
 8003498:	464b      	mov	r3, r9
 800349a:	2000      	movs	r0, #0
 800349c:	4947      	ldr	r1, [pc, #284]	@ (80035bc <__kernel_rem_pio2+0x2f0>)
 800349e:	f7fc fe5b 	bl	8000158 <__aeabi_dsub>
 80034a2:	4680      	mov	r8, r0
 80034a4:	4689      	mov	r9, r1
 80034a6:	2c00      	cmp	r4, #0
 80034a8:	d042      	beq.n	8003530 <__kernel_rem_pio2+0x264>
 80034aa:	4652      	mov	r2, sl
 80034ac:	2000      	movs	r0, #0
 80034ae:	4943      	ldr	r1, [pc, #268]	@ (80035bc <__kernel_rem_pio2+0x2f0>)
 80034b0:	f000 fa32 	bl	8003918 <scalbn>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4640      	mov	r0, r8
 80034ba:	4649      	mov	r1, r9
 80034bc:	f7fc fe4c 	bl	8000158 <__aeabi_dsub>
 80034c0:	4680      	mov	r8, r0
 80034c2:	4689      	mov	r9, r1
 80034c4:	e034      	b.n	8003530 <__kernel_rem_pio2+0x264>
 80034c6:	2200      	movs	r2, #0
 80034c8:	4b3d      	ldr	r3, [pc, #244]	@ (80035c0 <__kernel_rem_pio2+0x2f4>)
 80034ca:	4620      	mov	r0, r4
 80034cc:	4629      	mov	r1, r5
 80034ce:	f7fc fffb 	bl	80004c8 <__aeabi_dmul>
 80034d2:	f7fd fa93 	bl	80009fc <__aeabi_d2iz>
 80034d6:	f7fc ff8d 	bl	80003f4 <__aeabi_i2d>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	e9cd 2300 	strd	r2, r3, [sp]
 80034e2:	2200      	movs	r2, #0
 80034e4:	4b37      	ldr	r3, [pc, #220]	@ (80035c4 <__kernel_rem_pio2+0x2f8>)
 80034e6:	f7fc ffef 	bl	80004c8 <__aeabi_dmul>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fc fe31 	bl	8000158 <__aeabi_dsub>
 80034f6:	f7fd fa81 	bl	80009fc <__aeabi_d2iz>
 80034fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80034fe:	f849 0b04 	str.w	r0, [r9], #4
 8003502:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003506:	f7fc fe29 	bl	800015c <__adddf3>
 800350a:	3f01      	subs	r7, #1
 800350c:	4604      	mov	r4, r0
 800350e:	460d      	mov	r5, r1
 8003510:	e763      	b.n	80033da <__kernel_rem_pio2+0x10e>
 8003512:	d106      	bne.n	8003522 <__kernel_rem_pio2+0x256>
 8003514:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003518:	aa0c      	add	r2, sp, #48	@ 0x30
 800351a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351e:	15db      	asrs	r3, r3, #23
 8003520:	e79d      	b.n	800345e <__kernel_rem_pio2+0x192>
 8003522:	2200      	movs	r2, #0
 8003524:	4b28      	ldr	r3, [pc, #160]	@ (80035c8 <__kernel_rem_pio2+0x2fc>)
 8003526:	f7fd fa55 	bl	80009d4 <__aeabi_dcmpge>
 800352a:	2800      	cmp	r0, #0
 800352c:	d13f      	bne.n	80035ae <__kernel_rem_pio2+0x2e2>
 800352e:	9000      	str	r0, [sp, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	2300      	movs	r3, #0
 8003534:	4640      	mov	r0, r8
 8003536:	4649      	mov	r1, r9
 8003538:	f7fd fa2e 	bl	8000998 <__aeabi_dcmpeq>
 800353c:	2800      	cmp	r0, #0
 800353e:	f000 80af 	beq.w	80036a0 <__kernel_rem_pio2+0x3d4>
 8003542:	2200      	movs	r2, #0
 8003544:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003548:	9902      	ldr	r1, [sp, #8]
 800354a:	428b      	cmp	r3, r1
 800354c:	da61      	bge.n	8003612 <__kernel_rem_pio2+0x346>
 800354e:	2a00      	cmp	r2, #0
 8003550:	d076      	beq.n	8003640 <__kernel_rem_pio2+0x374>
 8003552:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003556:	ab0c      	add	r3, sp, #48	@ 0x30
 8003558:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800355c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f6      	beq.n	8003552 <__kernel_rem_pio2+0x286>
 8003564:	4652      	mov	r2, sl
 8003566:	2000      	movs	r0, #0
 8003568:	4914      	ldr	r1, [pc, #80]	@ (80035bc <__kernel_rem_pio2+0x2f0>)
 800356a:	f000 f9d5 	bl	8003918 <scalbn>
 800356e:	465d      	mov	r5, fp
 8003570:	4606      	mov	r6, r0
 8003572:	460f      	mov	r7, r1
 8003574:	f04f 0900 	mov.w	r9, #0
 8003578:	ab70      	add	r3, sp, #448	@ 0x1c0
 800357a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 80035c0 <__kernel_rem_pio2+0x2f4>
 800357e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8003582:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8003586:	2d00      	cmp	r5, #0
 8003588:	f280 80c0 	bge.w	800370c <__kernel_rem_pio2+0x440>
 800358c:	465d      	mov	r5, fp
 800358e:	2d00      	cmp	r5, #0
 8003590:	f2c0 80f0 	blt.w	8003774 <__kernel_rem_pio2+0x4a8>
 8003594:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <__kernel_rem_pio2+0x300>)
 8003596:	f04f 0900 	mov.w	r9, #0
 800359a:	9306      	str	r3, [sp, #24]
 800359c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800359e:	f04f 0a00 	mov.w	sl, #0
 80035a2:	2700      	movs	r7, #0
 80035a4:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80035a8:	ebab 0605 	sub.w	r6, fp, r5
 80035ac:	e0d6      	b.n	800375c <__kernel_rem_pio2+0x490>
 80035ae:	2302      	movs	r3, #2
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	e758      	b.n	8003466 <__kernel_rem_pio2+0x19a>
 80035b4:	08003d10 	.word	0x08003d10
 80035b8:	40200000 	.word	0x40200000
 80035bc:	3ff00000 	.word	0x3ff00000
 80035c0:	3e700000 	.word	0x3e700000
 80035c4:	41700000 	.word	0x41700000
 80035c8:	3fe00000 	.word	0x3fe00000
 80035cc:	08003cd0 	.word	0x08003cd0
 80035d0:	f856 3b04 	ldr.w	r3, [r6], #4
 80035d4:	b944      	cbnz	r4, 80035e8 <__kernel_rem_pio2+0x31c>
 80035d6:	b123      	cbz	r3, 80035e2 <__kernel_rem_pio2+0x316>
 80035d8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80035dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80035e0:	2301      	movs	r3, #1
 80035e2:	461c      	mov	r4, r3
 80035e4:	3201      	adds	r2, #1
 80035e6:	e745      	b.n	8003474 <__kernel_rem_pio2+0x1a8>
 80035e8:	1acb      	subs	r3, r1, r3
 80035ea:	e7f7      	b.n	80035dc <__kernel_rem_pio2+0x310>
 80035ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80035f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80035f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80035fa:	a90c      	add	r1, sp, #48	@ 0x30
 80035fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003600:	e746      	b.n	8003490 <__kernel_rem_pio2+0x1c4>
 8003602:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003606:	ab0c      	add	r3, sp, #48	@ 0x30
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003610:	e7f3      	b.n	80035fa <__kernel_rem_pio2+0x32e>
 8003612:	a90c      	add	r1, sp, #48	@ 0x30
 8003614:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003618:	3b01      	subs	r3, #1
 800361a:	430a      	orrs	r2, r1
 800361c:	e794      	b.n	8003548 <__kernel_rem_pio2+0x27c>
 800361e:	3401      	adds	r4, #1
 8003620:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003624:	2a00      	cmp	r2, #0
 8003626:	d0fa      	beq.n	800361e <__kernel_rem_pio2+0x352>
 8003628:	9b08      	ldr	r3, [sp, #32]
 800362a:	aa20      	add	r2, sp, #128	@ 0x80
 800362c:	445b      	add	r3, fp
 800362e:	f10b 0801 	add.w	r8, fp, #1
 8003632:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003636:	445c      	add	r4, fp
 8003638:	4544      	cmp	r4, r8
 800363a:	da04      	bge.n	8003646 <__kernel_rem_pio2+0x37a>
 800363c:	46a3      	mov	fp, r4
 800363e:	e6bf      	b.n	80033c0 <__kernel_rem_pio2+0xf4>
 8003640:	2401      	movs	r4, #1
 8003642:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003644:	e7ec      	b.n	8003620 <__kernel_rem_pio2+0x354>
 8003646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003648:	46ab      	mov	fp, r5
 800364a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800364e:	f7fc fed1 	bl	80003f4 <__aeabi_i2d>
 8003652:	f04f 0900 	mov.w	r9, #0
 8003656:	2600      	movs	r6, #0
 8003658:	2700      	movs	r7, #0
 800365a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800365c:	e9c5 0100 	strd	r0, r1, [r5]
 8003660:	3b08      	subs	r3, #8
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	9b06      	ldr	r3, [sp, #24]
 8003666:	4599      	cmp	r9, r3
 8003668:	dd07      	ble.n	800367a <__kernel_rem_pio2+0x3ae>
 800366a:	9b07      	ldr	r3, [sp, #28]
 800366c:	f108 0801 	add.w	r8, r8, #1
 8003670:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8003674:	3508      	adds	r5, #8
 8003676:	9307      	str	r3, [sp, #28]
 8003678:	e7de      	b.n	8003638 <__kernel_rem_pio2+0x36c>
 800367a:	9900      	ldr	r1, [sp, #0]
 800367c:	f109 0901 	add.w	r9, r9, #1
 8003680:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003684:	9100      	str	r1, [sp, #0]
 8003686:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800368a:	f7fc ff1d 	bl	80004c8 <__aeabi_dmul>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4630      	mov	r0, r6
 8003694:	4639      	mov	r1, r7
 8003696:	f7fc fd61 	bl	800015c <__adddf3>
 800369a:	4606      	mov	r6, r0
 800369c:	460f      	mov	r7, r1
 800369e:	e7e1      	b.n	8003664 <__kernel_rem_pio2+0x398>
 80036a0:	f1ca 0200 	rsb	r2, sl, #0
 80036a4:	4640      	mov	r0, r8
 80036a6:	4649      	mov	r1, r9
 80036a8:	f000 f936 	bl	8003918 <scalbn>
 80036ac:	2200      	movs	r2, #0
 80036ae:	4b97      	ldr	r3, [pc, #604]	@ (800390c <__kernel_rem_pio2+0x640>)
 80036b0:	4604      	mov	r4, r0
 80036b2:	460d      	mov	r5, r1
 80036b4:	f7fd f98e 	bl	80009d4 <__aeabi_dcmpge>
 80036b8:	b300      	cbz	r0, 80036fc <__kernel_rem_pio2+0x430>
 80036ba:	2200      	movs	r2, #0
 80036bc:	4b94      	ldr	r3, [pc, #592]	@ (8003910 <__kernel_rem_pio2+0x644>)
 80036be:	4620      	mov	r0, r4
 80036c0:	4629      	mov	r1, r5
 80036c2:	f7fc ff01 	bl	80004c8 <__aeabi_dmul>
 80036c6:	f7fd f999 	bl	80009fc <__aeabi_d2iz>
 80036ca:	4606      	mov	r6, r0
 80036cc:	f7fc fe92 	bl	80003f4 <__aeabi_i2d>
 80036d0:	2200      	movs	r2, #0
 80036d2:	4b8e      	ldr	r3, [pc, #568]	@ (800390c <__kernel_rem_pio2+0x640>)
 80036d4:	f7fc fef8 	bl	80004c8 <__aeabi_dmul>
 80036d8:	460b      	mov	r3, r1
 80036da:	4602      	mov	r2, r0
 80036dc:	4629      	mov	r1, r5
 80036de:	4620      	mov	r0, r4
 80036e0:	f7fc fd3a 	bl	8000158 <__aeabi_dsub>
 80036e4:	f7fd f98a 	bl	80009fc <__aeabi_d2iz>
 80036e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80036ea:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80036ee:	f10b 0b01 	add.w	fp, fp, #1
 80036f2:	f10a 0a18 	add.w	sl, sl, #24
 80036f6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80036fa:	e733      	b.n	8003564 <__kernel_rem_pio2+0x298>
 80036fc:	4620      	mov	r0, r4
 80036fe:	4629      	mov	r1, r5
 8003700:	f7fd f97c 	bl	80009fc <__aeabi_d2iz>
 8003704:	ab0c      	add	r3, sp, #48	@ 0x30
 8003706:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800370a:	e72b      	b.n	8003564 <__kernel_rem_pio2+0x298>
 800370c:	ab0c      	add	r3, sp, #48	@ 0x30
 800370e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003712:	f7fc fe6f 	bl	80003f4 <__aeabi_i2d>
 8003716:	4632      	mov	r2, r6
 8003718:	463b      	mov	r3, r7
 800371a:	f7fc fed5 	bl	80004c8 <__aeabi_dmul>
 800371e:	464a      	mov	r2, r9
 8003720:	e868 0102 	strd	r0, r1, [r8], #-8
 8003724:	4653      	mov	r3, sl
 8003726:	4630      	mov	r0, r6
 8003728:	4639      	mov	r1, r7
 800372a:	f7fc fecd 	bl	80004c8 <__aeabi_dmul>
 800372e:	3d01      	subs	r5, #1
 8003730:	4606      	mov	r6, r0
 8003732:	460f      	mov	r7, r1
 8003734:	e727      	b.n	8003586 <__kernel_rem_pio2+0x2ba>
 8003736:	f8dd c018 	ldr.w	ip, [sp, #24]
 800373a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800373e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8003742:	f8cd c018 	str.w	ip, [sp, #24]
 8003746:	f7fc febf 	bl	80004c8 <__aeabi_dmul>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4648      	mov	r0, r9
 8003750:	4651      	mov	r1, sl
 8003752:	f7fc fd03 	bl	800015c <__adddf3>
 8003756:	4681      	mov	r9, r0
 8003758:	468a      	mov	sl, r1
 800375a:	3701      	adds	r7, #1
 800375c:	9b02      	ldr	r3, [sp, #8]
 800375e:	429f      	cmp	r7, r3
 8003760:	dc01      	bgt.n	8003766 <__kernel_rem_pio2+0x49a>
 8003762:	42be      	cmp	r6, r7
 8003764:	dae7      	bge.n	8003736 <__kernel_rem_pio2+0x46a>
 8003766:	ab48      	add	r3, sp, #288	@ 0x120
 8003768:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800376c:	e9c6 9a00 	strd	r9, sl, [r6]
 8003770:	3d01      	subs	r5, #1
 8003772:	e70c      	b.n	800358e <__kernel_rem_pio2+0x2c2>
 8003774:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8003776:	2b02      	cmp	r3, #2
 8003778:	dc09      	bgt.n	800378e <__kernel_rem_pio2+0x4c2>
 800377a:	2b00      	cmp	r3, #0
 800377c:	dc2c      	bgt.n	80037d8 <__kernel_rem_pio2+0x50c>
 800377e:	d04e      	beq.n	800381e <__kernel_rem_pio2+0x552>
 8003780:	9b05      	ldr	r3, [sp, #20]
 8003782:	f003 0007 	and.w	r0, r3, #7
 8003786:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8003790:	2b03      	cmp	r3, #3
 8003792:	d1f5      	bne.n	8003780 <__kernel_rem_pio2+0x4b4>
 8003794:	ab48      	add	r3, sp, #288	@ 0x120
 8003796:	441c      	add	r4, r3
 8003798:	4625      	mov	r5, r4
 800379a:	46da      	mov	sl, fp
 800379c:	f1ba 0f00 	cmp.w	sl, #0
 80037a0:	dc63      	bgt.n	800386a <__kernel_rem_pio2+0x59e>
 80037a2:	4625      	mov	r5, r4
 80037a4:	46da      	mov	sl, fp
 80037a6:	f1ba 0f01 	cmp.w	sl, #1
 80037aa:	dc7b      	bgt.n	80038a4 <__kernel_rem_pio2+0x5d8>
 80037ac:	2000      	movs	r0, #0
 80037ae:	2100      	movs	r1, #0
 80037b0:	f1bb 0f01 	cmp.w	fp, #1
 80037b4:	f300 8093 	bgt.w	80038de <__kernel_rem_pio2+0x612>
 80037b8:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80037bc:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80037c0:	9b00      	ldr	r3, [sp, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 8092 	bne.w	80038ec <__kernel_rem_pio2+0x620>
 80037c8:	9b04      	ldr	r3, [sp, #16]
 80037ca:	e9c3 7800 	strd	r7, r8, [r3]
 80037ce:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80037d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80037d6:	e7d3      	b.n	8003780 <__kernel_rem_pio2+0x4b4>
 80037d8:	465d      	mov	r5, fp
 80037da:	2000      	movs	r0, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	ab48      	add	r3, sp, #288	@ 0x120
 80037e0:	441c      	add	r4, r3
 80037e2:	2d00      	cmp	r5, #0
 80037e4:	da32      	bge.n	800384c <__kernel_rem_pio2+0x580>
 80037e6:	9b00      	ldr	r3, [sp, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d035      	beq.n	8003858 <__kernel_rem_pio2+0x58c>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80037f2:	9c04      	ldr	r4, [sp, #16]
 80037f4:	2501      	movs	r5, #1
 80037f6:	e9c4 2300 	strd	r2, r3, [r4]
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003802:	f7fc fca9 	bl	8000158 <__aeabi_dsub>
 8003806:	ac48      	add	r4, sp, #288	@ 0x120
 8003808:	45ab      	cmp	fp, r5
 800380a:	da28      	bge.n	800385e <__kernel_rem_pio2+0x592>
 800380c:	9b00      	ldr	r3, [sp, #0]
 800380e:	b113      	cbz	r3, 8003816 <__kernel_rem_pio2+0x54a>
 8003810:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003814:	4619      	mov	r1, r3
 8003816:	9b04      	ldr	r3, [sp, #16]
 8003818:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800381c:	e7b0      	b.n	8003780 <__kernel_rem_pio2+0x4b4>
 800381e:	2000      	movs	r0, #0
 8003820:	2100      	movs	r1, #0
 8003822:	ab48      	add	r3, sp, #288	@ 0x120
 8003824:	441c      	add	r4, r3
 8003826:	f1bb 0f00 	cmp.w	fp, #0
 800382a:	da08      	bge.n	800383e <__kernel_rem_pio2+0x572>
 800382c:	9b00      	ldr	r3, [sp, #0]
 800382e:	b113      	cbz	r3, 8003836 <__kernel_rem_pio2+0x56a>
 8003830:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003834:	4619      	mov	r1, r3
 8003836:	9b04      	ldr	r3, [sp, #16]
 8003838:	e9c3 0100 	strd	r0, r1, [r3]
 800383c:	e7a0      	b.n	8003780 <__kernel_rem_pio2+0x4b4>
 800383e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8003842:	f7fc fc8b 	bl	800015c <__adddf3>
 8003846:	f10b 3bff 	add.w	fp, fp, #4294967295
 800384a:	e7ec      	b.n	8003826 <__kernel_rem_pio2+0x55a>
 800384c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8003850:	f7fc fc84 	bl	800015c <__adddf3>
 8003854:	3d01      	subs	r5, #1
 8003856:	e7c4      	b.n	80037e2 <__kernel_rem_pio2+0x516>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	e7c9      	b.n	80037f2 <__kernel_rem_pio2+0x526>
 800385e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8003862:	f7fc fc7b 	bl	800015c <__adddf3>
 8003866:	3501      	adds	r5, #1
 8003868:	e7ce      	b.n	8003808 <__kernel_rem_pio2+0x53c>
 800386a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800386e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8003872:	4640      	mov	r0, r8
 8003874:	4649      	mov	r1, r9
 8003876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800387a:	f7fc fc6f 	bl	800015c <__adddf3>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4606      	mov	r6, r0
 8003884:	460f      	mov	r7, r1
 8003886:	4640      	mov	r0, r8
 8003888:	4649      	mov	r1, r9
 800388a:	f7fc fc65 	bl	8000158 <__aeabi_dsub>
 800388e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003892:	f7fc fc63 	bl	800015c <__adddf3>
 8003896:	e865 0102 	strd	r0, r1, [r5], #-8
 800389a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800389e:	e9c5 6700 	strd	r6, r7, [r5]
 80038a2:	e77b      	b.n	800379c <__kernel_rem_pio2+0x4d0>
 80038a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80038a8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80038ac:	4640      	mov	r0, r8
 80038ae:	4649      	mov	r1, r9
 80038b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038b4:	f7fc fc52 	bl	800015c <__adddf3>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4606      	mov	r6, r0
 80038be:	460f      	mov	r7, r1
 80038c0:	4640      	mov	r0, r8
 80038c2:	4649      	mov	r1, r9
 80038c4:	f7fc fc48 	bl	8000158 <__aeabi_dsub>
 80038c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038cc:	f7fc fc46 	bl	800015c <__adddf3>
 80038d0:	e865 0102 	strd	r0, r1, [r5], #-8
 80038d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038d8:	e9c5 6700 	strd	r6, r7, [r5]
 80038dc:	e763      	b.n	80037a6 <__kernel_rem_pio2+0x4da>
 80038de:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80038e2:	f7fc fc3b 	bl	800015c <__adddf3>
 80038e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038ea:	e761      	b.n	80037b0 <__kernel_rem_pio2+0x4e4>
 80038ec:	9b04      	ldr	r3, [sp, #16]
 80038ee:	9a04      	ldr	r2, [sp, #16]
 80038f0:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80038f4:	601f      	str	r7, [r3, #0]
 80038f6:	605c      	str	r4, [r3, #4]
 80038f8:	609d      	str	r5, [r3, #8]
 80038fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80038fe:	60d3      	str	r3, [r2, #12]
 8003900:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003904:	6110      	str	r0, [r2, #16]
 8003906:	6153      	str	r3, [r2, #20]
 8003908:	e73a      	b.n	8003780 <__kernel_rem_pio2+0x4b4>
 800390a:	bf00      	nop
 800390c:	41700000 	.word	0x41700000
 8003910:	3e700000 	.word	0x3e700000
 8003914:	00000000 	.word	0x00000000

08003918 <scalbn>:
 8003918:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800391c:	4616      	mov	r6, r2
 800391e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003922:	4683      	mov	fp, r0
 8003924:	468c      	mov	ip, r1
 8003926:	460b      	mov	r3, r1
 8003928:	b982      	cbnz	r2, 800394c <scalbn+0x34>
 800392a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800392e:	4303      	orrs	r3, r0
 8003930:	d039      	beq.n	80039a6 <scalbn+0x8e>
 8003932:	4b2f      	ldr	r3, [pc, #188]	@ (80039f0 <scalbn+0xd8>)
 8003934:	2200      	movs	r2, #0
 8003936:	f7fc fdc7 	bl	80004c8 <__aeabi_dmul>
 800393a:	4b2e      	ldr	r3, [pc, #184]	@ (80039f4 <scalbn+0xdc>)
 800393c:	4683      	mov	fp, r0
 800393e:	429e      	cmp	r6, r3
 8003940:	468c      	mov	ip, r1
 8003942:	da0d      	bge.n	8003960 <scalbn+0x48>
 8003944:	a326      	add	r3, pc, #152	@ (adr r3, 80039e0 <scalbn+0xc8>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	e01b      	b.n	8003984 <scalbn+0x6c>
 800394c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8003950:	42ba      	cmp	r2, r7
 8003952:	d109      	bne.n	8003968 <scalbn+0x50>
 8003954:	4602      	mov	r2, r0
 8003956:	f7fc fc01 	bl	800015c <__adddf3>
 800395a:	4683      	mov	fp, r0
 800395c:	468c      	mov	ip, r1
 800395e:	e022      	b.n	80039a6 <scalbn+0x8e>
 8003960:	460b      	mov	r3, r1
 8003962:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003966:	3a36      	subs	r2, #54	@ 0x36
 8003968:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800396c:	428e      	cmp	r6, r1
 800396e:	dd0c      	ble.n	800398a <scalbn+0x72>
 8003970:	a31d      	add	r3, pc, #116	@ (adr r3, 80039e8 <scalbn+0xd0>)
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	461c      	mov	r4, r3
 8003978:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800397c:	f361 74df 	bfi	r4, r1, #31, #1
 8003980:	4621      	mov	r1, r4
 8003982:	481d      	ldr	r0, [pc, #116]	@ (80039f8 <scalbn+0xe0>)
 8003984:	f7fc fda0 	bl	80004c8 <__aeabi_dmul>
 8003988:	e7e7      	b.n	800395a <scalbn+0x42>
 800398a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800398e:	4432      	add	r2, r6
 8003990:	428a      	cmp	r2, r1
 8003992:	dced      	bgt.n	8003970 <scalbn+0x58>
 8003994:	2a00      	cmp	r2, #0
 8003996:	dd0a      	ble.n	80039ae <scalbn+0x96>
 8003998:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800399c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80039a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80039a4:	46ac      	mov	ip, r5
 80039a6:	4658      	mov	r0, fp
 80039a8:	4661      	mov	r1, ip
 80039aa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80039ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80039b2:	da09      	bge.n	80039c8 <scalbn+0xb0>
 80039b4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80039b8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80039bc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80039c0:	480e      	ldr	r0, [pc, #56]	@ (80039fc <scalbn+0xe4>)
 80039c2:	f041 011f 	orr.w	r1, r1, #31
 80039c6:	e7bd      	b.n	8003944 <scalbn+0x2c>
 80039c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80039cc:	3236      	adds	r2, #54	@ 0x36
 80039ce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80039d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80039d6:	4658      	mov	r0, fp
 80039d8:	4629      	mov	r1, r5
 80039da:	2200      	movs	r2, #0
 80039dc:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <scalbn+0xe8>)
 80039de:	e7d1      	b.n	8003984 <scalbn+0x6c>
 80039e0:	c2f8f359 	.word	0xc2f8f359
 80039e4:	01a56e1f 	.word	0x01a56e1f
 80039e8:	8800759c 	.word	0x8800759c
 80039ec:	7e37e43c 	.word	0x7e37e43c
 80039f0:	43500000 	.word	0x43500000
 80039f4:	ffff3cb0 	.word	0xffff3cb0
 80039f8:	8800759c 	.word	0x8800759c
 80039fc:	c2f8f359 	.word	0xc2f8f359
 8003a00:	3c900000 	.word	0x3c900000
 8003a04:	00000000 	.word	0x00000000

08003a08 <floor>:
 8003a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003a10:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8003a14:	2e13      	cmp	r6, #19
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	4680      	mov	r8, r0
 8003a20:	dc35      	bgt.n	8003a8e <floor+0x86>
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	da17      	bge.n	8003a56 <floor+0x4e>
 8003a26:	a334      	add	r3, pc, #208	@ (adr r3, 8003af8 <floor+0xf0>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f7fc fb96 	bl	800015c <__adddf3>
 8003a30:	2200      	movs	r2, #0
 8003a32:	2300      	movs	r3, #0
 8003a34:	f7fc ffd8 	bl	80009e8 <__aeabi_dcmpgt>
 8003a38:	b150      	cbz	r0, 8003a50 <floor+0x48>
 8003a3a:	2c00      	cmp	r4, #0
 8003a3c:	da57      	bge.n	8003aee <floor+0xe6>
 8003a3e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003a42:	432c      	orrs	r4, r5
 8003a44:	2500      	movs	r5, #0
 8003a46:	42ac      	cmp	r4, r5
 8003a48:	4c2d      	ldr	r4, [pc, #180]	@ (8003b00 <floor+0xf8>)
 8003a4a:	bf08      	it	eq
 8003a4c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8003a50:	4623      	mov	r3, r4
 8003a52:	462a      	mov	r2, r5
 8003a54:	e024      	b.n	8003aa0 <floor+0x98>
 8003a56:	4f2b      	ldr	r7, [pc, #172]	@ (8003b04 <floor+0xfc>)
 8003a58:	4137      	asrs	r7, r6
 8003a5a:	ea01 0c07 	and.w	ip, r1, r7
 8003a5e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003a62:	d01d      	beq.n	8003aa0 <floor+0x98>
 8003a64:	a324      	add	r3, pc, #144	@ (adr r3, 8003af8 <floor+0xf0>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f7fc fb77 	bl	800015c <__adddf3>
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2300      	movs	r3, #0
 8003a72:	f7fc ffb9 	bl	80009e8 <__aeabi_dcmpgt>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d0ea      	beq.n	8003a50 <floor+0x48>
 8003a7a:	2c00      	cmp	r4, #0
 8003a7c:	bfbe      	ittt	lt
 8003a7e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8003a82:	4133      	asrlt	r3, r6
 8003a84:	18e4      	addlt	r4, r4, r3
 8003a86:	2500      	movs	r5, #0
 8003a88:	ea24 0407 	bic.w	r4, r4, r7
 8003a8c:	e7e0      	b.n	8003a50 <floor+0x48>
 8003a8e:	2e33      	cmp	r6, #51	@ 0x33
 8003a90:	dd0a      	ble.n	8003aa8 <floor+0xa0>
 8003a92:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003a96:	d103      	bne.n	8003aa0 <floor+0x98>
 8003a98:	f7fc fb60 	bl	800015c <__adddf3>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa8:	f04f 3cff 	mov.w	ip, #4294967295
 8003aac:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003ab0:	fa2c f707 	lsr.w	r7, ip, r7
 8003ab4:	4207      	tst	r7, r0
 8003ab6:	d0f3      	beq.n	8003aa0 <floor+0x98>
 8003ab8:	a30f      	add	r3, pc, #60	@ (adr r3, 8003af8 <floor+0xf0>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f7fc fb4d 	bl	800015c <__adddf3>
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f7fc ff8f 	bl	80009e8 <__aeabi_dcmpgt>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d0c0      	beq.n	8003a50 <floor+0x48>
 8003ace:	2c00      	cmp	r4, #0
 8003ad0:	da0a      	bge.n	8003ae8 <floor+0xe0>
 8003ad2:	2e14      	cmp	r6, #20
 8003ad4:	d101      	bne.n	8003ada <floor+0xd2>
 8003ad6:	3401      	adds	r4, #1
 8003ad8:	e006      	b.n	8003ae8 <floor+0xe0>
 8003ada:	2301      	movs	r3, #1
 8003adc:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003ae0:	40b3      	lsls	r3, r6
 8003ae2:	441d      	add	r5, r3
 8003ae4:	4545      	cmp	r5, r8
 8003ae6:	d3f6      	bcc.n	8003ad6 <floor+0xce>
 8003ae8:	ea25 0507 	bic.w	r5, r5, r7
 8003aec:	e7b0      	b.n	8003a50 <floor+0x48>
 8003aee:	2500      	movs	r5, #0
 8003af0:	462c      	mov	r4, r5
 8003af2:	e7ad      	b.n	8003a50 <floor+0x48>
 8003af4:	f3af 8000 	nop.w
 8003af8:	8800759c 	.word	0x8800759c
 8003afc:	7e37e43c 	.word	0x7e37e43c
 8003b00:	bff00000 	.word	0xbff00000
 8003b04:	000fffff 	.word	0x000fffff

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
